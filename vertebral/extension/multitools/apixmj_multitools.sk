# =====================================================================================================================
# APIxMJ - Files
# ---------------------------------------------------------------------------------------------------------------------
function mj_files_multitools():
	set {_folder} to mj_editfiles("manager.data", "data.addon.vertebral_extension.multitools.folder")
	load yaml "plugins/APIxMJ/%{_folder}%/config.yml" as "mj.multitools.config"
	load yaml "plugins/APIxMJ/%{_folder}%/data.yml" as "mj.multitools.data"
	set {_list::*} to mj_editfiles_list("manager.config", "data.language.list")
	if {_list::*} is set:
		loop {_list::*}:
			load yaml "plugins/APIxMJ/%{_folder}%/language/%loop-value%.yml" as "mj.multitools.language.%loop-value%"
			load yaml "plugins/APIxMJ/%{_folder}%/help/%loop-value%.yml" as "mj.multitools.help.%loop-value%"
	stop
# ---------------------------------------------------------------------------------------------------------------------
on load:
	set {_list::*} to mj_manager_skript_list()
	if {_list::*} contains "apixmj_manager.sk" and "apixmj.sk" and "apixmj_ranker.sk" and "apixmj_essentials.sk":
		send "[APIxMJ] Loading multitools..." to console
		mj_files_multitools()
		mj_editfiles("manager.data", "data.addon.vertebral_extension.multitools.version", "modify", "2022.10.29.0001")
	else:
		broadcast "[APIxMJ] Script loading cancel It requires (apixmj_manager.sk, apixmj.sk, apixmj_ranker.sk and apixmj_essentials.sk)"
		unload script file "apixmj_multitools.sk"
	stop
# ---------------------------------------------------------------------------------------------------------------------
on skript stop:
	rename file "plugins/Skript/scripts/apixmj_multitools.sk" to "-apixmj_multitools.sk"
	send "[APIxMJ] Unloading multitools.."
	stop
# ---------------------------------------------------------------------------------------------------------------------
# APIxMJ - Files
# =====================================================================================================================
# APIxMJ - Auto Broadcasting
# ---------------------------------------------------------------------------------------------------------------------
every 15 minutes:
	set {_check} to mj_editfiles_boolean("multitools.config", "data.auto_broadcast")
	if {_check} is true:
		set {_lang} to mj_editfiles("manager.config", "data.language.use")
		set {_count} to mj_manager_nodes_count("multitools.language.%{_lang}%", "data.auto_broadcast")
		set {_random} to a random integer from 1 to {_count}
		loop all players:
			set {_send} to mj_editfiles_gettext("multitools", "data.auto_broadcast.%{_random}%", loop-player)
			send formatted "%{_send}%" to loop-player
	stop
# ---------------------------------------------------------------------------------------------------------------------
# APIxMJ - Auto Broadcasting
# =====================================================================================================================
# APIxMJ - Server
# ---------------------------------------------------------------------------------------------------------------------
command /server [<text>] [<player>]:
	executable by: player
	trigger:
		if player has permission "*" or "mj.*" or "mj.server.*" or "mj.server":
			if arg-1 is set:
				if arg-2 is set:
					send arg-2 to server arg-1
				else:
					send player to server arg-1
			else:
				mj_core_message(player, "core", "data.prefix", "core", "data.argument.name")
		else:
			mj_core_permission(player, "core", "data.prefix", "mj.server")
		stop
# ---------------------------------------------------------------------------------------------------------------------
on tab complete of "/server":
	set {_list::*} to mj_editfiles_list("multitools.config", "data.server_list")
	set tab completions for position 1 to {_list::*}
	stop
# ---------------------------------------------------------------------------------------------------------------------
# APIxMJ - Server
# =====================================================================================================================
# APIxMJ - LaunchPads
# ---------------------------------------------------------------------------------------------------------------------
on pressure plate:
	set {_list::*} to mj_editfiles_list("multitools.config", "data.launch_pads.region_list")
	loop {_list::*}:
		if "%region at player%" contains loop-value:
			set {_value1} to mj_editfiles_number("multitools.config", "data.launch_pads.upwards")
			push player upwards at speed {_value1}
			set {_value2} to mj_editfiles_number("multitools.config", "data.launch_pads.forwards")
			push player forwards at speed {_value2}
	stop
# ---------------------------------------------------------------------------------------------------------------------
# APIxMJ - LaunchPads
# =====================================================================================================================
# APIxMJ - Hat
# ---------------------------------------------------------------------------------------------------------------------
command /hat:
	executable by: player
	trigger:
		if player has permission "*" or "mj.*" or "mj.hat.*" or "mj.hat":
			set {_item1} to player's tool
			set {_item2} to player's helmet
			set player's helmet to air
			set player's helmet to {_item1}
			set player's tool to air
			set player's tool to {_item2}
		else:
			mj_core_permission(player, "core", "data.prefix", "mj.hat")
		stop
# ---------------------------------------------------------------------------------------------------------------------
# APIxMJ - Hat
# =====================================================================================================================
# APIxMJ - Anvil
# ---------------------------------------------------------------------------------------------------------------------
on rightclick:
	set {_list::*} to mj_editfiles_list("multitools.config", "data.anvil_region_list")
	loop {_list::*}:
		if "%region at player%" contains loop-value:
			if "%event-block%" contains "anvil":
				if event-block is westward unbroken anvil or westward damaged anvil or westward chipped anvil:
					set event-block to westward unbroken anvil
				else if event-block is eastward unbroken anvil or eastward damaged anvil or eastward chipped anvil:
					set event-block to eastward unbroken anvil
				else if event-block is southward unbroken anvil or southward damaged anvil or southward chipped anvil:
					set event-block to southward unbroken anvil
				else:
					set event-block to unbroken anvil
	stop
# ---------------------------------------------------------------------------------------------------------------------
# APIxMJ - Anvil
# =====================================================================================================================
# APIxMJ - No Fishing Rod
# ---------------------------------------------------------------------------------------------------------------------
on rightclick:
	set {_list::*} to mj_editfiles_list("multitools.config", "data.no_rod_region_list")
	loop {_list::*}:
		if "%region at player%" contains loop-value:
			if "%player's tool%" contains "rod":
				cancel event
	stop
# ---------------------------------------------------------------------------------------------------------------------
# APIxMJ - No Fishing Rod
# =====================================================================================================================
# APIxMJ - No Damage World
# ---------------------------------------------------------------------------------------------------------------------
on damage:
	set {_list::*} to mj_editfiles_list("multitools.config", "data.no_damage_world_list")
	loop {_list::*}:
		if "%victim's world%" contains loop-value:
			if victim is player:
				cancel event
	stop
# ---------------------------------------------------------------------------------------------------------------------
# APIxMJ - No Damage World
# =====================================================================================================================
# APIxMJ - Tablist
# ---------------------------------------------------------------------------------------------------------------------
#every 3 seconds:
#	set {_check} to mj_editfiles_boolean("server.config", "data.tablist.condition")
#	if {_check} is true:
#		loop all players:
#			set {_rank} to mj_ranker(loop-player, "tabulation")
#			set {_color} to mj_ranker(loop-player, "color")
#			set {_tab} to mj_editfiles("essentials.config", "data.format.tablist")
#			set {_checkafk} to mj_editfiles_boolean("userdata", "data.%loop-player's uuid%.essentials.afk")
#			if {_checkafk} is true:
#				set {_afk} to "&6(AFK)"
#			else:
#				set {_afk} to ""
#			replace "$0" with "%{_rank}%" in {_tab}
#			replace "$1" with "%{_color}%%loop-player%" in {_tab}
#			set the loop-player's tablist name to " %{_tab}% %{_afk}% "
#			mj_tablist(loop-player)
#	stop
# ---------------------------------------------------------------------------------------------------------------------
#function mj_tablist(player: player):
#	set {_connected} to 0
#	loop all players:
#		set {_check} to mj_editfiles_boolean("userdata", "data.%loop-player's uuid%.essentials.vanish")
#		if {_check} is false:
#			add 1 to {_connected}
#	set {_discord.link} to mj_editfiles("essentials.config", "data.discordlink")
#	set {_website.link} to mj_editfiles("essentials.config", "data.websitelink")
#	set {_online} to mj_editfiles_gettext("server", "data.tablist.onlineplayer", {_player}, "%{_connected}%", "%max players count%")
#	set {_discord} to mj_editfiles_gettext("server", "data.tablist.discord", {_player}, "%{_discord.link}%")
#	set {_website} to mj_editfiles_gettext("server", "data.tablist.website", {_player}, "%{_website.link}%")
#	set {_ntitle} to 1
#	set {_nrod} to 1
#	set {_lang} to mj_editfiles("config", "data.serverlanguage")
#	set {_ctitle} to mj_manager_nodes_count("server.language.%{_lang}%", "data.tablist.animation.title")
#	set {_crod} to mj_manager_nodes_count("server.language.%{_lang}%", "data.tablist.animation.rod")
#	loop {_crod} times:
#		set {_title} to mj_editfiles_gettext("server", "data.tablist.animation.title.%{_ntitle}%", {_player})
#		set {_rod} to mj_editfiles_gettext("server", "data.tablist.animation.rod.%{_nrod}%", {_player})
#		add 1 to {_ntitle}
#		add 1 to {_nrod}
#		if {_ntitle} >= {_ctitle}+1:
#			set {_ntitle} to 1
#		if {_nDrod} >= {_crod}+1:
#			set {_ntitle} to 1
#		loop all players:
#			set {_ping} to mj_editfiles_gettext("server", "data.tablist.ping", loop-player, "%loop-player's ping%")
#			set {_1} to "%{_title}%%nl%%{_rod}%%nl%%{_online}%%nl%%{_ping}%%nl%%{_rod}%"
#			set {_2} to "%{_rod}%%nl%%{_discord}%%nl%%nl%%{_website}%"
#			set tab header to "%{_1}%" and footer to "%{_2}%" for loop-player
#		wait 3 ticks
#	stop
# ---------------------------------------------------------------------------------------------------------------------
# APIxMJ - Tablist
# =====================================================================================================================
# APIxMJ - Autolist
# ---------------------------------------------------------------------------------------------------------------------
on load:
	set {_list::*} to mj_manager_nodes("multitools.config", "data.tab_list.order")
	loop {_list::*}:
		set {_tag} to mj_editfiles("multitools.config", "data.tab_list.order.%loop-value%.tag")
		create nametag "%{_tag}%"
		set prefix of nametag "%{_tag}%" to ""
	create nametag "z-default"
	set prefix of nametag "z-default" to ""
	stop
# ---------------------------------------------------------------------------------------------------------------------
every 2 second:
	set {_count} to 0
	loop all players:
		add 1 to {_count}
	if {_count} >= 1:
		set {_list::*} to mj_manager_nodes("multitools.config", "data.tab_list.order")
		loop all players:
			loop {_list::*}:
				set {_tag} to mj_editfiles("multitools.config", "data.tab_list.order.%loop-value-2%.tag")
				set {_rank} to mj_editfiles("multitools.config", "data.tab_list.order.%loop-value-2%.rank")
				set {_node} to mj_ranker(loop-player, "source")
				if {_node} is "%{_rank}%":
					add loop-player to nametag "%{_tag}%"
					#remove loop-player from nametag "a-owner"
					exit loop
				else:
					add loop-player to nametag "z-default"
	stop
# ---------------------------------------------------------------------------------------------------------------------
# APIxMJ - Autolist
# =====================================================================================================================