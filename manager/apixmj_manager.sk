# =====================================================================================================================
# APIxMJ - Files ✓ ✗ ← ↖ ↑ ↗ → ↘ ↓ ↙ ➢ ➣ ➤ ⚠ ❤
# ---------------------------------------------------------------------------------------------------------------------
# PREMIUM - DIABLOxMJ: fa743dc8-450e-4f1b-a75c-8ae7e52b6f17 - Nyceidu: edcda98f-ed98-41c6-ba2c-77bc313ed248
# CRACK   - DIABLOxMJ: b00cadd2-6497-3134-93d5-5be9512e9f48 - Nyceidu: 1412f834-ede6-34f1-aeaa-84467fc1f237
# ---------------------------------------------------------------------------------------------------------------------
function mj_files_manager():
	load yaml "plugins/APIxMJ/manager/config.yml" as "mj.manager.config"
	load yaml "plugins/APIxMJ/manager/data.yml" as "mj.manager.data"
	load yaml "plugins/APIxMJ/manager/temp.yml" as "mj.temp"
	wait 1 second
	set {_list::*} to mj_editfiles_list("manager.config", "data.language.list")
	if {_list::*} is set:
		loop {_list::*}:
			load yaml "plugins/APIxMJ/manager/language/%loop-value%.yml" as "mj.manager.language.%loop-value%"
			load yaml "plugins/APIxMJ/manager/help/%loop-value%.yml" as "mj.manager.help.%loop-value%"
			load yaml "plugins/APIxMJ/manager/help_custom/%loop-value%.yml" as "mj.custom.help.%loop-value%"
			load yaml "plugins/APIxMJ/manager/rules/%loop-value%.yml" as "mj.custom.rules.%loop-value%"
	mj_editfiles("temp", "data.manager.addon.main.manager.version", "modify", "2023.07.03.0001")
	stop
# ---------------------------------------------------------------------------------------------------------------------
on load:
	send "[APIxMJ] Loading manager..." to console
	mj_files_manager()
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_editfiles(source: text, find: text="data", mode: text="extract", data: text="") :: text:
	if {_source} isn't "github" or "unicode":
		if {_source} contains "userdata.":
			set {_source} to mj_manager_userdata_profil({_source})
		if {_mode} is "extract":
			set {_result} to yaml value "%{_find}%" from "mj.%{_source}%"
			if {_result} isn't set:
				if {_data} isn't empty:
					set {_result} to {_data}
		else if {_mode} is "delete":
			set {_result} to yaml value "%{_find}%" from "mj.%{_source}%"
			if {_result} is set:
				delete yaml value "%{_find}%" from "mj.%{_source}%"
				save yaml "mj.%{_source}%"
		else:
			set yaml value "%{_find}%" from "mj.%{_source}%" to {_data}
			save yaml "mj.%{_source}%"
	else if {_source} is "unicode":
		if {_find} is "space":
			set {_result} to "‌"
	else:
		set {_result} to "https://raw.githubusercontent.com/DIABLOxMJ/APIxMJ"
	return {_result}
# ---------------------------------------------------------------------------------------------------------------------
function mj_editfiles_boolean(source: text, find: text="data", mode: text="extract", data: boolean=false) :: boolean:
	if {_source} contains "userdata.":
		set {_source} to mj_manager_userdata_profil({_source})
	if {_mode} is "extract":
		set {_result} to yaml value "%{_find}%" from "mj.%{_source}%"
		if {_result} isn't set:
			if {_data} isn't empty:
				set {_result} to {_data}
	else:
		set yaml value "%{_find}%" from "mj.%{_source}%" to {_data}
		save yaml "mj.%{_source}%"
	return {_result}
# ---------------------------------------------------------------------------------------------------------------------
function mj_editfiles_number(source: text, find: text="data", mode: text="extract", data: number=0) :: number:
	if {_source} contains "userdata.":
		set {_source} to mj_manager_userdata_profil({_source})
	if {_mode} is "extract":
		set {_result} to yaml value "%{_find}%" from "mj.%{_source}%"
		if {_result} isn't set:
			if {_data} isn't empty:
				set {_result} to {_data}
	else:
		set yaml value "%{_find}%" from "mj.%{_source}%" to {_data}
		save yaml "mj.%{_source}%"
	return {_result}
# ---------------------------------------------------------------------------------------------------------------------
function mj_editfiles_list(source: text, find: text="data", mode: text="extract", data: objects="") :: objects:
	if {_source} contains "userdata.":
		set {_source} to mj_manager_userdata_profil({_source})
	if {_mode} is "extract":
		set {_list::*} to yaml list "%{_find}%" from "mj.%{_source}%"
		if {_result} isn't set:
			if {_data} isn't empty:
				set {_result} to {_data}
	else:
		set yaml list "%{_find}%" from "mj.%{_source}%" to {_data::*}
		save yaml "mj.%{_source}%"
	return {_list::*}
# ---------------------------------------------------------------------------------------------------------------------
function mj_editfiles_stock(source: text, find: text="data", mode: text="extract", data: object="") :: object:
	if {_source} contains "userdata.":
		set {_source} to mj_manager_userdata_profil({_source})
	if {_mode} is "extract":
		set {_result} to yaml value "%{_find}%" from "mj.%{_source}%"
		if {_result} isn't set:
			if {_data} isn't empty:
				set {_result} to {_data}
	else:
		set yaml value "%{_find}%" from "mj.%{_source}%" to {_data}
		save yaml "mj.%{_source}%"
	return {_result}
# ---------------------------------------------------------------------------------------------------------------------
function mj_editfiles_timespan(source: text, find: text="data", mode: text="extract", data: timespan="") :: timespan:
	if {_source} contains "userdata.":
		set {_source} to mj_manager_userdata_profil({_source})
	if {_mode} is "extract":
		set {_result} to yaml value "%{_find}%" from "mj.%{_source}%"
		if {_result} isn't set:
			if {_data} isn't empty:
				set {_result} to {_data}
	else:
		set yaml value "%{_find}%" from "mj.%{_source}%" to {_data}
		save yaml "mj.%{_source}%"
	return {_result}
# ---------------------------------------------------------------------------------------------------------------------
function mj_editfiles_date(source: text, find: text="data", mode: text="extract", data: date="") :: date:
	if {_source} contains "userdata.":
		set {_source} to mj_manager_userdata_profil({_source})
	if {_mode} is "extract":
		set {_result} to yaml value "%{_find}%" from "mj.%{_source}%"
		if {_result} isn't set:
			if {_data} isn't empty:
				set {_result} to {_data}
	else:
		set yaml value "%{_find}%" from "mj.%{_source}%" to {_data}
		save yaml "mj.%{_source}%"
	return {_result}
# ---------------------------------------------------------------------------------------------------------------------
function mj_editfiles_gettext(source: text, find: text="data", player: player="none", info.1: text="none", info.2: text="none", info.3: text="none") :: text:
	set {_lang} to mj_manager_userdata_language({_player})
	set {_result} to yaml value "%{_find}%" from "mj.%{_source}%.language.%{_lang}%"
	if {_info.1} isn't "none":
		replace "$0" with {_info.1} in {_result}
	if {_info.2} isn't "none":
		replace "$1" with {_info.2} in {_result}
	if {_info.3} isn't "none":
		replace "$2" with {_info.3} in {_result}
	if {_result} isn't set:
		set {_result} to {_find}
	return {_result}
# ---------------------------------------------------------------------------------------------------------------------
# APIxMJ - Files
# =====================================================================================================================
# APIxMJ - Command
# ---------------------------------------------------------------------------------------------------------------------
command /manager [<text>] [<text>]:
	executable by: player
	trigger:
		if player is op:
			if arg-1 is set:
				if arg-1 is "reload":
					if arg-2 is "files":
						mj_files_manager()
						send "[APIxMJ] Data reloaded"
					else:
						player command "/sk reload apixmj_manager"
				else if arg-1 is "data_update":
					mj_manager_update_data()
					mj_manager_message(player, "manager", "data.prefix", "manager", "data.data_update")
			else:
				mj_manager_menu(player)
		stop
# ---------------------------------------------------------------------------------------------------------------------
on tab complete of "/manager":
	set tab completions for position 1 to "reload" and "data_update"
	if tab arg-1 is "reload":
		set tab completions for position 2 to "files"
	stop
# ---------------------------------------------------------------------------------------------------------------------
# APIxMJ - Command
# =====================================================================================================================
# APIxMJ - Gui Function
# ---------------------------------------------------------------------------------------------------------------------
function mj_manager_menu_return(player: player, id: text="main", slot: number=0):
	set {_return} to mj_editfiles_gettext("manager", "data.button.return", {_player})
	make a gui slot {_slot} of {_player} with barrier named {_return} to run:
		mj_manager_menu({_player}, {_id})
		stop
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_manager_menu_gui_generator(player: player, size: number=1, title: text="No gui name", item: text="air"):
	set {_item} to {_item} parsed as item with no nbt
	open virtual chest inventory with size {_size} named {_title} to {_player}
	set {_time} to 9*{_size}
	set {_slot} to 0
	loop {_time} times:
		make a gui slot {_slot} of {_player} with {_item} named " " to run:
			stop
		add 1 to {_slot}
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_manager_menu_experimental(player: player, source: text, id: text) :: text:
	set {_value} to mj_editfiles_gettext("manager", "data.experimental.stable", {_player})
	set {_check} to mj_editfiles_boolean("manager.data", "data.addon.%{_source}%.%{_id}%.experimental")
	if {_check} is true:
		set {_value} to mj_editfiles_gettext("manager", "data.experimental.instable", {_player})
	return {_value}
# ---------------------------------------------------------------------------------------------------------------------
on load:
	set {_list.1::*} to mj_manager_nodes("manager.data", "data.addon")
	loop {_list.1::*}:
		set {_value.1} to loop-value-1
		set {_list.2::*} to mj_manager_nodes("manager.data", "data.addon.%{_value.1}%")
		loop {_list.2::*}:
			set {_value.2} to loop-value-2
			set {_check} to yaml value "data.manager.addon.%{_value.1}%.%{_value.2}%.installed" from "mj.temp"
			if {_check} isn't set:
				mj_editfiles("temp", "data.manager.addon.%{_value.1}%.%{_value.2}%.version", "modify", "0000.00.00.0000")
				mj_editfiles_boolean("temp", "data.manager.addon.%{_value.1}%.%{_value.2}%.installed", "modify", false)
				mj_editfiles_boolean("temp", "data.manager.addon.%{_value.1}%.%{_value.2}%.condition", "modify", false)
				if {_value.2} is "manager":
					mj_editfiles_boolean("temp", "data.manager.addon.%{_value.1}%.%{_value.2}%.installed", "modify", true)
					mj_editfiles_boolean("temp", "data.manager.addon.%{_value.1}%.%{_value.2}%.condition", "modify", true)
	stop
# ---------------------------------------------------------------------------------------------------------------------
# APIxMJ - Gui Function
# =====================================================================================================================
# APIxMJ - Gui Request
# ---------------------------------------------------------------------------------------------------------------------
function mj_manager_menu_request(player: player, source: text, id: text, option: text):
	set {_title} to mj_editfiles_gettext("manager", "data.menu.confirm")
	mj_manager_menu_gui_generator({_player}, 3, {_title}, "light gray glass pane")
	mj_manager_menu_request_button({_player}, {_source}, {_id}, "confirm", {_option})
	mj_manager_menu_request_button({_player}, {_source}, {_id}, "cancel", {_option})
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_manager_menu_request_button(player: player, source: text, id: text, type: text, option: text):
	set {_name} to mj_manager_item_name({_player}, "manager.data", "data.button.request.%{_type}%.name")
	set {_slot} to mj_editfiles_number("manager.data", "data.button.request.%{_type}%.slot")
	set {_item.1} to mj_manager_item_convert("manager.data", "data.button.request.%{_type}%.item")
	set {_item.2} to mj_manager_item_description({_player}, {_item.1}, "data.button.request.%{_type}%")
	set {_item.3} to mj_manager_item_button({_player}, {_item.2}, "left_click", "manager", "data.open.choice")
	make a gui slot {_slot} of {_player} with {_item.3} named {_name} to close:
		if {_type} is "confirm":
			if {_option} is "install" or "update":
				mj_manager_menu_control_installer({_player}, {_source}, {_id}, {_option})
			else if {_option} is "reinstall":
				mj_manager_menu_control_reinstaller({_player}, {_source}, {_id})
			else if {_option} is "uninstall":
				mj_manager_menu_control_uninstaller({_player}, {_source}, {_id})
			else:
				mj_manager_menu_control({_player}, {_source}, {_id})
		else:
			mj_manager_menu_control({_player}, {_source}, {_id})
		stop
	stop
# ---------------------------------------------------------------------------------------------------------------------
# APIxMJ - Gui Request
# =====================================================================================================================
# APIxMJ - Gui Main
# ---------------------------------------------------------------------------------------------------------------------
function mj_manager_menu(player: player, id: text="main"):
	if {_id} is "main":
		set {_title} to mj_editfiles_gettext("manager", "data.menu.main", {_player})
		set {_item} to mj_editfiles("manager.config", "data.gui_background.item")
	else:
		set {_name} to mj_editfiles_gettext("manager", "data.index.%{_id}%.name", {_player})
		set {_title} to mj_editfiles_gettext("manager", "data.menu.menu", {_player}, {_name})
		if length of {_name} >= 16:
			set {_name} to mj_editfiles_gettext("manager", "data.index.%{_id}%.name_lite", {_player})
			set {_title} to mj_editfiles_gettext("manager", "data.menu.menu_lite", {_player}, {_name})
		set {_item} to mj_editfiles("manager.data", "data.index.%{_id}%.gui_background.item")
	mj_manager_menu_gui_generator({_player}, 6, {_title}, {_item})
	mj_manager_menu_index({_player}, {_id})
	mj_manager_menu_addon({_player}, {_id})
	if {_id} isn't "main":
		mj_manager_menu_control_button_condition_list({_player}, {_id})
		set {_return} to mj_editfiles("manager.data", "data.index.%{_id}%.menu_back")
		mj_manager_menu_return({_player}, {_return}, 49)
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_manager_menu_index(player: player, id: text):
	set {_list::*} to mj_manager_nodes("manager.data", "data.index")
	loop {_list::*}:
		set {_value} to mj_editfiles("manager.data", "data.index.%loop-value%.menu_back")
		if {_id} is {_value}:
			mj_manager_menu_index_button_generator({_player}, loop-value)
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_manager_menu_addon(player: player, id: text):
	set {_list::*} to mj_manager_nodes("manager.data", "data.addon.%{_id}%")
	loop {_list::*}:
		mj_manager_menu_addon_button_generator({_player}, {_id}, loop-value)
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_manager_menu_index_button_generator(player: player, id: text):
	set {_visible} to mj_editfiles_boolean("manager.data", "data.index.%{_id}%.visible")
	if {_visible} is true:
		set {_name} to mj_editfiles_gettext("manager", "data.index.%{_id}%.name", {_player})
		set {_title} to mj_editfiles_gettext("manager", "data.menu.name", {_player}, {_name})
		set {_slot} to mj_editfiles_number("manager.data", "data.index.%{_id}%.slot")
		set {_item.1} to mj_manager_item_convert("manager.data", "data.index.%{_id}%.item", true)
		set {_item.2} to mj_manager_item_description({_player}, {_item.1}, "data.index.%{_id}%")
		set {_item.3} to mj_manager_item_button({_player}, {_item.2}, "left_click", "manager", "data.open.gui_folder")
		make a gui slot {_slot} of {_player} with {_item.3} named {_title} to run:
			set {_next} to mj_editfiles("manager.data", "data.index.%{_id}%.menu_next")
			if {_next} isn't "none":
				mj_manager_menu({_player}, {_next})
			stop
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_manager_menu_addon_button_generator(player: player, source: text, id: text):
	set {_visible} to mj_editfiles_boolean("manager.data", "data.addon.%{_source}%.%{_id}%.visible")
	if {_visible} is true:
		set {_name} to mj_editfiles_gettext("manager", "data.addon.%{_source}%.%{_id}%.name", {_player})
		set {_title} to mj_editfiles_gettext("manager", "data.menu.name", {_player}, {_name})
		set {_exp} to mj_manager_menu_experimental({_player}, {_source}, {_id})
		set {_slot} to mj_editfiles_number("manager.data", "data.addon.%{_source}%.%{_id}%.slot")
		set {_item.1} to mj_manager_item_convert("manager.data", "data.addon.%{_source}%.%{_id}%.item", true)
		set {_item.2} to mj_manager_item_description({_player}, {_item.1}, "data.addon.%{_source}%.%{_id}%")
		set {_item.3} to mj_manager_item_button({_player}, {_item.2}, "left_click", "manager", "data.open.gui_panel")
		make a gui slot {_slot} of {_player} with {_item.3} named "%{_title}% %{_exp}%" to run:
			mj_manager_menu_control({_player}, {_source}, {_id})
			stop
	stop
# ---------------------------------------------------------------------------------------------------------------------
# APIxMJ - Gui Main
# =====================================================================================================================
# APIxMJ - Gui Control
# ---------------------------------------------------------------------------------------------------------------------
function mj_manager_menu_control(player: player, source: text, id: text):
	set {_name} to mj_editfiles_gettext("manager", "data.addon.%{_source}%.%{_id}%.name", {_player})
	set {_title} to mj_editfiles_gettext("manager", "data.menu.manager", {_player}, {_name})
	if length of {_name} >= 16:
		set {_name} to mj_editfiles_gettext("manager", "data.addon.%{_source}%.%{_id}%.name_lite", {_player})
		set {_title} to mj_editfiles_gettext("manager", "data.menu.manager_lite", {_player}, {_name})
	set {_item} to mj_editfiles("manager.data", "data.addon.%{_source}%.%{_id}%.gui_background.item")
	mj_manager_menu_gui_generator({_player}, 5, {_title}, {_item})
	mj_manager_menu_control_button_status({_player}, {_source}, {_id}, 10)
	mj_manager_menu_control_button_installer({_player}, {_source}, {_id})
	mj_manager_menu_control_button_update({_player}, {_source}, {_id})
	mj_manager_menu_control_button_help({_player}, {_source}, {_id})
	if {_id} isn't "manager":
		mj_manager_menu_control_button_condition({_player}, {_source}, {_id})
		mj_manager_menu_control_button_uninstaller({_player}, {_source}, {_id})
		mj_manager_menu_control_button_reinstaller({_player}, {_source}, {_id})
	mj_manager_menu_return({_player}, {_source}, 40)
	stop
# ---------------------------------------------------------------------------------------------------------------------
# APIxMJ - Gui Control
# =====================================================================================================================
# APIxMJ - Gui Control (Status)
# ---------------------------------------------------------------------------------------------------------------------
function mj_manager_menu_control_button_status(player: player, source: text, id: text, slot: number):
	set {_name} to mj_editfiles_gettext("manager", "data.addon.%{_source}%.%{_id}%.name", {_player})
	set {_exp} to mj_manager_menu_experimental({_player}, {_source}, {_id})
	set {_item.1} to paper
	set {_desc} to mj_editfiles_gettext("manager", "data.category.info", {_player})
	set line 2 of lore of {_item.1} to "%{_desc}%"
	set {_item.2} to mj_manager_menu_control_button_status_data({_player}, {_source}, {_id}, {_item.1}, "version")
	set {_item.3} to mj_manager_menu_control_button_status_data({_player}, {_source}, {_id}, {_item.2}, "depends")
	set {_item.4} to mj_manager_menu_control_button_status_data({_player}, {_source}, {_id}, {_item.3}, "skript")
	set {_item.5} to mj_manager_menu_control_button_status_data({_player}, {_source}, {_id}, {_item.4}, "file")
	set {_item.6} to mj_manager_item_description({_player}, {_item.5}, "data.addon.%{_source}%.%{_id}%")	
	make a gui slot {_slot} of {_player} with {_item.6} named "%{_name}% %{_exp}%" to run:
		stop
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_manager_menu_control_button_status_data(player: player, source: text, id: text, item: item, type: text) :: item:
	set {_count} to mj_manager_item_lore_count({_item})
	if {_type} is "version":
		set {_data.1} to mj_editfiles("temp", "data.manager.addon.%{_source}%.%{_id}%.%{_type}%")
		set {_data.2} to mj_editfiles_gettext("manager", "data.category.%{_type}%.1", {_player}, {_data.1})
		set line {_count} of lore of {_item} to "%{_data.2}%"
		add 2 to {_count}
	else:
		set {_data.1} to mj_editfiles("manager.data", "data.addon.%{_source}%.%{_id}%.%{_type}%.1")
		if {_data.1} isn't "none":
			set {_data.2} to mj_editfiles_gettext("manager", "data.category.%{_type}%", {_player})
			set line {_count} of lore of {_item} to "%{_data.2}%"
			add 1 to {_count}
			set {_list::*} to mj_manager_nodes("manager.data", "data.addon.%{_source}%.%{_id}%.%{_type}%")
			loop {_list::*}:
				set {_data.3} to mj_editfiles("manager.data", "data.addon.%{_source}%.%{_id}%.%{_type}%.%loop-value%")
				set {_data.4} to mj_editfiles_gettext("manager", "data.button.argument", {_player}, {_data.3})
				if {_type} is "depends":
					set {_name.1} to mj_editfiles_gettext("manager", "data.addon.%{_data.3}%.name", {_player})
					set {_name.2} to uncolored {_name.1}
					set {_data.4} to mj_editfiles_gettext("manager", "data.button.argument", {_player}, "&a%{_name.2}%")
				set line {_count} of lore of {_item} to "%{_data.4}%"
				add 1 to {_count}
	return {_item}
# ---------------------------------------------------------------------------------------------------------------------
# APIxMJ - Gui Control (Status)
# =====================================================================================================================
# APIxMJ - Gui Control (Installer)
# ---------------------------------------------------------------------------------------------------------------------
function mj_manager_menu_control_button_installer(player: player, source: text, id: text):
	set {_name} to mj_editfiles_gettext("manager", "data.button.installer.name", {_player})
	set {_slot} to mj_editfiles_number("manager.data", "data.button.installer.slot")
	set {_installed} to mj_editfiles_boolean("temp", "data.manager.addon.%{_source}%.%{_id}%.installed")
	set {_item} to minecart
	set {_mode} to mj_editfiles_gettext("manager", "data.type.not_installed", {_player})
	if {_installed} is true:
		set {_item} to minecart with chest
		set {_mode} to mj_editfiles_gettext("manager", "data.type.installed", {_player})
	else:
		set {_version} to mj_editfiles("temp", "data.manager.addon.%{_source}%.%{_id}%.version")
		if {_version} isn't "0000.00.00.0000":
			set {_mode} to mj_editfiles_gettext("manager", "data.type.uninstalled", {_player})
	set {_value.1} to mj_editfiles("manager.data", "data.addon.%{_source}%.%{_id}%.depends.1")
	if {_value.1} isn't "none":
		set {_list::*} to mj_manager_nodes("manager.data", "data.addon.%{_source}%.%{_id}%.depends")
		loop {_list::*}:
			set {_value.1} to mj_editfiles("manager.data", "data.addon.%{_source}%.%{_id}%.depends.%loop-value%")
			set {_value.2} to mj_editfiles_boolean("temp", "data.manager.addon.%{_value.1}%.installed")
			set {_value.3} to mj_editfiles_gettext("manager", "data.addon.%{_value.1}%.name", {_player})
			if {_value.2} isn't true:
				set {_name} to mj_editfiles_gettext("manager", "data.button.installer.request", {_player}, {_value.3})
				set {_installed} to true
				exit loop
	set {_install} to mj_editfiles_gettext("manager", "data.category.type", {_player}, {_mode})
	set line 2 of lore of {_item} to "%{_install}%"
	set {_item} to mj_manager_item_description({_player}, {_item}, "data.button.installer")
	if {_installed} isn't true:
		set {_item} to mj_manager_item_button({_player}, {_item}, "left_click", "manager", "data.open.install")
	make a gui slot {_slot} of {_player} with {_item} named {_name} to run:
		if {_installed} isn't true:
			mj_manager_menu_request({_player}, {_source}, {_id}, "install")
		stop
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_manager_menu_control_installer(player: player, source: text, id: text, option: text):
	set {_name} to mj_editfiles_gettext("manager", "data.addon.%{_source}%.%{_id}%.name", {_player})
	set {_github} to mj_editfiles("manager.data", "data.addon.%{_source}%.%{_id}%.github_folder")
	set {_folder} to mj_editfiles("manager.data", "data.addon.%{_source}%.%{_id}%.folder")
	set {_link} to mj_editfiles("github")
	create script "plugins/APIxMJ/%{_folder}%/language/log.txt"
	delete file "plugins/APIxMJ/%{_folder}%/language/log.txt"
	create script "plugins/APIxMJ/%{_folder}%/help/log.txt"
	delete file "plugins/APIxMJ/%{_folder}%/help/log.txt"
	set {_version} to text from "%{_link}%/main/%{_github}%/version.txt"
	mj_editfiles("temp", "data.manager.addon.%{_source}%.%{_id}%.version", "modify", {_version})
	mj_editfiles_boolean("temp", "data.manager.addon.%{_source}%.%{_id}%.installed", "modify", true)
	mj_editfiles_boolean("temp", "data.manager.addon.%{_source}%.%{_id}%.condition", "modify", true)
	mj_manager_menu_control_installer_skript({_player}, {_source}, {_id}, {_option})
	if {_option} is "install":	
		mj_manager_message({_player}, "manager", "data.prefix", "manager", "data.process.installed", {_name})
	else if {_option} is "reinstall":
		mj_manager_message({_player}, "manager", "data.prefix", "manager", "data.process.reinstalled", {_name})
	else if {_option} is "update":
		mj_manager_message({_player}, "manager", "data.prefix", "manager", "data.process.updated", {_name})
	mj_manager_menu_control({_player}, {_source}, {_id})
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_manager_menu_control_installer_skript(player: player, source: text, id: text, option: text):
	set {_link} to mj_editfiles("github")
	set {_github} to mj_editfiles("manager.data", "data.addon.%{_source}%.%{_id}%.github_folder")
	set {_list::*} to mj_manager_nodes("manager.data", "data.addon.%{_source}%.%{_id}%.skript")
	loop {_list::*}:
		set {_skript} to mj_editfiles("manager.data", "data.addon.%{_source}%.%{_id}%.skript.%loop-value%")
		set {_list::*} to mj_manager_skript_list()
		if {_list::*} contains {_skript}:
			delete file "plugins/Skript/scripts/%{_skript}%.sk"
			wait 2 ticks
		download file from "%{_link}%/main/%{_github}%/%{_skript}%.sk" to file "plugins/Skript/scripts/%{_skript}%.sk"
	if {_option} is "install" or "reinstall":	
		mj_manager_menu_control_installer_file({_player}, {_source}, {_id})
	wait 2 seconds
	set {_start} to mj_editfiles("manager.data", "data.addon.%{_source}%.%{_id}%.skript.1")
	reload script "%{_start}%"
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_manager_menu_control_installer_file(player: player, source: text, id: text):
	set {_link} to mj_editfiles("github")
	set {_github} to mj_editfiles("manager.data", "data.addon.%{_source}%.%{_id}%.github_folder")
	set {_folder} to mj_editfiles("manager.data", "data.addon.%{_source}%.%{_id}%.folder")
	set {_list.1::*} to mj_manager_nodes("manager.data", "data.addon.%{_source}%.%{_id}%.yml")
	loop {_list.1::*}:
		set {_file} to mj_editfiles("manager.data", "data.addon.%{_source}%.%{_id}%.yml.%loop-value%")
		if {_file} isn't "none":
			download file from "%{_link}%/main/%{_github}%/%{_file}%.yml" to file "plugins/APIxMJ/%{_folder}%/%{_file}%.yml"
	set {_list.2::*} to mj_manager_nodes("manager.data", "data.addon.%{_source}%.%{_id}%.preset")
	loop {_list.2::*}:
		set {_file} to mj_editfiles("manager.data", "data.addon.%{_source}%.%{_id}%.preset.%loop-value%")
		if {_file} isn't "none":
			create script "plugins/APIxMJ/%{_folder}%/preset/log.txt"
			delete file "plugins/APIxMJ/%{_folder}%/preset/log.txt"
			wait 2 ticks
			download file from "%{_link}%/main/%{_github}%/preset/%{_file}%.yml" to file "plugins/APIxMJ/%{_folder}%/preset/%{_file}%.yml"
	set {_list.3::*} to mj_editfiles_list("manager.config", "data.language.list")
	loop {_list.3::*}:
		download file from "%{_link}%/main/%{_github}%/language/%loop-value%.yml" to file "plugins/APIxMJ/%{_folder}%/language/%loop-value%.yml"
		download file from "%{_link}%/main/%{_github}%/help/%loop-value%.yml" to file "plugins/APIxMJ/%{_folder}%/help/%loop-value%.yml"
	stop
# ---------------------------------------------------------------------------------------------------------------------
# APIxMJ - Gui Control (Installer)
# =====================================================================================================================
# APIxMJ - Gui Control (Update)
# ---------------------------------------------------------------------------------------------------------------------
function mj_manager_menu_control_button_update(player: player, source: text, id: text, choice: number=1):
	set {_github} to mj_editfiles("manager.data", "data.addon.%{_source}%.%{_id}%.github_folder")
	set {_folder} to mj_editfiles("manager.data", "data.addon.%{_source}%.%{_id}%.folder")
	set {_check} to mj_editfiles_boolean("temp", "data.manager.addon.%{_source}%.%{_id}%.installed")
	if {_check} is true:
		set {_name} to mj_editfiles_gettext("manager", "data.button.update.name.%{_choice}%", {_player})
		set {_slot} to mj_editfiles_number("manager.data", "data.button.update.slot")
		if {_choice} is 2:
			set {_item} to minecart with furnace
		else if {_choice} is 3:
			set {_item} to minecart with chest
		else:
			set {_item} to minecart
		set {_count} to 2
		set {_version.1} to mj_editfiles("temp", "data.manager.addon.%{_source}%.%{_id}%.version")
		set {_version.2} to mj_editfiles_gettext("manager", "data.category.version.2", {_player}, {_version.1})
		set line {_count} of lore of {_item} to "%{_version.2}%"
		add 1 to {_count}
		set {_none} to mj_editfiles_gettext("manager", "data.none")
		set {_version.3} to mj_editfiles_gettext("manager", "data.category.version.3", {_player}, {_none})
		set line {_count} of lore of {_item} to "%{_version.3}%"
		if {_choice} is 3:
			set {_link} to mj_editfiles("github")
			set {_version.3} to text from "%{_link}%/main/%{_github}%/version.txt"
			set {_version.4} to mj_editfiles_gettext("manager", "data.category.version.3", {_player}, {_version.3})
			set line {_count} of lore of {_item} to "%{_version.4}%"
		set {_item} to mj_manager_item_description({_player}, {_item}, "data.button.update")
		if {_choice} is 1:
			set {_item} to mj_manager_item_button({_player}, {_item}, "left_click", "manager", "data.open.update_check")
			make a gui slot {_slot} of {_player} with {_item} named {_name} to run:
				mj_manager_menu_control_button_update_check({_player}, {_source}, {_id}, {_choice})
				stop
		else if {_choice} is 3:			
			set {_item} to mj_manager_item_button({_player}, {_item}, "left_click", "manager", "data.open.update_now")
			make a gui slot {_slot} of {_player} with {_item} named {_name} to close:		
				mj_manager_menu_control_installer({_player}, {_source}, {_id}, "update")
				stop
		else:
			make a gui slot {_slot} of {_player} with {_item} named {_name} to run:
				stop
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_manager_menu_control_button_update_check(player: player, source: text, id: text, choice: number=1):
	set {_link} to mj_editfiles("github")
	if {_choice} is 1:
		mj_manager_menu_control_button_update({_player}, {_source}, {_id}, 2)
		wait 2 seconds
		set {_version} to mj_editfiles("temp", "data.manager.addon.%{_source}%.%{_id}%.version")
		set {_github} to mj_editfiles("manager.data", "data.addon.%{_source}%.%{_id}%.github_folder")
		set {_check} to text from "%{_link}%/main/%{_github}%/version.txt"
		if "%{_check}%" isn't "%{_version}%":
			mj_manager_menu_control_button_update({_player}, {_source}, {_id}, 3)
		else:
			mj_manager_menu_control_button_update({_player}, {_source}, {_id}, 4)
	stop
# ---------------------------------------------------------------------------------------------------------------------
every 1 hour:
	mj_manager_update_data()
	set {_check} to mj_editfiles_boolean("manager.config", "data.auto_update")
	if {_check} is true:
		mj_manager_update()
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_manager_update():
	set {_link} to mj_editfiles("github")
	set {_list.1::*} to mj_manager_nodes("manager.data", "data.addon")
	loop {_list.1::*}:
		set {_list.2::*} to mj_manager_nodes("manager.data", "data.addon.%loop-value-1%")
		loop {_list.2::*}:
			set {_version} to mj_editfiles("temp", "data.manager.addon.%loop-value-1%.%loop-value-2%.version")
			set {_github} to mj_editfiles("manager.data", "data.addon.%loop-value-1%.%loop-value-2%.github")
			set {_check} to text from "%{_link}%/%{_folder}%/version.txt"
			if "%{_check}%" doesn't contain "%{_version}%":
				mj_manager_menu_control_installer({_source}, loop-value-1, loop-value-2, "update")
				wait 8 seconds
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_manager_update_data():
	set {_link} to mj_editfiles("github")
	delete file "plugins/APIxMJ/manager/data.yml"
	delete file "plugins/APIxMJ/manager/language/fr.yml"
	delete file "plugins/APIxMJ/manager/help/fr.yml"
	wait 2 ticks
	download file from "%{_link}%/main/manager/data.yml" to file "plugins/APIxMJ/manager/data.yml"
	download file from "%{_link}%/main/manager/language/fr.yml" to file "plugins/APIxMJ/manager/language/fr.yml"
	download file from "%{_link}%/main/manager/help/fr.yml" to file "plugins/APIxMJ/manager/help/fr.yml"
	wait 1 second
	mj_files_manager()
	send "[APIxMJ] Database for Manager Updated !" to console
	stop
# ---------------------------------------------------------------------------------------------------------------------
# APIxMJ - Gui Control (Update)
# =====================================================================================================================
# APIxMJ - Gui Control (Uninstaller)
# ---------------------------------------------------------------------------------------------------------------------
function mj_manager_menu_control_button_uninstaller(player: player, source: text, id: text):
	set {_check} to mj_editfiles_boolean("temp", "data.manager.addon.%{_source}%.%{_id}%.installed")
	if {_check} is true:
		set {_name} to mj_editfiles_gettext("manager", "data.button.uninstalled.name", {_player})
		set {_slot} to mj_editfiles_number("manager.data", "data.button.uninstalled.slot")
		set {_item.1} to mj_manager_item_description({_player}, minecart with tnt, "data.button.uninstalled")
		set {_item.2} to mj_manager_item_button({_player}, {_item.1}, "left_click", "manager", "data.open.uninstall")
		make a gui slot {_slot} of {_player} with {_item.2} named {_name} to run:
			mj_manager_menu_request({_player}, {_source}, {_id}, "uninstall")
			stop
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_manager_menu_control_uninstaller(player: player, source: text, id: text):
	set {_name} to mj_editfiles_gettext("manager", "data.addon.%{_source}%.%{_id}%.name", {_player})
	set {_list::*} to mj_manager_nodes("manager.data", "data.addon.%{_source}%.%{_id}%.skript")
	loop {_list::*}:
		set {_skript} to mj_editfiles("manager.data", "data.addon.%{_source}%.%{_id}%.skript.%loop-value%")
		unload script file "%{_skript}%.sk"
		delete file "plugins/Skript/scripts/-%{_skript}%.sk"
	mj_editfiles_boolean("temp", "data.manager.addon.%{_source}%.%{_id}%.installed", "modify", false)
	mj_editfiles_boolean("temp", "data.manager.addon.%{_source}%.%{_id}%.condition", "modify", false)
	mj_manager_message({_player}, "manager", "data.prefix", "manager", "data.process.uninstalled", {_name})
	stop
# ---------------------------------------------------------------------------------------------------------------------
# APIxMJ - Gui Control (Uninstaller)
# =====================================================================================================================
# APIxMJ - Gui Control (Reinstaller)
# ---------------------------------------------------------------------------------------------------------------------
function mj_manager_menu_control_button_reinstaller(player: player, source: text, id: text):
	set {_check} to mj_editfiles_boolean("temp", "data.manager.addon.%{_source}%.%{_id}%.installed")
	if {_check} is true:
		set {_name} to mj_editfiles_gettext("manager", "data.button.reinstalled.name", {_player})
		set {_slot} to mj_editfiles_number("manager.data", "data.button.reinstalled.slot")
		set {_item.1} to mj_manager_item_description({_player}, milk bucket, "data.button.reinstalled")
		set {_item.2} to mj_manager_item_button({_player}, {_item.1}, "left_click", "manager", "data.open.reinstall")
		make a gui slot {_slot} of {_player} with {_item.2} named {_name} to run:
			mj_manager_menu_request({_player}, {_source}, {_id}, "reinstall")
			stop
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_manager_menu_control_reinstaller(player: player, source: text, id: text):
	set {_folder} to mj_editfiles("manager.data", "data.addon.%{_source}%.%{_id}%.folder")
	set {_list::*} to mj_manager_nodes("manager.data", "data.addon.%{_source}%.%{_id}%.skript")
	loop {_list::*}:
		set {_skript} to mj_editfiles("manager.data", "data.addon.%{_source}%.%{_id}%.skript.%loop-value%")
		delete file "plugins/Skript/scripts/%{_skript}%.sk"
	delete directory "plugins/APIxMJ/%{_folder}%"
	mj_manager_menu_control_installer({_player}, {_source}, {_id}, "reinstall")
	stop
# ---------------------------------------------------------------------------------------------------------------------
# APIxMJ - Gui Control (Reinstaller)
# =====================================================================================================================
# APIxMJ - Gui Control (Condition)
# ---------------------------------------------------------------------------------------------------------------------
function mj_manager_menu_control_button_condition(player: player, source: text, id: text, slot: number=-1):
	if {_source} isn't "main" or "vertebral_main":
		set {_check.1} to mj_editfiles("temp", "data.manager.addon.%{_source}%.%{_id}%.version")
		if {_check.1} isn't "0000.00.00.0000":
			set {_name.1} to mj_editfiles_gettext("manager", "data.addon.%{_source}%.%{_id}%.name", {_player})
			set {_check.2} to mj_editfiles_boolean("temp", "data.manager.addon.%{_source}%.%{_id}%.condition")
			if {_check.2} is true:
				set {_type} to "disable"
				set {_item.1} to red wool block
			else:
				set {_type} to "enable"
				set {_item.1} to lime wool block
			set {_name.2} to mj_editfiles("manager.data", "data.button.condition.%{_type}%.name")
			set {_name.3} to mj_editfiles_gettext("manager", {_name.2}, {_player}, {_name.1})
			if {_slot} is -1:
				set {_slot} to mj_editfiles_number("manager.data", "data.button.condition.%{_type}%.slot")
			set {_item.2} to mj_manager_item_description({_player}, {_item.1}, "data.button.condition.%{_type}%")
			set {_item.3} to mj_manager_item_button({_player}, {_item.2}, "left_click", "manager", "data.open.condition_%{_type}%")
			make a gui slot {_slot} of {_player} with {_item.3} named {_name.3} to run:
				if {_check.2} is true:
					mj_editfiles_boolean("temp", "data.manager.addon.%{_source}%.%{_id}%.condition", "modify", false)
					unload script file {_skript}
				else:
					mj_editfiles_boolean("temp", "data.manager.addon.%{_source}%.%{_id}%.condition", "modify", true)
					enable script file {_skript}
				set {_type.view} to mj_editfiles_gettext("manager", "data.type.%{_type}%", {_player})
				mj_manager_message({_player}, "manager", "data.prefix", "manager", "data.process.condition", {_type.view}, {_name.1})
				mj_manager_menu_control_button_condition({_player}, {_source}, {_id}, {_slot})
				stop
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_manager_menu_control_button_condition_list(player: player, source: text):
	if {_source} contain "condition":
		set {_slot} to 0
		set {_list.1::*} to mj_manager_nodes("temp", "data.manager.addon")
		loop {_list.1::*}:
			if loop-value-1 isn't "main" or "vertebral_main":
				set {_list.2::*} to mj_manager_nodes("temp", "data.manager.addon.%loop-value-1%")
				loop {_list.2::*}:
					set {_check} to mj_editfiles_boolean("temp", "data.manager.addon.%loop-value-1%.%loop-value-2%.installed")
					if {_check} is true:
						set {_list.3::*} to mj_manager_skript_list()
						set {_skript} to mj_editfiles("manager.data", "data.addon.%loop-value-1%.%loop-value-2%.skript.1")
						if {_list.3::*} contains "%{_skript}%.sk" or "-%{_skript}%.sk":
							mj_manager_menu_control_button_condition({_player}, loop-value-1, loop-value-2, {_slot})
							add 1 to {_slot}
	stop
# ---------------------------------------------------------------------------------------------------------------------
# APIxMJ - Gui Control (Condition)
# =====================================================================================================================
# APIxMJ - Gui Control (Help)
# ---------------------------------------------------------------------------------------------------------------------
function mj_manager_menu_control_button_help(player: player, source: text, id: text):
	set {_check} to mj_editfiles_boolean("temp", "data.manager.addon.%{_source}%.%{_id}%.installed")
	if {_check} is true:
		set {_name} to mj_editfiles_gettext("manager", "data.button.helper.name", {_player})
		set {_slot} to mj_editfiles_number("manager.data", "data.button.helper.slot")
		set {_item.1} to mj_manager_item_description({_player}, book, "data.button.helper")
		set {_item.2} to mj_manager_item_button({_player}, {_item.1}, "left_click", "manager", "data.open.helper")
		make a gui slot {_slot} of {_player} with {_item.2} named {_name} to run:
			mj_manager_help_menu_viewer({_player}, {_source}, {_id}, 1, true)
			stop
	stop
# ---------------------------------------------------------------------------------------------------------------------
# APIxMJ - Gui Control (Help)
# =====================================================================================================================
# APIxMJ - Function
# ---------------------------------------------------------------------------------------------------------------------
function mj_manager_nodes(source: text, find: text="data") :: objects:
	if {_source} contains "userdata.":
		set {_source} to mj_manager_userdata_profil({_source})
	loop yaml node keys "%{_find}%" from "mj.%{_source}%":
		add loop-node to {_list::*}
	replace all "%{_find}%." with "" in {_list::*}
	return {_list::*}
# ---------------------------------------------------------------------------------------------------------------------
function mj_manager_nodes_count(source: text, find: text="data") :: number:
	set {_count} to 0
	loop yaml node keys "%{_find}%" from "mj.%{_source}%":
		add 1 to {_count}
	return {_count}
# ---------------------------------------------------------------------------------------------------------------------
function mj_manager_item_convert(source: text, find: text, nbt: boolean=false) :: item:
	set {_item} to yaml value "%{_find}%" from "mj.%{_source}%"
	if {_item} isn't a item:
		set {_item} to {_item} parsed as item
	if {_nbt} is true:
		set {_item} to {_item} with no nbt
	if {_item} isn't set:
		set {_item} to air
	set {_find.2} to {_find}
	replace ".item" with "" in {_find.2}
	set {_model} to mj_editfiles_number({_source}, "%{_find.2}%.custom_data_model")
	if {_model} >= 1:
		add "{CustomModelData:%{_model}%}" to nbt of {_item}
	return {_item}
# ---------------------------------------------------------------------------------------------------------------------
function mj_manager_item_name(player: player, source: text, find: text, variante: text="", int.0: text="", int.1: text="") :: text:
	set {_value.1} to mj_editfiles({_source}, {_find})
	set {_list::*} to {_source} split at "."
	set {_value.2} to mj_editfiles_gettext({_list::1}, "%{_value.1}%%{_variante}%", {_player}, {_int.0}, {_int.1})
	return {_value.2}
# ---------------------------------------------------------------------------------------------------------------------
function mj_manager_item_description(player: player, item: item, source: text, file: text="manager") :: item:
	set {_lang} to mj_manager_userdata_language({_player})
	set {_count} to mj_manager_item_lore_count({_item})
	set {_data.1} to mj_editfiles_gettext("manager", "data.category.description")
	set line {_count} of lore of {_item} to "%{_data.1}%"
	add 2 to {_count}
	set {_list::*} to mj_manager_nodes("%{_file}%.language.%{_lang}%", "%{_source}%.lore")
	loop {_list::*}:
		set {_data.2} to mj_editfiles_gettext({_file}, "%{_source}%.lore.%loop-value%")
		set line {_count} of lore of {_item} to "%{_data.2}%"
		add 1 to {_count}
	return {_item}
# ---------------------------------------------------------------------------------------------------------------------
function mj_manager_item_lore(player: player, item: item, slot: number=1, source: text="manager", find: text="data", replace1: text="none", replace2: text="none") :: item:
	set {_text} to mj_editfiles_gettext({_source}, {_find}, {_player}, {_replace1}, {_replace2})
	set line {_slot} of lore of {_item} to {_text}
	return {_item}
# ---------------------------------------------------------------------------------------------------------------------
function mj_manager_item_lore_count(item: item) :: number:
	set {_count} to 1
	set {_list::*} to lore of {_item}
	loop {_list::*}:
		add 1 to {_count}
	add 1 to {_count}
	return {_count}
# ---------------------------------------------------------------------------------------------------------------------
function mj_manager_item_give(player: player, item: item):
	if {_player}'s inventory has space for {_item}:
		give {_item} to {_player}
	else:
		drop {_item} at {_player}
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_manager_item_button(player: player, item: item, type: text, source: text, find: text, space: boolean=false, int.0: text="", int.1: text="") :: item:
	set {_count} to 1
	set {_list::*} to lore of {_item}
	loop {_list::*}:
		add 1 to {_count}
	if {_space} isn't true:
		add 1 to {_count}
	set {_click} to mj_editfiles_gettext("manager", "data.type.%{_type}%", {_player})
	set {_lore} to mj_editfiles_gettext({_source}, {_find}, {_player}, {_int.0}, {_int.1})
	set line {_count} of lore of {_item} to "%{_click}% %{_lore}%"
	return {_item}
# ---------------------------------------------------------------------------------------------------------------------
function mj_manager_message(player: player, source.1: text, prefix.1: text, source.2: text, send.1: text, int.0: text="", int.1: text="", int.2: text="", int.3: text="", int.4: text=""):
	set {_lang} to mj_manager_userdata_language({_player})
	set {_prefix} to yaml value "%{_prefix.1}%" from "mj.%{_source.1}%.language.%{_lang}%"
	set {_send} to yaml value "%{_send.1}%" from "mj.%{_source.2}%.language.%{_lang}%"
	replace "$0" with {_int.0} in {_send}
	replace "$1" with {_int.1} in {_send}
	replace "$2" with {_int.2} in {_send}
	replace "$3" with {_int.3} in {_send}
	replace "$4" with {_int.4} in {_send}
	if {_prefix} isn't set:
		set {_prefix} to {_prefix.1}
	if {_send} isn't set:
		set {_send} to {_send.1}
	send formatted "%{_prefix}% %{_send}%" to {_player}
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_manager_message_simple(player: player, source.1: text, send.1: text, int.0: text="", int.1: text="", int.2: text="", int.3: text="", int.4: text=""):
	set {_lang} to mj_manager_userdata_language({_player})
	set {_send} to yaml value "%{_send.1}%" from "mj.%{_source.1}%.language.%{_lang}%"
	replace "$0" with {_int.0} in {_send}
	replace "$1" with {_int.1} in {_send}
	replace "$2" with {_int.2} in {_send}
	replace "$3" with {_int.3} in {_send}
	replace "$4" with {_int.4} in {_send}
	if {_send} isn't set:
		set {_send} to {_send.1}
	send formatted "%{_send}%" to {_player}
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_manager_permission(player: player, source: text="manager", prefix.1: text="data.prefix", int.0: text="*"):
	set {_lang} to mj_manager_userdata_language({_player})
	set {_prefix} to yaml value "%{_prefix.1}%" from "mj.%{_source}%.language.%{_lang}%"
	set {_send} to yaml value "data.argument.no_permission" from "mj.manager.language.%{_lang}%"
	if {_send} isn't set:
		set {_send} to "data.argument.no_permission"
	set {_check} to yaml value "data.show_permission" from "mj.manager.config"
	if {_check} is true:
		set {_send} to yaml value "data.argument.show_permission" from "mj.manager.language.%{_lang}%"
		replace "$0" with {_int.0} in {_send}
		if {_send} isn't set:
			set {_send} to "data.argument.show_permission"
	send formatted "%{_prefix}% %{_send}%" to {_player}
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_manager_lobby_return():
	set {_check} to mj_editfiles_boolean("manager.config", "data.bungeecord.condition")
	if {_check} is true:
		set {_server} to mj_editfiles("manager.config", "data.bungeecord.server")
		send all players to server "%{_server}%"
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_manager_skript_list() :: objects:
	set {_slash} to mj_editfiles("manager.config", "data.slash_option")
	loop files in dir "plugins%{_slash}%Skript%{_slash}%scripts":
		set {_value} to loop-value-1
		set {_list1::*} to {_value} split at "%{_slash}%"
		loop {_list1::*}:
			if loop-value-2 contains ".sk":
				add loop-value-2 to {_list2::*}
	#replace all ".sk" with "" in {_list2::*}
	return {_list2::*}
# ---------------------------------------------------------------------------------------------------------------------
function mj_manager_skript_start():
	set {_list.1::*} to mj_manager_nodes("manager.data", "data.addon")
	loop {_list.1::*}:
		set {_value.1} to loop-value-1
		if {_value.1} isn't "main":
			set {_list.2::*} to mj_manager_nodes("manager.data", "data.addon.%{_value.1}%")
			loop {_list.2::*}:
				set {_value.2} to loop-value-2
				set {_check} to mj_editfiles_boolean("temp", "data.manager.addon.%{_value.1}%.%{_value.2}%.condition")
				if {_check} is true:
					set {_list.3::*} to mj_manager_nodes("manager.data", "data.addon.%{_value.1}%.%{_value.2}%.skript")
					loop {_list.3::*}:
						set {_value.3} to loop-value-3
						set {_skript} to mj_editfiles("manager.data", "data.addon.%{_value.1}%.%{_value.2}%.skript.%{_value.3}%")
						enable script file {_skript}
						wait 4 seconds
	set {_prefix} to mj_editfiles_gettext("manager", "data.prefix")
	set {_send} to mj_editfiles_gettext("manager", "data.reload.success")
	broadcast "%{_prefix}% %{_send}%"
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_manager_file_reset(folder: text, file: text, language: boolean=false):
	set {_link} to mj_editfiles("github")
	if {_language} is true:
		delete file "plugins/APIxMJ/%{_folder}%/language/%{_file}%.yml"
		download file from "%{_link}%/main/%{_folder}%/language/%{_file}%.yml" to file "plugins/APIxMJ/%{_folder}%/language/%{_file}%.yml"
		delete file "plugins/APIxMJ/%{_folder}%/help/%{_file}%.yml"
		download file from "%{_link}%/main/%{_folder}%/help/%{_file}%.yml" to file "plugins/APIxMJ/%{_folder}%/help/%{_file}%.yml"
	else:
		delete file "plugins/APIxMJ/%{_folder}%/%{_file}%.yml"
		download file from "%{_link}%/main/%{_folder}%/%{_file}%.yml" to file "plugins/APIxMJ/%{_folder}%/%{_file}%.yml"
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_manager_userdata_profil(data: text="none", name: boolean=false) :: text:
	if {_data} contains "userdata.":
		set {_list::*} to mj_manager_skript_list()
		if {_list::*} contains "apixmj_core.sk":
			replace "userdata." with "" in {_data}
			set {_profil} to yaml value "data.%{_data}%.profil" from "mj.userdata"
			if {_name} is true:
				set {_result} to {_profil}
			else:
				set {_result} to "userdata.%{_data}%.%{_profil}%"
	return {_result}
# ---------------------------------------------------------------------------------------------------------------------
function mj_manager_userdata_language(player: offlineplayer="none") :: text:
	if {_player} is set:
		if {_player} isn't "none":
			set {_list::*} to mj_manager_skript_list()
			if {_list::*} contains "apixmj_core.sk":
				set {_profil} to mj_manager_userdata_profil("userdata.%{_player}'s uuid%", true)
				set {_result} to yaml value "data.language" from "mj.userdata.%{_player}'s uuid%.%{_profil}%"
	if {_result} isn't set:
		set {_result} to mj_editfiles("manager.config", "data.language.use")
	return {_result}
# ---------------------------------------------------------------------------------------------------------------------
# APIxMJ - Function
# =====================================================================================================================
# APIxMJ - Reload
# ---------------------------------------------------------------------------------------------------------------------
command /restart:
	executable by: player and console
	trigger:
		if sender is a player:
			if player isn't op:
				stop
		console command "/save-all"
		wait 5 seconds
		mj_manager_lobby_return()
		set {_check} to mj_editfiles_boolean("manager.config", "data.auto_whitelist")
		if {_check} is true:
			set whitelist to true
		restart server
		stop
# ---------------------------------------------------------------------------------------------------------------------
command /reload:
	executable by: player and console
	trigger:
		if sender is a player:
			if player isn't op:
				stop
		set {_prefix} to mj_editfiles_gettext("manager", "data.prefix")
		set {_send} to mj_editfiles_gettext("manager", "data.reload.prevent")
		broadcast "%{_prefix}% %{_send}%"
		console command "/save-all"
		set {_count} to 10
		loop 10 times:
			set {_send} to mj_editfiles_gettext("manager", "data.reload.timing")
			replace "$0" with "%{_count}%" in {_send}
			broadcast "%{_prefix}% %{_send}%"
			wait 1 second
			remove 1 from {_count}
			if {_count} is 3:
				mj_manager_lobby_return()
		set {_check} to mj_editfiles_boolean("manager.config", "data.auto_whitelist")
		if {_check} is true:
			set whitelist to true
		reload server
		stop
# ---------------------------------------------------------------------------------------------------------------------
on skript start:
	wait 1 second
	mj_manager_skript_start()
	set {_check} to mj_editfiles_boolean("manager.config", "data.auto_whitelist")
	if {_check} is true:
		set whitelist to false
	stop
# ---------------------------------------------------------------------------------------------------------------------
on skript stop:
	set {_check} to mj_editfiles_boolean("manager.config", "data.auto_whitelist")
	if {_check} is true:
		set whitelist to true
	stop
# ---------------------------------------------------------------------------------------------------------------------
# APIxMJ - Reload
# =====================================================================================================================
# APIxMJ - Help
# ---------------------------------------------------------------------------------------------------------------------
command /help [<text>]:
	aliases: aide
	executable by: player
	trigger:
		if arg-1 is set:
			mj_manager_message(player, "manager", "data.help.request.prefix", "manager", "data.help.request.successful", arg-1)
			loop all players:
				set {_prefix} to mj_editfiles_gettext("manager", "data.help.request.prefix", loop-player)
				set {_button} to mj_editfiles_gettext("manager", "data.help.request.button", loop-player)
				set {_sender} to mj_editfiles_gettext("manager", "data.help.request.sender", loop-player, "%player%", arg-1)
				if loop-player has permission "*" or "mj.*" or "mj.request.*" or "mj.request":
					send formatted "%{_prefix}% <sgt:/answer %player% >%{_button}%<reset> %{_sender}%" to loop-player
				else if loop-player is op:
					send formatted "%{_prefix}% <sgt:/answer %player% >%{_button}%<reset> %{_sender}%" to loop-player
			wait 1 second
			set {_lang} to mj_manager_userdata_language({_player})
			set {_list::*} to mj_manager_nodes("manager.language.%{_lang}%", "data.help.request.prevention")
			loop {_list::*}:
				mj_manager_message(player, "manager", "data.help.request.prefix", "manager", "data.help.request.prevention.%loop-value%")
		else:
			mj_manager_help_menu_index(player)
		stop
# ---------------------------------------------------------------------------------------------------------------------
on tab complete of "/help" or "/aide":
	set {_text} to mj_editfiles_gettext("manager", "data.help.request.question", player)
	set tab completions for position 1 to {_text}
	stop
# ---------------------------------------------------------------------------------------------------------------------
command /answer [<text>] [<text>]:
	aliases: question
	executable by: player
	trigger:
		if player has permission "*" or "mj.*" or "mj.answer.*" or "mj.answer":
			if arg-1 is set:
				set {_player} to arg-1 parsed as offlineplayer
				if {_player} is online:
					if arg-2 is set:
						mj_manager_message(player, "manager", "data.help.request.prefix", "manager", "data.help.request.send", "%{_player}%", arg-2)
						mj_manager_message({_player}, "manager", "data.help.request.prefix", "manager", "data.help.request.received", "%player%", arg-2)
						loop all players:
							if loop-player isn't player:
								if loop-player has permission "*" or "mj.*" or "mj.request.*" or "mj.request":
									mj_manager_message(loop-player, "manager", "data.help.request.prefix", "manager", "data.help.request.viewer", "%player%", "%{_player}%", arg-2)
								else if loop-player is op:
									mj_manager_message(loop-player, "manager", "data.help.request.prefix", "manager", "data.help.request.viewer", "%player%", "%{_player}%", arg-2)
					else:			
						mj_manager_message(player, "manager", "data.help.request.prefix", "manager", "data.argument.text")
			else:
				mj_manager_message(player, "manager", "data.help.request.prefix", "manager", "data.argument.player")
		else:
			mj_manager_permission(player, "manager", "data.help.request.prefix", "mj.answer")
		stop
# ---------------------------------------------------------------------------------------------------------------------
on tab complete of "/answer" or "/question":
	set {_text} to mj_editfiles_gettext("manager", "data.help.request.answer", player)
	set tab completions for position 1 to all players
	set tab completions for position 2 to {_text}
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_manager_help(player: player, id: text):
	set {_lang} to mj_manager_userdata_language({_player})
	set {_name} to mj_editfiles("manager.help.%{_lang}%", "data.%{_id}%.name")
	if {_name} is set:
		set {_border} to mj_editfiles_gettext("manager", "data.help.border", {_player}, {_name})
		send "%{_border}%" to {_player}
		mj_manager_message_simple({_player}, "manager", "data.help.description")
		set {_list.1::*} to mj_manager_nodes("manager.help.%{_lang}%", "data.%{_id}%.description")
		loop {_list.1::*}:
			set {_send} to mj_editfiles("manager.help.%{_lang}%", "data.%{_id}%.description.%loop-value%")
			send "%{_send}%" to {_player}
		send "&0" to {_player}
		mj_manager_message_simple({_player}, "manager", "data.help.info")
		set {_list.2::*} to mj_manager_nodes("manager.help.%{_lang}%", "data.%{_id}%.info")
		loop {_list.2::*}:
			set {_send} to mj_editfiles("manager.help.%{_lang}%", "data.%{_id}%.info.%loop-value%")
			send "%{_send}%" to {_player}
		send "%{_border}%" to {_player}
	else:
		mj_manager_message({_player}, "manager", "data.prefix", "manager", "data.help.argument")
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_manager_help_menu_return(player: player, type: text, slot: number=0, source: text="none", id: text="none", manager: boolean=false):
	set {_return} to mj_editfiles_gettext("manager", "data.button.return", {_player})
	make a gui slot {_slot} of {_player} with barrier named {_return} to run:
		if {_manager} is true:
			mj_manager_menu_control({_player}, {_source}, {_id})
		else:
			if {_type} is "back":
				set {_type} to mj_editfiles_boolean("manager.config", "data.normal_help_menu")
				if {_type} is true:
					mj_manager_help_menu_addon({_player}, {_source})
				else:
					mj_manager_help_menu_index({_player})
			else:
				mj_manager_help_menu_index({_player})
		stop
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_manager_help_menu_index(player: player):
	set {_title} to mj_editfiles_gettext("manager", "data.help.menu.main", {_player})
	set {_item} to mj_editfiles("manager.config", "data.gui_background.item")
	mj_manager_menu_gui_generator({_player}, 6, {_title}, {_item})
	set {_type} to mj_editfiles_boolean("manager.config", "data.normal_help_menu")
	if {_type} is true:
		mj_manager_help_menu_index_button({_player})
	else:
		mj_manager_help_menu_addon_button_lite({_player})
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_manager_help_menu_index_button(player: player):
	set {_slot} to 10
	set {_list.1::*} to mj_manager_nodes("manager.data", "data.addon")
	loop {_list.1::*}:
		set {_value.1} to loop-value-1
		set {_list.2::*} to mj_manager_nodes("manager.data", "data.addon.%{_value.1}%")
		loop {_list.2::*}:
			set {_value.2} to loop-value-2
			set {_check} to mj_editfiles_boolean("temp", "data.manager.addon.%{_value.1}%.%{_value.2}%.installed")
			if {_check} is true:
				set {_lang} to mj_manager_userdata_language({_player})
				set {_data} to mj_editfiles_stock("%{_value.2}%.help.%{_lang}%")
				if {_data} is set:
					set {_name.1} to mj_editfiles("manager.data", "data.index.%{_value.1}%.name")
					set {_name.2} to mj_editfiles_gettext("manager", {_name.1}, {_player})
					if {_value.1} is "main":
						set {_title} to mj_editfiles_gettext("manager", "data.help.button.manager", {_player})
					else:
						set {_index} to mj_editfiles("manager.data", "data.button.help.index.name")
						set {_title} to mj_editfiles_gettext("manager", {_index}, {_player}, {_name.2})
					set {_item} to mj_manager_item_convert("manager.data", "data.button.help.index.item")
					make a gui slot {_slot} of {_player} with {_item} named {_title} to run:
						mj_manager_help_menu_addon({_player}, {_value.1})
						stop
					add 1 to {_slot}
					if {_slot} is 17 or 26 or 35:
						add 2 to {_slot}
					exit loop
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_manager_help_menu_addon(player: player, id: text="main"):
	if {_id} is "main":
		set {_title} to mj_editfiles_gettext("manager", "data.help.menu.manager", {_player})
	else:
		set {_name.1} to mj_editfiles("manager.data", "data.index.%{_id}%.name")
		set {_name.2} to mj_editfiles_gettext("manager", {_name.1}, {_player})
		set {_title} to mj_editfiles_gettext("manager", "data.help.menu.name", {_player}, {_name.2})
	set {_item} to mj_editfiles("manager.config", "data.gui_background.item")
	mj_manager_menu_gui_generator({_player}, 6, {_title}, {_item})
	mj_manager_help_menu_addon_button({_player}, {_id})
	mj_manager_help_menu_return({_player}, {_id}, 49)
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_manager_help_menu_addon_button(player: player, id: text="main"):
	set {_slot} to 10
	set {_list::*} to mj_manager_nodes("manager.data", "data.addon.%{_id}%")
	loop {_list::*}:
		set {_value} to loop-value
		set {_check} to mj_editfiles_boolean("temp", "data.manager.addon.%{_id}%.%{_value}%.installed")
		if {_check} is true:
			set {_name.1} to mj_editfiles("manager.data", "data.addon.%{_id}%.%{_value}%.name")
			set {_name.2} to mj_editfiles_gettext("manager", {_name.1}, {_player})
			set {_title} to mj_editfiles_gettext("manager", "data.help.button.addon", {_player}, {_name.2})
			set {_item} to mj_manager_item_convert("manager.data", "data.button.help.addon.item")
			make a gui slot {_slot} of {_player} with {_item} named {_title} to run:
				mj_manager_help_menu_viewer({_player}, {_id}, {_value})
				stop
			add 1 to {_slot}
			if {_slot} is 17 or 26 or 35:
				add 2 to {_slot}
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_manager_help_menu_addon_button_lite(player: player):
	set {_slot} to 10
	set {_list.1::*} to mj_manager_nodes("manager.data", "data.addon")
	loop {_list.1::*}:
		set {_id} to loop-value-1
		set {_list.2::*} to mj_manager_nodes("manager.data", "data.addon.%{_id}%")
		loop {_list.2::*}:
			set {_value} to loop-value-2
			set {_check} to mj_editfiles_boolean("temp", "data.manager.addon.%{_id}%.%{_value}%.installed")
			if {_check} is true:
				set {_lang} to mj_manager_userdata_language({_player})
				set {_data} to mj_editfiles_stock("%{_value}%.help.%{_lang}%")
				if {_data} is set:
					set {_name.1} to mj_editfiles("manager.data", "data.addon.%{_id}%.%{_value}%.name")
					set {_name.2} to mj_editfiles_gettext("manager", {_name.1}, {_player})
					set {_title} to mj_editfiles_gettext("manager", "data.help.button.addon", {_player}, {_name.2})
					set {_item} to mj_manager_item_convert("manager.data", "data.button.help.addon.item")
					make a gui slot {_slot} of {_player} with {_item} named {_title} to run:
						mj_manager_help_menu_viewer({_player}, {_id}, {_value})
						stop
					add 1 to {_slot}
					if {_slot} is 17 or 26 or 35:
						add 2 to {_slot}
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_manager_help_menu_viewer(player: player, source: text, id: text, page: number=1, manager: boolean=false):
	set {_name.1} to mj_editfiles("manager.data", "data.addon.%{_source}%.%{_id}%.name")
	set {_name.2} to mj_editfiles_gettext("manager", "%{_name.1}%_lite", {_player})
	set {_title} to mj_editfiles_gettext("manager", "data.help.button.addon", {_player}, {_name.2})
	if length of {_name} >= 16:
		set {_name.2} to mj_editfiles_gettext("manager", "%{_name.0}%_lite", {_player})
		set {_title} to mj_editfiles_gettext("manager", "data.help.button.addon", {_player}, {_name.2})
	set {_item} to mj_editfiles("manager.config", "data.gui_background.item")
	mj_manager_menu_gui_generator({_player}, 6, {_title}, {_item})
	mj_manager_help_menu_viewer_button({_player}, {_source}, {_id}, {_page}, {_manager})
	mj_manager_help_menu_return({_player}, "back", 49, {_source}, {_id}, {_manager})
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_manager_help_menu_viewer_button(player: player, source: text, id: text, page.1: number=1, manager: boolean=false):
	set {_slot} to 0
	set {_lang} to mj_manager_userdata_language({_player})
	set {_list.1::*} to mj_manager_nodes("%{_id}%.help.%{_lang}%")
	loop {_list.1::*}:
		set {_valid} to false
		set {_value} to loop-value-1
		set {_type} to mj_editfiles("%{_id}%.help.%{_lang}%", "data.%{_value}%.type")
		set {_name} to mj_editfiles("%{_id}%.help.%{_lang}%", "data.%{_value}%.name")
		set {_list.2::*} to mj_editfiles_list("%{_id}%.help.%{_lang}%", "data.%{_value}%.permission")
		loop {_list.2::*}:
			set {_perm} to loop-value-2
			if {_player} has permission {_perm}:
				set {_valid} to true
				exit loop
			else if {_perm} is "none":
				set {_valid} to true
				exit loop
		set {_page.2} to mj_editfiles_number("%{_id}%.help.%{_lang}%", "data.%{_value}%.page")
		if {_page.1} isn't 1:
			if {_page.2} >= {_page.1}:
				set {_valid} to true
			else:
				set {_valid} to false
		if {_valid} is true:
			set {_name.1} to mj_editfiles("manager.data", "data.button.help.%{_type}%.name")
			set {_name.2} to mj_editfiles_gettext("manager", {_name.1}, {_player}, {_name})
			set {_item} to mj_manager_item_convert("manager.data", "data.button.help.%{_type}%.item")
			set {_item} to mj_manager_help_menu_viewer_button_lore({_player}, {_item}, {_id}, {_value}, "description")
			set {_item} to mj_manager_help_menu_viewer_button_lore({_player}, {_item}, {_id}, {_value}, "info")
			make a gui slot {_slot} of {_player} with {_item} named {_name.2} to run:
				stop
			add 1 to {_slot}
			if {_slot} is 45:
				mj_manager_help_menu_viewer_button_page({_player}, {_source}, {_id}, {_page.1}, {_manager})
				exit loop
	if {_page.1} isn't 1:
		mj_manager_help_menu_viewer_button_page({_player}, {_source}, {_id}, {_page.1}, {_manager})
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_manager_help_menu_viewer_button_lore(player: player, item: item, id: text, value: text, type: text) :: item:
	set {_lang} to mj_manager_userdata_language({_player})
	set {_count} to mj_manager_item_lore_count({_item})
	set {_data.1} to mj_editfiles_gettext("manager", "data.category.%{_type}%")
	set line {_count} of lore of {_item} to "%{_data.1}%"
	add 2 to {_count}
	set {_list::*} to mj_manager_nodes("%{_id}%.help.%{_lang}%", "data.%{_value}%.%{_type}%")
	loop {_list::*}:
		set {_data.2} to mj_editfiles("%{_id}%.help.%{_lang}%", "data.%{_value}%.%{_type}%.%loop-value%")
		set line {_count} of lore of {_item} to "%{_data.2}%"
		add 1 to {_count}
	return {_item}
# ---------------------------------------------------------------------------------------------------------------------
function mj_manager_help_menu_viewer_button_page(player: player, source: text, id: text, page: number=1, manager: boolean=false):
	if {_page} isn't 1:
		set {_name} to mj_editfiles_gettext("manager", "data.type.previous", {_player})
		make a gui slot 48 of {_player} with paper named {_name} to run:
			mj_manager_help_menu_viewer({_player}, {_source}, {_id}, 1, {_manager})
			stop
	set {_next} to {_page} + 1
	if {_page} >= 1:
		set {_name} to mj_editfiles_gettext("manager", "data.type.next", {_player})
		make a gui slot 50 of {_player} with paper named {_name} to run:
			mj_manager_help_menu_viewer({_player}, {_source}, {_id}, {_next}, {_manager})
			stop
	stop
# ---------------------------------------------------------------------------------------------------------------------
# APIxMJ - Help
# =====================================================================================================================
# APIxMJ - Rules
# ---------------------------------------------------------------------------------------------------------------------
command /rules:
	aliases: rule, règle, règlement
	executable by: player
	trigger:
		mj_manager_rules_menu_viewer(player)
		stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_manager_rules_menu_viewer(player: player, index: text="none"):
	set {_title} to mj_editfiles_gettext("manager", "data.menu.rules", {_player})
	set {_item} to mj_editfiles("manager.config", "data.gui_background.item")
	mj_manager_menu_gui_generator({_player}, 6, {_title}, {_item})
	wait 2 ticks
	set {_lang} to mj_manager_userdata_language({_player})
	set {_list::*} to mj_manager_nodes("custom.rules.%{_lang}%", "data.index")
	loop {_list::*}:
		mj_manager_rules_menu_viewer_index({_player}, loop-value)
	set {_value} to {_index}
	if {_index} is "none":
		set {_value} to "%{_list::1}%"
	mj_manager_rules_menu_viewer_data({_player}, {_value})
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_manager_rules_menu_viewer_index(player: player, index: text):
	set {_lang} to mj_manager_userdata_language({_player})
	set {_name} to mj_editfiles("custom.rules.%{_lang}%", "data.index.%{_index}%.name")
	set {_slot} to mj_editfiles_number("custom.rules.%{_lang}%", "data.index.%{_index}%.slot")
	set {_item.1} to mj_manager_item_convert("custom.rules.%{_lang}%", "data.index.%{_index}%.item")
	set {_item.2} to mj_manager_rules_menu_viewer_index_lore({_player}, {_item.1}, {_index})
	make a gui slot {_slot} of {_player} with {_item.2} named {_name} to run:
		mj_manager_rules_menu_viewer({_player}, {_index})
		stop
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_manager_rules_menu_viewer_index_lore(player: player, item: item, value: text) :: item:
	set {_lang} to mj_manager_userdata_language({_player})
	set {_count} to mj_manager_item_lore_count({_item})
	set {_data.1} to mj_editfiles_gettext("manager", "data.category.description", {_player})
	set line {_count} of lore of {_item} to "%{_data.1}%"
	add 2 to {_count}
	set {_list::*} to mj_manager_nodes("custom.rules.%{_lang}%", "data.index.%{_value}%.description")
	loop {_list::*}:
		set {_data.2} to mj_editfiles("custom.rules.%{_lang}%", "data.index.%{_value}%.description.%loop-value%")
		set line {_count} of lore of {_item} to "%{_data.2}%"
		add 1 to {_count}
	return {_item}
# ---------------------------------------------------------------------------------------------------------------------
function mj_manager_rules_menu_viewer_data(player: player, index: text):
	set {_slot} to 9
	set {_lang} to mj_manager_userdata_language({_player})
	set {_list::*} to mj_manager_nodes("custom.rules.%{_lang}%", "data.%{_index}%")
	loop {_list::*}:
		set {_value} to loop-value
		set {_name} to mj_editfiles("custom.rules.%{_lang}%", "data.%{_index}%.%{_value}%.name")
		set {_item.1} to mj_manager_item_convert("custom.rules.%{_lang}%", "data.%{_index}%.%{_value}%.item")
		set {_item.2} to mj_manager_rules_menu_viewer_data_lore({_player}, {_item.1}, {_index}, {_value})
		make a gui slot {_slot} of {_player} with {_item.2} named {_name} to run:
			stop
		add 1 to {_slot}
		if {_slot} is 45:
			exit loop
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_manager_rules_menu_viewer_data_lore(player: player, item: item, index: text, value: text) :: item:
	set {_lang} to mj_manager_userdata_language({_player})
	set {_count} to mj_manager_item_lore_count({_item})
	set {_data.1} to mj_editfiles_gettext("manager", "data.category.description", {_player})
	set line {_count} of lore of {_item} to "%{_data.1}%"
	add 2 to {_count}
	set {_list::*} to mj_manager_nodes("custom.rules.%{_lang}%", "data.%{_index}%.%{_value}%.description")
	loop {_list::*}:
		set {_data.2} to mj_editfiles("custom.rules.%{_lang}%", "data.%{_index}%.%{_value}%.description.%loop-value%")
		set line {_count} of lore of {_item} to "%{_data.2}%"
		add 1 to {_count}
	return {_item}
# ---------------------------------------------------------------------------------------------------------------------
# APIxMJ - Rules
# =====================================================================================================================
# APIxMJ - Backup
# ---------------------------------------------------------------------------------------------------------------------
every 1 hour:
	set {_check.1} to mj_editfiles_boolean("manager.config", "data.backup")
	if {_check.1} is true:
		set {_date} to now formatted with "yyyy-MM-dd"
		set {_time} to now formatted with "HH-mm"
		create script "plugins/APIxMJ/backup/%{_date}%/%{_time}%/APIxMJ/%{_date}%_%{_time}%.log"
		copy dir "plugins/Skript/scripts" to "plugins/APIxMJ/backup/%{_date}%/%{_time}%"
		wait 2 ticks
		set {_list.1::*} to mj_manager_nodes("manager.data", "data.addon")
		loop {_list.1::*}:
			set {_value.1} to loop-value-1
			set {_list.2::*} to mj_manager_nodes("manager.data", "data.addon.%{_value.1}%")
			loop {_list.2::*}:
				set {_value.2} to loop-value-2
				set {_check.2} to mj_editfiles_boolean("temp", "data.manager.addon.%{_value.1}%.%{_value.2}%.installed")
				if {_check.2} is true:
					set {_folder} to mj_editfiles("manager.data", "data.addon.%{_value.1}%.%{_value.2}%.folder")
					copy dir "plugins/APIxMJ/%{_folder}%" to "plugins/APIxMJ/backup/%{_date}%/%{_time}%/APIxMJ/"
		#zip file "plugins/APIxMJ/backup/%{_date}%/%{_time}%/*" to zip "plugins/APIxMJ/backup/%{_date}%.zip"
		#delete dir "plugins/APIxMJ/backup/APIxMJ/%{_date}%/"
	stop
# ---------------------------------------------------------------------------------------------------------------------
# APIxMJ - Backup
# =====================================================================================================================