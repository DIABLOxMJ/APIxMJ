# =====================================================================================================================
# APIxMJ - Files
# ---------------------------------------------------------------------------------------------------------------------
function mj_files_expbank():
	set {_folder} to mj_editfiles("manager.data", "data.addon.vertebral_extension.expbank.folder")
	load yaml "plugins/APIxMJ/%{_folder}%/config.yml" as "mj.expbank.config"
	set {_list::*} to mj_editfiles_list("manager.config", "data.language.list")
	if {_list::*} is set:
		loop {_list::*}:
			load yaml "plugins/APIxMJ/%{_folder}%/language/%loop-value%.yml" as "mj.expbank.language.%loop-value%"
			load yaml "plugins/APIxMJ/%{_folder}%/help/%loop-value%.yml" as "mj.expbank.help.%loop-value%"
	loop all players:
		mj_expbank_playerdata(loop-player)
	stop
# ---------------------------------------------------------------------------------------------------------------------
on load:
	set {_list::*} to mj_manager_skript_list()
	if {_list::*} contains "apixmj_manager.sk" and "apixmj.sk" and "apixmj_essentials.sk":
		send "[APIxMJ] Loading expbank..." to console
		mj_files_expbank()
	else:
		broadcast "[APIxMJ] Script loading cancel It requires (apixmj_manager.sk, apixmj.sk and apixmj_essentials.sk)"
		unload script file "apixmj_expbank.sk"
	stop
# ---------------------------------------------------------------------------------------------------------------------
on skript stop:
	rename file "plugins/Skript/scripts/apixmj_expbank.sk" to "-apixmj_expbank.sk"
	send "[APIxMJ] Unloading expbank.."
	stop
# ---------------------------------------------------------------------------------------------------------------------
on join:
	if event-entity is player:
		mj_expbank_playerdata(player)
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_expbank_playerdata(player: offlineplayer):
	wait 214 ticks
	if {_player} is online:
		set {_profil} to yaml value "data.%{_player}'s uuid%.profil" from "mj.userdata"
		set {_check1} to yaml value "data.%{_player}'s uuid%.source.expbank" from "mj.userdata"
		if {_check1} isn't set:
			set yaml value "data.%{_player}'s uuid%.source.expbank" from "mj.userdata" to "none"
			save yaml "mj.userdata"
			mj_core_logger(1, "%{_player}% expbank data file was generated..")
		set {_check2} to yaml value "data.source.expbank" from "mj.userdata.%{_player}'s uuid%.%{_profil}%"
		if {_check2} isn't set:
			set yaml value "data.source.expbank" from "mj.userdata.%{_player}'s uuid%.%{_profil}%" to "none"
			save yaml "mj.userdata.%{_player}'s uuid%.%{_profil}%"
			mj_core_logger(1, "%{_player}% expbank data was generated..")
	stop
# ---------------------------------------------------------------------------------------------------------------------
# APIxMJ - Files
# =====================================================================================================================
# APIxMJ - ExpBank Sign (Create)
# ---------------------------------------------------------------------------------------------------------------------
on sign change:
	set {_list::*} to mj_editfiles_list("expbank.config", "data.sign.create")
	if {_list::*} contains line 1 of event-block:
		mj_expbank_sign_create(player, event-location)
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_expbank_sign_create(player: player, loc: location):
	wait 1 tick
	set {_block} to block at {_loc}
	set {_confirm} to true
	set {_check} to mj_editfiles_boolean("expbank.config", "data.sign.money.condition")
	if {_check} is true:
		set {_price} to mj_editfiles_number("expbank.config", "data.sign.money.price")
		set {_money} to mj_essentials_money_modify({_player})
		if {_money} >= {_price}:
			set {_confirm} to true
		else:
			set {_confirm} to false
			mj_manager_message({_player}, "expbank", "data.prefix", "expbank", "data.deposit_failed")
	if {_confirm} is true:
		set {_name} to mj_editfiles("expbank.config", "data.sign.name")
		set line 1 of {_block} to {_name}
		set line 2 of {_block} to "%{_player}%"
		set line 3 of {_block} to "0"
		if {_check} is true:
			mj_essentials_money_system({_player}, {_price}, false, "create sign expbank")
			set {_view} to mj_core_format_money(false, {_price})
			mj_manager_message({_player}, "expbank", "data.prefix", "expbank", "data.create_success_with_money", {_view})
		else:
			mj_manager_message({_player}, "expbank", "data.prefix", "expbank", "data.create_success")
	else:
		mj_manager_message({_player}, "expbank", "data.prefix", "expbank", "data.create_failed")
	stop
# ---------------------------------------------------------------------------------------------------------------------
# APIxMJ - ExpBank Sign (Create)
# =====================================================================================================================
# APIxMJ - ExpBank Sign (Deposit)
# ---------------------------------------------------------------------------------------------------------------------
on rightclick:
	if event-block is sign:
		set {_name} to mj_editfiles("expbank.config", "data.sign.name")
		if line 1 of event-block is {_name}:
			if player is line 2 of event-block:
				set {_type} to mj_editfiles_boolean("expbank.config", "data.sign.type")
				if {_type} is true:
					mj_expbank_sign_deposit(player, "level", event-location)
				else:
					mj_expbank_sign_deposit(player, "point", event-location)
			else:
				if player's gamemode isn't creative:
					cancel event
					mj_manager_message(player, "expbank", "data.prefix", "expbank", "data.no_owner")
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_expbank_sign_deposit(player: player, type: text="level", loc: location):
	set {_block} to block at {_loc}
	set {_confirm} to true
	set {_check} to mj_editfiles_boolean("expbank.config", "data.sign.money.condition")
	if {_check} is true:
		set {_price} to mj_editfiles_number("expbank.config", "data.sign.money.deposit")
		set {_money} to mj_essentials_money_modify({_player})
		if {_money} >= {_price}:
			set {_confirm} to true
		else:
			set {_confirm} to false
			mj_manager_message({_player}, "expbank", "data.prefix", "expbank", "data.deposit_failed")
	if {_confirm} is true:
		set {_xp.1} to mj_editfiles_number("expbank.config", "data.sign.quantity.%{_type}%")
		if {_type} is "level":
			set {_xp.2} to {_player}'s level
		else:
			set {_xp.2} to {_player}'s xp
		if {_xp.2} >= {_xp.1}:
			if {_type} is "level":
				remove {_xp.1} from {_player}'s level
			else:
				remove {_xp.1} from {_player}'s xp
			set {_xp.3} to line 3 of {_block} parsed as number
			add {_xp.1} to {_xp.3}
			set line 3 of {_block} to "%{_xp.3}%"
			if {_check} is true:
				mj_essentials_money_system({_player}, {_price}, false, "deposit sign expbank")
		else:
			mj_manager_message({_player}, "expbank", "data.prefix", "expbank", "data.deposit_failed")
	stop
# ---------------------------------------------------------------------------------------------------------------------
# APIxMJ - ExpBank Sign (Deposit)
# =====================================================================================================================
# APIxMJ - ExpBank Sign (Withdraw)
# ---------------------------------------------------------------------------------------------------------------------
on leftclick:
	if event-block is sign:
		set {_name} to mj_editfiles("expbank.config", "data.sign.name")
		if line 1 of event-block is {_name}:
			if player is line 2 of event-block:
				set {_type} to mj_editfiles_boolean("expbank.config", "data.sign.type")
				if {_type} is true:
					mj_expbank_sign_withdraw(player, "level", event-location)
				else:
					mj_expbank_sign_withdraw(player, "point", event-location)
			else:
				mj_manager_message(player, "expbank", "data.prefix", "expbank", "data.no_owner")
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_expbank_sign_withdraw(player: player, type: text="level", loc: location):
	set {_block} to block at {_loc}
	set {_confirm} to true
	set {_check} to mj_editfiles_boolean("expbank.config", "data.sign.money.condition")
	if {_check} is true:
		set {_price} to mj_editfiles_number("expbank.config", "data.sign.money.withdraw")
		set {_money} to mj_essentials_money_modify({_player})
		if {_money} >= {_price}:
			set {_confirm} to true
		else:
			set {_confirm} to false
			mj_manager_message({_player}, "expbank", "data.prefix", "expbank", "data.withdraw_failed")
	if {_confirm} is true:
		set {_xp.1} to mj_editfiles_number("expbank.config", "data.sign.quantity.%{_type}%")
		set {_xp.2} to line 3 of {_block} parsed as number
		if {_xp.2} >= {_xp.1}:
			if {_type} is "level":
				add {_xp.1} to {_player}'s level
			else:
				add {_xp.1} to {_player}'s xp
			remove {_xp.1} from {_xp.2}
			set line 3 of {_block} to "%{_xp.2}%"
			if {_check} is true:
				mj_essentials_money_system({_player}, {_price}, false, "withdraw sign expbank")
		else:
			mj_manager_message({_player}, "expbank", "data.prefix", "expbank", "data.withdraw_failed")
	stop
# ---------------------------------------------------------------------------------------------------------------------
# APIxMJ - ExpBank Sign (Withdraw)
# =====================================================================================================================
# APIxMJ - ExpBank Sign (Break)
# ---------------------------------------------------------------------------------------------------------------------
on break:
	set {_name} to mj_editfiles("expbank.config", "data.sign.name")
	if type of event-block is sign:
		if line 1 of event-block is {_name}:
			if line 3 of event-block isn't "0":
				set {_owner} to line 2 of event-block
				if {_owner} isn't empty:
					if {_owner} is "%player%":
						mj_expbank_drop_sign(player, event-location)
					else:
						if player's gamemode isn't creative:
							cancel event
							mj_manager_message(player, "expbank", "data.prefix", "expbank", "data.no_owner")
				else:
					mj_expbank_drop_sign(player, event-location)
	else:
		set {_x.1} to event-block's x-coordinate
		set {_y.1} to event-block's y-coordinate
		set {_z.1} to event-block's z-coordinate
		set {_loc.1} to location({_x.1}, {_y.1}, {_z.1}, ("%event-block's world%" parsed as world))
		set {_loc.2} to location({_x.1} + 1, {_y.1}, {_z.1}, ("%event-block's world%" parsed as world))
		set {_loc.3} to location({_x.1}, {_y.1}, {_z.1} + 1, ("%event-block's world%" parsed as world))
		set {_loc.4} to location({_x.1} - 1, {_y.1}, {_z.1}, ("%event-block's world%" parsed as world))
		set {_loc.5} to location({_x.1}, {_y.1}, {_z.1} - 1, ("%event-block's world%" parsed as world))
		set {_loc.6} to location({_x.1}, {_y.1} + 1, {_z.1}, ("%event-block's world%" parsed as world))
		if type of block at {_loc.2} is sign:
			if "%type of block at {_loc.2}%" contains "eastward":
				if "%type of block at {_loc.2}%" contains "wall sign":
					if line 1 of block at {_loc.2} is {_name}:
						if line 3 of block at {_loc.2} isn't "0":
							set {_owner} to line 2 of block at {_loc.2}
							if {_owner} isn't empty:
								if {_owner} is "%player%":
									mj_expbank_drop_sign(player, {_loc.2})
								else:
									if player's gamemode isn't creative:
										cancel event
										mj_manager_message(player, "expbank", "data.prefix", "expbank", "data.no_owner")
							else:
								mj_expbank_drop_sign(player, {_loc.2})
		if type of block at {_loc.3} is sign:
			if "%type of block at {_loc.3}%" contains "southward":
				if "%type of block at {_loc.3}%" contains "wall sign":
					if line 1 of block at {_loc.3} is {_name}:
						if line 3 of block at {_loc.3} isn't "0":
							set {_owner} to line 2 of block at {_loc.3}
							if {_owner} isn't empty:
								if {_owner} is "%player%":
									mj_expbank_drop_sign(player, {_loc.3})
								else:
									if player's gamemode isn't creative:
										cancel event
										mj_manager_message(player, "expbank", "data.prefix", "expbank", "data.no_owner")
							else:
								mj_expbank_drop_sign(player, {_loc.3})
		if type of block at {_loc.4} is sign:
			if "%type of block at {_loc.4}%" contains "westward":
				if "%type of block at {_loc.4}%" contains "wall sign":
					if line 1 of block at {_loc.4} is {_name}:
						if line 3 of block at {_loc.4} isn't "0":
							set {_owner} to line 2 of block at {_loc.4}
							if {_owner} isn't empty:
								if {_owner} is "%player%":
									mj_expbank_drop_sign(player, {_loc.4})
								else:
									if player's gamemode isn't creative:
										cancel event
										mj_manager_message(player, "expbank", "data.prefix", "expbank", "data.no_owner")
							else:
								mj_expbank_drop_sign(player, {_loc.4})
		if type of block at {_loc.5} is sign:
			if "%type of block at {_loc.5}%" contains "wall sign":
				if "%type of block at {_loc.5}%" contains "eastward" or "southward" or "westward":
					stop
				else:
					if line 1 of block at {_loc.5} is {_name}:
						if line 3 of block at {_loc.5} isn't "0":
							set {_owner} to line 2 of block at {_loc.5}
							if {_owner} isn't empty:
								if {_owner} is "%player%":
									mj_expbank_drop_sign(player, {_loc.5})
								else:
									if player's gamemode isn't creative:
										cancel event
										mj_manager_message(player, "expbank", "data.prefix", "expbank", "data.no_owner")
							else:
								mj_expbank_drop_sign(player, {_loc.5})
		if type of block at {_loc.6} is sign:
			if "%type of block at {_loc.6}%" contains "sign":
				if "%type of block at {_loc.6}%" doesn't contain "wall":
					if line 1 of block at {_loc.6} is {_name}:
						if line 3 of block at {_loc.6} isn't "0":
							set {_owner} to line 2 of block at {_loc.6}
							if {_owner} isn't empty:
								if {_owner} is "%player%":
									mj_expbank_drop_sign(player, {_loc.6})
								else:
									if player's gamemode isn't creative:
										cancel event
										mj_manager_message(player, "expbank", "data.prefix", "expbank", "data.no_owner")
							else:
								mj_expbank_drop_sign(player, {_loc.6})
	stop
# ---------------------------------------------------------------------------------------------------------------------
on explode:
	set {_name} to mj_editfiles("expbank.config", "data.sign.name")
	loop exploded blocks:
		if type of loop-block is sign:
			if line 1 of loop-block is {_name}:
				cancel event
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_expbank_drop_sign(player: offlineplayer, loc: location):
	set {_block.1} to block at {_loc}
	set {_value.1} to line 2 of {_block.1} parsed as offlineplayer
	set {_value.2} to line 3 of {_block.1} parsed as number
	set {_type} to mj_editfiles_boolean("expbank.config", "data.sign.type")
	if {_type} is true:
		add {_value.2} to {_value.1}'s level
	else:
		add {_value.2} to {_value.1}'s xp
	mj_core_logger(2, "%{_player}% break drawer sign at %{_loc}% with %{_value.2}% of %{_value.1}%")
	stop
# ---------------------------------------------------------------------------------------------------------------------
# APIxMJ - ExpBank Sign (Break)
# =====================================================================================================================
# APIxMJ - ExpBank Bottle
# ---------------------------------------------------------------------------------------------------------------------
command /bottlexp [<text>] [<text="level">]:
	aliases: xpb, bottle, expbottle
	trigger:
		if arg-1 is set:
			if arg-1 contains "x":
				set {_list::*} to arg-1 split at "x"
				set {_value.1} to {_list::1} parsed as number
				set {_value.2} to {_list::2} parsed as number
			else:
				set {_value.1} to arg-1 parsed as number
				set {_value.2} to 1
			if arg-2 is set:
				if arg-2 is "level":
					set {_value.3} to "level"
				else:
					set {_value.3} to "point"
			else:
				set {_value.3} to "level"
			if {_value.1} is set:
				mj_expbank_bottle_extract(player, {_value.1}, {_value.2}, {_value.3})
			else:
				mj_manager_message(player, "essentials", "data.home.prefix", "manager", "data.argument.number")
		else:
			mj_manager_message(player, "expbank", "data.prefix", "expbank", "data.exp_failed")
		stop
# ---------------------------------------------------------------------------------------------------------------------
on tab complete of "bottlexp" or "xpb" or "bottle" and "/expbottle":
	set tab completions for position 1 to "%player's level%x1 level(s) / %player's xp%x1 point(s)"
	set tab completions for position 2 to "level" and "point"
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_expbank_bottle_extract(player: player, value.1: number=1, value.2: number=1, type: text="level"):
	set {_success.1} to true
	set {_success.2} to false
	set {_error} to 1
	loop {_value.2} times:
		set {_name} to mj_editfiles("expbank.config", "data.bottle.name")
		set {_item} to mj_manager_item_convert("expbank.config", "data.bottle.item")
		set {_item} to {_item} named {_name}
		if {_type} is "level":
			set {_value.3} to {_player}'s level
		else:
			set {_value.3} to {_player}'s xp
		if {_value.3} >= {_value.1}:
			set {_lore} to mj_editfiles("expbank.config", "data.bottle.lore.%{_type}%")
			set line 1 of lore of {_item} to "%{_lore}%%{_value.1}%"
			if {_player}'s inventory has space for {_item}:
				set {_success.2} to true
				give {_item} to {_player}
			else:
				set {_success.1} to false
				set {_error} to 2
				exit loop
			if {_type} is "level":
				remove {_value.1} from {_player}'s level
			else:
				remove {_value.1} from {_player}'s xp
		else:
			set {_success.1} to false
			set {_error} to 1
	if {_success.1} isn't true:
		if {_error} is 2:
			mj_manager_message({_player}, "expbank", "data.prefix", "expbank", "data.inv_failed")
		else:
			mj_manager_message({_player}, "expbank", "data.prefix", "expbank", "data.exp_failed")
	if {_success.2} is true:
		mj_manager_message({_player}, "expbank", "data.prefix", "expbank", "data.convert_%{_type}%", "%{_value.2}%x%{_value.1}%")
	stop
# ---------------------------------------------------------------------------------------------------------------------
on rightclick:
	set {_item} to mj_manager_item_convert("expbank.config", "data.bottle.item")
	if 1 of player's tool is {_item}:
		if 1 of player's offhand isn't {_item}:
			set {_name} to mj_editfiles("expbank.config", "data.bottle.name")
			if name of player's tool is {_name}:
				cancel event
				set {_lore} to line 1 of lore of player's tool
				set {_level} to mj_editfiles("expbank.config", "data.bottle.lore.level")
				set {_point} to mj_editfiles("expbank.config", "data.bottle.lore.point")
				if {_lore} contains {_level}:
					mj_expbank_bottle(player, "level")
				else if {_lore} contains {_point}:
					mj_expbank_bottle(player, "point")
		else:
			cancel event
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_expbank_bottle(player: player, type: text="level"):
	set {_lore} to line 1 of lore of {_player}'s tool
	set {_format} to mj_editfiles("expbank.config", "data.bottle.lore.%{_type}%")
	replace "%{_format}%" with "" in {_lore}
	set {_xp} to {_lore} parsed as number
	remove 1 of {_player}'s tool from {_player}'s inventory
	if {_type} is "level":
		add {_xp} to {_player}'s level
	else:
		add {_xp} to {_player}'s xp
	mj_manager_message({_player}, "expbank", "data.prefix", "expbank", "data.take_%{_type}%", "%{_xp}%")
	stop
# ---------------------------------------------------------------------------------------------------------------------
# APIxMJ - ExpBank Bottle
# =====================================================================================================================