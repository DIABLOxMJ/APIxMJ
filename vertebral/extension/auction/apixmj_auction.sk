# =====================================================================================================================
# APIxMJ - Files
# ---------------------------------------------------------------------------------------------------------------------
function mj_files_auction():
	set {_folder} to mj_editfiles("manager.data", "data.addon.vertebral_extension.auction.folder")
	load yaml "plugins/APIxMJ/%{_folder}%/config.yml" as "mj.auction.config"
	load yaml "plugins/APIxMJ/%{_folder}%/data.yml" as "mj.auction.data"
	set {_list::*} to mj_editfiles_list("manager.config", "data.language.list")
	if {_list::*} is set:
		loop {_list::*}:
			load yaml "plugins/APIxMJ/%{_folder}%/language/%loop-value%.yml" as "mj.auction.language.%loop-value%"
			load yaml "plugins/APIxMJ/%{_folder}%/help/%loop-value%.yml" as "mj.auction.help.%loop-value%"
	stop
# ---------------------------------------------------------------------------------------------------------------------
on load:
	set {_list::*} to mj_manager_skript_list()
	if {_list::*} contains "apixmj_manager.sk" and "apixmj_core.sk" and "apixmj_essentials.sk":
		send "[APIxMJ] Loading auction..." to console
		mj_files_auction()
		mj_editfiles("temp", "data.manager.addon.vertebral_extension.auction.version", "modify", "2023.05.08.0001")
	else:
		broadcast "[APIxMJ] Script loading cancel It requires (apixmj_manager.sk, apixmj_core.sk and apixmj_essentials.sk)"
		unload script file "apixmj_auction.sk"
	stop
# ---------------------------------------------------------------------------------------------------------------------
on skript stop:
	rename file "plugins/Skript/scripts/apixmj_auction.sk" to "-apixmj_auction.sk"
	send "[APIxMJ] Unloading auction.."
	stop
# ---------------------------------------------------------------------------------------------------------------------
on join:
	if event-entity is player:
		mj_auction_playerdata(player)
	stop
# ---------------------------------------------------------------------------------------------------------------------
on command:
	if complete command contains "profil_update":
		set {_list::*} to complete command split at " "
		set {_player} to {_list::2} parsed as offlineplayer
		mj_auction_playerdata({_player})
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_auction_playerdata(player: offlineplayer):
	wait 202 ticks
	if {_player} is online:
		set {_profil} to yaml value "data.%{_player}'s uuid%.profil" from "mj.userdata"
		set {_check.1} to yaml value "data.%{_player}'s uuid%.source.auction" from "mj.userdata"
		if {_check.1} isn't set:
			set {_value} to mj_editfiles_number("auction.config", "data.player_quantity")
			set yaml value "data.%{_player}'s uuid%.source.auction" from "mj.userdata" to "none"
			save yaml "mj.userdata"
			mj_core_logger(1, "%{_player}% auction data file was generated..")
		set {_check.2} to yaml value "data.source.auction" from "mj.userdata.%{_player}'s uuid%.%{_profil}%"
		if {_check.2} isn't set:
			set {_value} to mj_editfiles_number("auction.config", "data.limit_per_player")
			set yaml value "data.source.auction.quantity" from "mj.userdata.%{_player}'s uuid%.%{_profil}%" to {_value}
			save yaml "mj.userdata.%{_player}'s uuid%.%{_profil}%"
			mj_core_logger(1, "%{_player}% auction data was generated..")
	stop
# ---------------------------------------------------------------------------------------------------------------------
# APIxMJ - Files
# =====================================================================================================================
# APIxMJ - Command
# ---------------------------------------------------------------------------------------------------------------------
command /auction [<text>] [<text>]:
	aliases: hdv
	executable by: player
	trigger:
		if player has permission "*" or "mj.*" or "mj.auction.*" or "mj.auction":
			if arg-1 is set:
				if arg-1 is "sorter":
					if player has permission "*" or "mj.*" or "mj.auction.*" or "mj.auction.edit":
						mj_auction_data_sorter()
					else:
						mj_manager_permission(player, "auction", "data.prefix", "mj.auction.edit")
				else if arg-1 is "sell":
					if arg-2 is set:
						set {_number} to arg-2 parsed as number
						if {_number} >= 1:
							if player's tool isn't air:
								mj_auction_sell(player, {_number})
							else:
								mj_manager_message(player, "auction", "data.prefix", "auction", "data.empty_hand")
						else:
							mj_manager_message(player, "auction", "data.prefix", "auction", "data.lowvalue")
					else:
						mj_manager_message(player, "auction", "data.prefix", "manager", "data.argument.number")
				else:
					mj_manager_message(player, "auction", "data.prefix", "manager", "data.argument.name")
			else:
				mj_auction_menu(player)
		else:
			mj_manager_permission(player, "auction", "data.prefix", "mj.auction")
		stop
# ---------------------------------------------------------------------------------------------------------------------
on tab complete of "/auction" or "/hdv":
	if player has permission "*" or "mj.*" or "mj.auction.*" or "mj.auction":
		set tab completions for position 1 to "sell"
		if tab arg-1 is "sell":
			set tab completions for position 2 to "100"
	stop
# ---------------------------------------------------------------------------------------------------------------------
# APIxMJ - Command
# =====================================================================================================================
# APIxMJ - Function
# ---------------------------------------------------------------------------------------------------------------------
function mj_auction_sell(player: player, price: number):
	set {_count} to 0
	set {_list::*} to mj_manager_nodes("auction.data")
	loop {_list::*}:
		set {_id} to loop-value
		set {_owner} to mj_editfiles("auction.data", "data.%{_id}%.owner")
		if {_owner} is {_player}'s uuid:
			add 1 to {_count}
	set {_limit} to mj_editfiles_number("userdata.%{_player}'s uuid%", "data.source.auction.quantity")
	if {_count} >= {_limit}:
		mj_manager_message({_player}, "auction", "data.prefix", "auction", "data.sender.full")
	else:
		mj_auction_save_product({_player}, {_price})
		mj_auction_data_sorter()
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_auction_save_product(player: player, price: number):
	set {_item} to {_player}'s tool
	clear {_player}'s tool
	set {_id} to mj_core_id_generator()
	set {_page} to mj_auction_page()
	set {_date} to now
	set {_count} to mj_editfiles_number("auction.config", "data.expiry_time")
	set {_time} to "%{_count}% day" parsed as timespan
	add {_time} to {_date}
	mj_editfiles("auction.data", "data.%{_id}%.owner", "modify", {_player}'s uuid)
	mj_editfiles_number("auction.data", "data.%{_id}%.price", "modify", {_price})
	mj_editfiles_number("auction.data", "data.%{_id}%.page", "modify", {_page})
	mj_editfiles_date("auction.data", "data.%{_id}%.expiry", "modify", {_date})
	mj_editfiles_stock("auction.data", "data.%{_id}%.storage", "modify", {_item})
	set {_viewer} to mj_core_money_viewer({_price})
	mj_manager_message({_player}, "auction", "data.prefix", "auction", "data.sender.deposit", "%{_item}%", "%{_viewer}%")
	set {_taxe.1} to mj_editfiles_number("auction.config", "data.taxe_pourcent")
	set {_taxe.2} to ({_price}/{_taxe.1})/17
	mj_essentials_money_system({_player}, {_taxe.2}, false, "auction taxe")
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_auction_page() :: number:
	set {_page} to 1
	loop 5 times:
		set {_count} to mj_auction_page_count({_page})
		if {_count} is 45:
			add 1 to {_page}
			set {_count} to 0
		else:
			exit loop
	return {_page}
# ---------------------------------------------------------------------------------------------------------------------
function mj_auction_page_count(page: number=1) :: number:
	set {_count} to 0
	set {_list::*} to mj_manager_nodes("auction.data")
	loop {_list::*}:
		set {_value} to mj_editfiles_number("auction.data", "data.%loop-value%.page")
		if {_page} is {_value}:
			add 1 to {_count}
		if {_count} >= 45:
			exit loop
	return {_count}
# ---------------------------------------------------------------------------------------------------------------------
function mj_auction_actualizer(max: number=1):
	set {_list::*} to mj_manager_nodes("temp", "data.auction")
	loop {_list::*}:
		set {_player} to loop-value parsed as offlineplayer
		set {_check} to mj_editfiles_boolean("userdata.%{_player}'s uuid%", "data.temp.gui")
		if {_check} contains "auction":
			set {_page} to mj_editfiles_number("temp", "data.auction.%{_player}'s uuid%.page")
			if {_page} >= {_max}+1:
				mj_auction_menu({_player})
			else:
				mj_auction_menu({_player})
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_auction_data_sorter():
	set {_count} to 0
	set {_page} to 1
	set {_list::*} to mj_manager_nodes("auction.data")
	loop {_list::*}:
		mj_editfiles_number("auction.data", "data.%loop-value%.page", "modify", {_page})
		add 1 to {_count}
		if {_count} >= 45:
			set {_count} to 0
			add 1 to {_page}
	mj_auction_actualizer({_page})
	stop
# ---------------------------------------------------------------------------------------------------------------------
on inventory close:
	wait 1 second
	set {_gui} to mj_editfiles("userdata.%player's uuid%", "data.temp.gui", "modify", "auction")
	if {_gui} isn't "auction":
		mj_editfiles("temp", "data.auction.%player's uuid%", "delete")
	stop
# ---------------------------------------------------------------------------------------------------------------------
#on npc right click:
	#set {_id} to mj_editfiles_number("auction.config", "data.npcid")
	#if citizen is {_id}:
	#	mj_auction_menu(player)
	#stop
# ---------------------------------------------------------------------------------------------------------------------
# ---------------------------------------------------------------------------------------------------------------------
# APIxMJ - Function
# =====================================================================================================================
# APIxMJ - Menu
# ---------------------------------------------------------------------------------------------------------------------
function mj_auction_menu(player: player, page: number=1):
	mj_auction_menu_main({_player}, {_page})
	stop
# ---------------------------------------------------------------------------------------------------------------------
# APIxMJ - Menu
# =====================================================================================================================
# APIxMJ - Menu Main
# ---------------------------------------------------------------------------------------------------------------------
function mj_auction_menu_main(player: player, page: number=1):
	set {_title} to mj_editfiles_gettext("auction", "data.title.main.page", {_player}, "%{_page}%")
	if {_page} is 1:
		set {_title} to mj_editfiles_gettext("auction", "data.title.main.default", {_player})
	mj_core_gui_generator({_player}, 6, true, "toolbar", {_title}, "auction")

	#mj_editfiles("temp", "data.auction.%{_player}'s uuid%.confirm", "modify", "none")
	#mj_editfiles_number("temp", "data.auction.%{_player}'s uuid%.page", "modify", {_page})

	mj_auction_button_page({_player}, {_page})
	mj_auction_menu_main_button_personal({_player}, {_page}, 49)

	set {_slot} to 0
	set {_list::*} to mj_manager_nodes("auction.data")
	loop {_list::*}:
		set {_id} to loop-value
		#set {_owner} to mj_editfiles("auction.data", "data.%{_id}%.owner")
		#if {_owner} isn't {_player}'s uuid:
		set {_item.page} to mj_editfiles_number("auction.data", "data.%{_id}%.page")
		if {_item.page} is {_page}:
			set {_item.date} to mj_editfiles_date("auction.data", "data.%{_id}%.expiry")
			if {_item.date} > now:
				mj_auction_menu_main_button_product({_player}, {_id}, {_slot})
				add 1 to {_slot}
				if {_slot} >= 45:
					exit loop
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_auction_menu_main_button_product(player: player, id: text, slot: number):
	set {_item} to mj_auction_button_viewer_generator({_player}, {_id})
	make a gui slot {_slot} of {_player} with {_item} to run:
		if gui-click-type is left mouse button:
			mj_auction_menu_confirm({_player}, {_id})
		if gui-click-type is right mouse button:
			if {_player} has permission "*" or "mj.*" or "mj.auction.*" or "mj.auction.edit":
				mj_auction_menu_confirm_button({_player}, {_id})
		stop
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_auction_menu_main_button_personal(player: player, page: number, slot: number):
	set {_name} to mj_editfiles_gettext("auction", "data.product", {_player})
	make a gui slot {_slot} of {_player} with book named {_name} to run:
		mj_auction_menu_personal({_player}, {_page})
		stop
	stop
# ---------------------------------------------------------------------------------------------------------------------
# APIxMJ - Menu Main
# =====================================================================================================================
# APIxMJ - Menu Personal
# ---------------------------------------------------------------------------------------------------------------------
function mj_auction_menu_personal(player: player, page: number=1):
	set {_title} to mj_editfiles_gettext("auction", "data.title.main.page", {_player}, "%{_page}%")
	if {_page} is 1:
		set {_title} to mj_editfiles_gettext("auction", "data.title.product", {_player})
	mj_core_gui_generator({_player}, 6, true, "toolbar", {_title}, "auction_panel")
	set {_slot} to 0
	set {_list::*} to mj_manager_nodes("auction.data")
	loop {_list::*}:
		set {_id} to loop-value
		set {_owner} to mj_editfiles("auction.data", "data.%{_id}%.owner")
		if {_owner} is {_player}'s uuid:
			mj_auction_menu_personal_button({_player}, {_id}, {_slot})
			add 1 to {_slot}
			if {_slot} >= 45:
				exit loop
	mj_auction_button_return({_player}, {_page}, 49)
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_auction_menu_personal_button(player: player, id: text, slot: number):
	set {_item.1} to mj_auction_button_viewer_generator({_player}, {_id}, true)
	set {_item.2} to mj_manager_item_convert("auction.data", "data.%{_id}%.storage", true)
	make a gui slot {_slot} of {_player} with {_item.1} to run:
		mj_manager_item_give({_player}, {_item.2})
		mj_editfiles("auction.data", "data.%{_id}%", "delete")
		mj_auction_data_sorter()
		mj_auction_menu_personal({_player})
		loop all players:
			set {_check} to mj_editfiles("temp", "data.auction.%loop-player's uuid%.confirm")
			if {_check} is {_id}:
				mj_auction_menu(loop-player)
		stop
	stop
# ---------------------------------------------------------------------------------------------------------------------
# APIxMJ - Menu Personal
# =====================================================================================================================
# APIxMJ - Menu Confirm
# ---------------------------------------------------------------------------------------------------------------------
function mj_auction_menu_confirm(player: player, id: text):
	#mj_editfiles("userdata.%{_player}'s uuid%", "data.temp.gui", "modify", "auction")

	#mj_editfiles("temp", "data.auction.%{_player}'s uuid%.confirm", "modify", {_id})

	set {_title} to mj_editfiles_gettext("auction", "data.title.confirm", {_player})
	mj_core_gui_generator({_player}, 3, true, "default", {_title}, "auction_confirm")
	#set {_item} to mj_manager_item_convert("auction.data", "data.%{_id}%.storage")
	#make a gui slot 11 of {_player} with {_item} to run:
	#	stop

	#set {_item.buy} to emerald
	#set {_owner} to mj_editfiles("auction.data", "data.%{_id}%.owner")
	#set {_owner} to {_owner} parsed as offlineplayer
	#set {_price} to mj_editfiles_number("auction.data", "data.%{_id}%.price")
	#set {_price.viewer} to mj_core_format_money(false, {_price})
	#set {_click} to mj_editfiles_gettext("manager", "data.type.left_click", {_player})
	#set line 2 of lore of {_item.buy} to mj_editfiles_gettext("auction", "data.viewer.owner", {_player}, "%{_owner}%")
	#set line 3 of lore of {_item.buy} to mj_editfiles_gettext("auction", "data.viewer.price", {_player}, "%{_price.viewer}%")
	#set line 5 of lore of {_item.buy} to mj_editfiles_gettext("auction", "data.buy.button", {_player}, {_click})

	#set {_title} to mj_editfiles_gettext("auction", "data.buy.confirm", {_player})
	#make a gui slot 13 of {_player} with {_item.buy} named {_title} to run:
	#	mj_auction_menu_confirm_button({_player}, {_id}, true)
	#	mj_auction_menu({_player})
	#	stop

	mj_auction_button_return({_player}, 1, 15)
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_auction_menu_confirm_button(player: player, id: text, type: boolean=false):
	set {_owner} to mj_editfiles("auction.data", "data.%{_id}%.owner")
	if {_owner} is set:
		set {_owner} to {_owner} parsed as offlineplayer
		set {_price.1} to mj_editfiles_number("auction.data", "data.%{_id}%.price")
		set {_price.2} to mj_core_money_viewer({_price.1})
		set {_item} to mj_manager_item_convert("auction.data", "data.%{_id}%.storage")
		if {_type} is true:
			set {_money} to mj_essentials_money_modify({_player}, "all")
			if {_money} >= {_price.1}:
				mj_manager_item_give({_player}, {_item}) 
				mj_editfiles("auction.data", "data.%{_id}%", "delete")
				mj_auction_data_sorter()
				mj_manager_message({_player}, "auction", "data.prefix", "auction", "data.sender.buy", "%{_item}%", "%{_price.2}%")
				mj_essentials_money_system({_player}, {_price.1}, false, "buy item in auction")
				mj_essentials_money_system({_owner}, {_price.1}, true, "selled item in auction")
				if {_owner} is online:
					mj_manager_message({_owner}, "auction", "data.prefix", "auction", "data.sender.selled", "%{_item}%", "%{_price.2}%", "%{_player}%")
					set {_check} to mj_editfiles("userdata.%{_owner}'s uuid%", "data.temp.gui")
					if {_check} is "auction_panel":
						mj_auction_menu_personal({_owner})
			else:
				mj_manager_message({_player}, "auction", "data.prefix", "essentials", "data.money.enough", "%{_price.2}%")
		else if {_player} has permission "*" or "mj.*" or "mj.auction.*" or "mj.auction.edit":
			mj_manager_item_give({_player}, {_item}) 
			mj_editfiles("auction.data", "data.%{_id}%", "delete")
			mj_auction_data_sorter()
		else:
			mj_manager_message({_player}, "auction", "data.prefix", "auction", "data.no_product")
	else:
		mj_manager_message({_player}, "auction", "data.prefix", "auction", "data.no_product")
	stop
# ---------------------------------------------------------------------------------------------------------------------
# APIxMJ - Menu Confirm
# =====================================================================================================================
# APIxMJ - Button
# ---------------------------------------------------------------------------------------------------------------------
function mj_auction_button_viewer_generator(player: player, id: text, personal: boolean=false) :: item:
	set {_item} to mj_manager_item_convert("auction.data", "data.%{_id}%.storage", true)
	set {_owner} to mj_editfiles("auction.data", "data.%{_id}%.owner")
	set {_owner} to {_owner} parsed as offlineplayer
	set {_count} to mj_manager_item_lore_count({_item})
	if {_personal} isn't true:
		set line {_count} of lore of {_item} to mj_editfiles_gettext("auction", "data.viewer.owner", {_player}, "%{_owner}%")
		add 1 to {_count}
	set {_price.1} to mj_editfiles_number("auction.data", "data.%{_id}%.price")
	set {_price.2} to mj_core_money_viewer({_price.1})
	set line {_count} of lore of {_item} to mj_editfiles_gettext("auction", "data.viewer.price", {_player}, {_price.2})
	set {_date} to mj_editfiles_date("auction.data", "data.%{_id}%.expiry")
	add 1 to {_count}
	set line {_count} of lore of {_item} to mj_editfiles_gettext("auction", "data.viewer.expired", {_player}, "%{_date}%")
	if {_date} > now:
		set line {_count} of lore of {_item} to mj_editfiles_gettext("auction", "data.viewer.expiry", {_player}, "%{_date}%")
	add 2 to {_count}
	if {_personal} is true:
		set {_item} to mj_manager_item_button({_player}, {_item}, "left_click", "auction", "data.button.remove")
	else:
		set {_item} to mj_manager_item_button({_player}, {_item}, "left_click", "auction", "data.button.buy", false, {_price.2})
		if {_player} has permission "*" or "mj.*" or "mj.auction.*" or "mj.auction.edit":
			set {_item} to mj_manager_item_button({_player}, {_item}, "right_click", "auction", "data.button.remove", true)
	return {_item}
# ---------------------------------------------------------------------------------------------------------------------
function mj_auction_button_page(player: player, page: number):
	if {_page} isn't 1:
		set {_previous} to {_page} - 1
		set {_name} to mj_editfiles_gettext("auction", "data.button.previous", {_player})
		make a gui slot 48 of {_player} with paper named {_name} to run:
			mj_auction_menu({_player}, {_previous})
			stop
	set {_next} to {_page} + 1
	set {_count} to mj_auction_page_count({_next})
	if {_count} >= 1:
		set {_name} to mj_editfiles_gettext("auction", "data.button.next", {_player})
		make a gui slot 50 of {_player} with paper named {_name} to run:
			mj_auction_menu({_player}, {_next})
			stop
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_auction_button_return(player: player, page: number, slot: number):
	set {_return} to mj_editfiles_gettext("auction", "data.return", {_player})
	make a gui slot {_slot} of {_player} with book named {_return} to run:
		mj_auction_menu({_player}, {_page})
		stop
	stop
# ---------------------------------------------------------------------------------------------------------------------
# APIxMJ - Button
# =====================================================================================================================