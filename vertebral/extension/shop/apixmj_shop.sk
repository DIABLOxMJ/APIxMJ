# =====================================================================================================================
# APIxMJ - Files
# ---------------------------------------------------------------------------------------------------------------------
function mj_files_shop():
	set {_folder} to mj_editfiles("manager.data", "data.addon.vertebral_extension.shop.folder")
	load yaml "plugins/APIxMJ/%{_folder}%/config.yml" as "mj.shop.config"
	load yaml "plugins/APIxMJ/%{_folder}%/data.yml" as "mj.shop.data"
	set {_list::*} to mj_editfiles_list("manager.config", "data.language.list")
	if {_list::*} is set:
		loop {_list::*}:
			load yaml "plugins/APIxMJ/%{_folder}%/language/%loop-value%.yml" as "mj.shop.language.%loop-value%"
			load yaml "plugins/APIxMJ/%{_folder}%/help/%loop-value%.yml" as "mj.shop.help.%loop-value%"
	loop all players:
		mj_shop_playerdata(loop-player)
	wait 2 ticks
	set {_list::*} to mj_manager_nodes("shop.data")
	loop {_list::*}:
		load yaml "plugins/APIxMJ/%{_folder}%/data/%loop-value%.yml" as "mj.shop.data_%loop-value%"
	stop
# ---------------------------------------------------------------------------------------------------------------------
on load:
	set {_list::*} to mj_manager_skript_list()
	if {_list::*} contains "apixmj_manager.sk" and "apixmj_core.sk" and "apixmj_essentials.sk":
		send "[APIxMJ] Loading shop..." to console
		mj_files_shop()
	else:
		broadcast "[APIxMJ] Script loading cancel It requires (apixmj_manager.sk, apixmj_core.sk and apixmj_essentials.sk)"
		unload script file "apixmj_shop.sk"
	stop
# ---------------------------------------------------------------------------------------------------------------------
on skript stop:
	rename file "plugins/Skript/scripts/apixmj_shop.sk" to "-apixmj_shop.sk"
	send "[APIxMJ] Unloading shop.."
	stop
# ---------------------------------------------------------------------------------------------------------------------
on join:
	if event-entity is player:
		mj_shop_playerdata(player)
	stop
# ---------------------------------------------------------------------------------------------------------------------
on command:
	if complete command contains "profil_update":
		set {_list::*} to complete command split at " "
		set {_player} to {_list::2} parsed as offlineplayer
		mj_shop_playerdata({_player})
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_shop_playerdata(player: offlineplayer):
	wait 230 ticks
	set {_profil} to yaml value "data.%{_player}'s uuid%.profil" from "mj.userdata"
	set {_check1} to yaml value "data.%{_player}'s uuid%.source.shop" from "mj.userdata"
	if {_check1} isn't set:
		set yaml value "data.%{_player}'s uuid%.source.shop" from "mj.userdata" to "none"
		save yaml "mj.userdata"
		mj_core_logger(1, "%{_player}% shop data file was generated..")
	set {_check2} to yaml value "data.source.shop" from "mj.userdata.%{_player}'s uuid%.%{_profil}%"
	if {_check2} isn't set:
		set yaml value "data.source.shop" from "mj.userdata.%{_player}'s uuid%.%{_profil}%" to "none"
		save yaml "mj.userdata.%{_player}'s uuid%.%{_profil}%"
		mj_core_logger(1, "%{_player}% shop data was generated..")
	stop
# ---------------------------------------------------------------------------------------------------------------------
# APIxMJ - Files
# =====================================================================================================================
# APIxMJ - Shop
# ---------------------------------------------------------------------------------------------------------------------
command /shop [<text>] [<text>] [<text>] [<text>]:
	executable by: player
	trigger:
		if player has permission "*" or "mj.*" or "mj.shop.*" or "mj.shop":
			if arg-1 is set:
				if player has permission "*" or "mj.*" or "mj.shop.*" or "mj.shop" or "mj.shop.admin":
					if arg-1 is "new_category":
						if arg-2 is set:
							mj_shop_data_new_category(player, arg-2, player's tool)
						else:
							mj_manager_message(player, "shop", "data.prefix", "manager", "data.argument.name")
					else if arg-1 is "new_product":
						if arg-2 is set:
							if arg-3 is set:
								mj_shop_data_new_product(player, arg-2, arg-3, player's tool)
							else:
								mj_manager_message(player, "shop", "data.prefix", "manager", "data.argument.name")
						else:
							mj_manager_message(player, "shop", "data.prefix", "manager", "data.argument.name")
					else if arg-1 is "slot_category" or "slot_product":
						if arg-1 is "slot_category":
							if arg-2 is set:
								mj_shop_data_slot(player, "category", arg-2, "none", (arg-3 parsed as number))
							else:
								mj_manager_message(player, "shop", "data.prefix", "manager", "data.argument.name")
						else:
							if arg-2 is set:
								if arg-3 is set:
									mj_shop_data_slot(player, "product", arg-2, arg-3, (arg-4 parsed as number))
								else:
									mj_manager_message(player, "shop", "data.prefix", "manager", "data.argument.number")
							else:
								mj_manager_message(player, "shop", "data.prefix", "manager", "data.argument.name")
					else if arg-1 is "edit_money_buy" or "edit_money_sell":
						if arg-2 is set:
							if arg-3 is set:
								if arg-4 is set:
									if arg-1 is "edit_money_buy":
										mj_shop_data_edit_money(player, "buy", arg-2, arg-3, (arg-4 parsed as number))
									else:
										mj_shop_data_edit_money(player, "sell", arg-2, arg-3, (arg-4 parsed as number))
								else:
									mj_manager_message(player, "shop", "data.prefix", "manager", "data.argument.number")
							else:
								mj_manager_message(player, "shop", "data.prefix", "manager", "data.argument.name")
						else:
							mj_manager_message(player, "shop", "data.prefix", "manager", "data.argument.name")
					else if arg-1 is "edit_discount_buy" or "edit_discount_sell":
						if arg-2 is set:
							if arg-3 is set:
								if arg-4 is set:
									if arg-1 is "edit_discount_buy":
										mj_shop_data_edit_discount(player, "buy", arg-2, arg-3, (arg-4 parsed as number))
									else:
										mj_shop_data_edit_discount(player, "sell", arg-2, arg-3, (arg-4 parsed as number))
								else:
									mj_manager_message(player, "shop", "data.prefix", "manager", "data.argument.number")
							else:
								mj_manager_message(player, "shop", "data.prefix", "manager", "data.argument.name")
						else:
							mj_manager_message(player, "shop", "data.prefix", "manager", "data.argument.name")
					else if arg-1 is "reload":
						mj_files_shop()
						send "[APIxMJ] Data reloaded"
					else:
						mj_manager_message(player, "shop", "data.prefix", "manager", "data.argument.name")
				else:
					mj_manager_permission(player, "shop", "data.prefix", "mj.shop.admin")
			else:
				mj_shop_menu(player)
		else:
			mj_manager_permission(player, "shop", "data.prefix", "mj.shop")
		stop
# ---------------------------------------------------------------------------------------------------------------------
on tab complete of "/shop":
	if player has permission "*" or "mj.*" or "mj.shop.*" or "mj.shop" or "mj.shop.admin":
		set {_list.1::*} to "new_category", "new_product", "slot_category", "slot_product", "edit_money_buy", "edit_money_sell", "edit_discount_buy", "edit_discount_sell" and "reload"
		set tab completions for position 1 to {_list.1::*}
		set {_list.2::*} to mj_manager_nodes("shop.data")
		if tab arg-1 is "new_category" or "new_product":
			if tab arg-1 is "new_category":
				set tab completions for position 2 to "enter_the_ID" and {_list.2::*}
			else:
				set tab completions for position 2 to {_list.2::*}
				set tab completions for position 3 to "enter_the_ID"
		if tab arg-1 is "slot_category" or "slot_product":
			set tab completions for position 2 to {_list.2::*}
			if tab arg-1 is "slot_category":
				if tab arg-2 is set:
					set {_value} to mj_editfiles_number("shop.data", "data.%tab arg-2%.slot")
					set tab completions for position 3 to "%{_value}%"
			else:
				if tab arg-2 is set:
					set {_list.3::*} to mj_manager_nodes("shop.data_%tab arg-2%")
					set tab completions for position 3 to {_list.3::*}
					if tab arg-3 is set:
						set {_value} to mj_editfiles_number("shop.data_%tab arg-2%", "data.%tab arg-3%.slot")
						set tab completions for position 4 to "%{_value}%"
		if tab arg-1 is "edit_money_buy" or "edit_money_sell":
			set tab completions for position 2 to {_list.2::*}
			if tab arg-2 is set:
				set {_list.3::*} to mj_manager_nodes("shop.data_%tab arg-2%")
				set tab completions for position 3 to {_list.3::*}
				if tab arg-3 is set:
					if tab arg-1 is "edit_money_buy":
						set {_value} to mj_editfiles_number("shop.data_%tab arg-2%", "data.%tab arg-3%.buy.price")
						set tab completions for position 4 to "%{_value}%"
					else:
						set {_value} to mj_editfiles_number("shop.data_%tab arg-2%", "data.%tab arg-3%.sell.price")
						set tab completions for position 4 to "%{_value}%"
		if tab arg-1 is "edit_discount_buy" or "edit_discount_sell":
			set tab completions for position 2 to {_list.2::*}
			if tab arg-2 is set:
				set {_list.3::*} to mj_manager_nodes("shop.data_%tab arg-2%")
				set tab completions for position 3 to {_list.3::*}
				if tab arg-3 is set:
					if tab arg-1 is "edit_discount_buy":
						set {_value} to mj_editfiles_number("shop.data_%tab arg-2%", "data.%tab arg-3%.buy.discount")
						set tab completions for position 4 to "%{_value}%"
					else:
						set {_value} to mj_editfiles_number("shop.data_%tab arg-2%", "data.%tab arg-3%.sell.discount")
						set tab completions for position 4 to "%{_value}%"
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_shop_data_new_category(player: player, id: text, item: item):
	set {_id} to mj_core_converter_name({_id})
	set yaml value "data.%{_id}%.name" from "mj.shop.data_%{_source}%" to "none"
	set yaml value "data.%{_id}%.visible" from "mj.shop.data_%{_source}%" to true
	set yaml value "data.%{_id}%.slot" from "mj.shop.data_%{_source}%" to 0
	set yaml value "data.%{_id}%.page" from "mj.shop.data_%{_source}%" to 1
	set yaml value "data.%{_id}%.npc_id" from "mj.shop.data_%{_source}%" to 0
	set yaml value "data.%{_id}%.item" from "mj.shop.data_%{_source}%" to {_item}
	save yaml "mj.shop.data_%{_source}%"
	set {_list::*} to mj_editfiles_list("manager.config", "data.language.list")
	if {_list::*} is set:
		loop {_list::*}:
			set yaml value "data.index.category.%{_id}%.name" from "mj.shop.language.%loop-value%" to "&a%{_id}%"
			save yaml "mj.shop.language.%loop-value%"
	send "[APIxMJ] SHOP : data %{_source}% is added in index" to {_player}
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_shop_data_new_product(player: player, source: text, id: text, item: item):
	set {_id} to mj_core_converter_name({_id})
	set yaml value "data.%{_id}%.name" from "mj.shop.data_%{_source}%" to "none"
	set yaml value "data.%{_id}%.visible" from "mj.shop.data_%{_source}%" to true
	set yaml value "data.%{_id}%.slot" from "mj.shop.data_%{_source}%" to 0
	set yaml value "data.%{_id}%.quantity" from "mj.shop.data_%{_source}%" to 1000000
	set yaml value "data.%{_id}%.infinite" from "mj.shop.data_%{_source}%" to true
	set yaml value "data.%{_id}%.buy.price" from "mj.shop.data_%{_source}%" to 0
	set yaml value "data.%{_id}%.buy.discount" from "mj.shop.data_%{_source}%" to 0
	set yaml value "data.%{_id}%.buy.available" from "mj.shop.data_%{_source}%" to true
	set yaml value "data.%{_id}%.buy.interact" from "mj.shop.data_%{_source}%" to 0
	set yaml value "data.%{_id}%.sell.price" from "mj.shop.data_%{_source}%" to 0
	set yaml value "data.%{_id}%.sell.discount" from "mj.shop.data_%{_source}%" to 0
	set yaml value "data.%{_id}%.sell.available" from "mj.shop.data_%{_source}%" to true
	set yaml value "data.%{_id}%.sell.interact" from "mj.shop.data_%{_source}%" to 0
	set yaml value "data.%{_id}%.item" from "mj.shop.data_%{_source}%" to {_item}
	save yaml "mj.shop.data_%{_source}%"
	set {_list::*} to mj_editfiles_list("manager.config", "data.language.list")
	if {_list::*} is set:
		loop {_list::*}:
			set yaml value "data.index.product.%{_id}%.name" from "mj.shop.language.%loop-value%" to "&a%{_id}%"
			save yaml "mj.shop.language.%loop-value%"
	send "[APIxMJ] SHOP : data %{_id}% is added in %{_source}%" to {_player}
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_shop_data_slot(player: player, type: text, source: text, id: text="none", value: number=0):
	if {_type} is "category":
		set yaml value "data.%{_source}%.slot" from "mj.shop.data" to {_value}
		save yaml "mj.shop.data"
		send "[APIxMJ] SHOP : set slot %{_value}% for %{_source}%" to {_player}
	else:
		set yaml value "data.%{_id}%.slot" from "mj.shop.data_%{_source}%" to {_value}
		save yaml "mj.shop.data_%{_source}%"
		send "[APIxMJ] SHOP : set slot %{_value}% for %{_id}% in %{_source}%" to {_player}
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_shop_data_edit_money(player: player, type: text, source: text, id: text="none", value: number=0):
	if {_type} is "buy":
		set yaml value "data.%{_id}%.buy.price" from "mj.shop.data_%{_source}%" to {_value}
		save yaml "mj.shop.data_%{_source}%"
		send "[APIxMJ] SHOP : set buy price %{_value}% for %{_id}% in %{_source}%" to {_player}
	else:
		set yaml value "data.%{_id}%.sell.price" from "mj.shop.data_%{_source}%" to {_value}
		save yaml "mj.shop.data_%{_source}%"
		send "[APIxMJ] SHOP : set sell price %{_value}% for %{_id}% in %{_source}%" to {_player}
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_shop_data_edit_discount(player: player, type: text, source: text, id: text="none", value: number=0):
	if {_type} is "buy":
		set yaml value "data.%{_id}%.buy.discount" from "mj.shop.data_%{_source}%" to {_value}
		save yaml "mj.shop.data_%{_source}%"
		send "[APIxMJ] SHOP : set buy discount %{_value}% for %{_id}% in %{_source}%" to {_player}
	else:
		set yaml value "data.%{_id}%.sell.discount" from "mj.shop.data_%{_source}%" to {_value}
		save yaml "mj.shop.data_%{_source}%"
		send "[APIxMJ] SHOP : set sell discount %{_value}% for %{_id}% in %{_source}%" to {_player}
	stop
# ---------------------------------------------------------------------------------------------------------------------
# APIxMJ - Shop
# =====================================================================================================================
# APIxMJ - Menu Main
# ---------------------------------------------------------------------------------------------------------------------
function mj_shop_menu(player: player):
	mj_shop_menu_main({_player})
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_shop_menu_main(player: player):
	set {_title} to mj_editfiles_gettext("shop", "data.category.title", {_player})
	mj_core_gui_generator({_player}, 5, true, "default", {_title}, "shop")
	set {_list::*} to mj_manager_nodes("shop.data")
	loop {_list::*}:
		set {_value} to loop-value
		set {_check} to mj_editfiles_boolean("shop.data", "data.%{_value}%.visible")
		if {_check} is true:
			mj_shop_menu_main_button_category({_player}, {_value})
		else if {_player} has permission "*" or "mj.*" or "mj.shop.*" or "mj.shop.admin":
			mj_shop_menu_main_button_category({_player}, {_value})
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_shop_menu_main_button_category(player: player, value: text):
	set {_name} to mj_editfiles_gettext("shop", "data.index.category.%{_value}%.name", {_player})
	set {_slot} to mj_editfiles_number("shop.data", "data.%{_value}%.slot")
	set {_item.1} to mj_manager_item_convert("shop.data", "data.%{_value}%.item")
	set {_item.2} to mj_manager_item_description({_player}, {_item.1}, "data.index.category.%{_value}%", "shop")
	set {_item.3} to mj_shop_menu_main_button_category_admin({_player}, {_value}, {_item.2})
	set {_item.3} to mj_manager_item_button({_player}, {_item.3}, "left_click", "shop", "data.category.click")
	make a gui slot {_slot} of {_player} with {_item.3} named {_name} to run:
		mj_shop_menu_product({_player}, {_value}, 1, true)
		stop
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_shop_menu_main_button_category_admin(player: player, value: text, item: item) :: item:
	if {_player} has permission "*" or "mj.*" or "mj.shop.*" or "mj.shop.admin":
		set {_count} to mj_manager_item_lore_count({_item})
		set {_data} to mj_editfiles_gettext("shop", "data.admin_info.title", {_player})
		set line {_count} of lore of {_item} to {_data}
		add 1 to {_count}
		set {_value.1} to mj_editfiles_boolean("shop.data", "data.%{_value}%.visible")
		set {_value.2} to mj_editfiles_gettext("manager", "data.type.hide", {_player})
		if {_value.1} is true:
			set {_value.2} to mj_editfiles_gettext("manager", "data.type.show", {_player})
		set {_lore} to mj_editfiles_gettext("shop", "data.admin_info.visible", {_player}, {_value.2})
		set line {_count} of lore of {_item} to {_lore}
	return {_item}
# ---------------------------------------------------------------------------------------------------------------------
function mj_shop_menu_return(player: player, type: text="main", slot: number=0, source: text="none", page: number=1, return: boolean=true):
	set {_name} to mj_editfiles_gettext("shop", "data.return", {_player})
	make a gui slot {_slot} of {_player} with barrier named {_name} to run:
		if {_type} is "main":
			mj_shop_menu({_player})
		else if {_type} is "product":
			mj_shop_menu_product({_player}, {_source}, {_page}, {_return})
		stop
	stop
# ---------------------------------------------------------------------------------------------------------------------
# APIxMJ - Menu Main
# =====================================================================================================================
# APIxMJ - Menu Product
# ---------------------------------------------------------------------------------------------------------------------
function mj_shop_menu_product(player: player, source: text, page: number=1, return: boolean=false):
	if {_page} >= 2:
		set {_title} to mj_editfiles_gettext("shop", "data.other.page", {_player}, "%{_page}%")
	else:
		set {_name} to mj_editfiles_gettext("shop", "data.index.category.%{_source}%.name", {_player})
		set {_title} to mj_editfiles_gettext("shop", "data.product.title", {_player}, {_name})
	mj_core_gui_generator({_player}, 6, true, "default", {_title}, "shop")
	set {_list::*} to mj_manager_nodes("shop.data_%{_source}%")
	loop {_list::*}:
		set {_value} to loop-value
		set {_check} to mj_editfiles_boolean("shop.data_%{_source}%", "data.%{_value}%.visible")
		if {_check} is true:
			mj_shop_menu_product_button({_player}, {_source}, {_value}, {_page}, {_return})
		else if {_player} has permission "*" or "mj.*" or "mj.shop.*" or "mj.shop.admin":
			mj_shop_menu_product_button({_player}, {_source}, {_value}, {_page}, {_return})
	if {_return} is true:
		mj_shop_menu_return({_player}, "main", 49)
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_shop_menu_product_button(player: player, source: text, id: text, page: number=1, return: boolean=true, mode: boolean=false, slot: number=0, click: boolean=true):
	set {_name} to mj_editfiles_gettext("shop", "data.index.product.%{_id}%.name", {_player})
	if {_mode} is false:
		set {_slot} to mj_editfiles_number("shop.data_%{_source}%", "data.%{_id}%.slot")
	set {_item.1} to mj_manager_item_convert("shop.data_%{_source}%", "data.%{_id}%.item")
	set {_item.2} to mj_shop_menu_product_button_price({_player}, {_source}, {_id}, "buy", {_item.1})
	set {_item.3} to mj_shop_menu_product_button_price({_player}, {_source}, {_id}, "sell", {_item.2})
	set {_item.4} to mj_shop_menu_product_button_admin({_player}, {_source}, {_id}, {_item.3})
	if {_click} is true:
		set {_item.4} to mj_manager_item_button({_player}, {_item.4}, "left_click", "shop", "data.product.click")
		make a gui slot {_slot} of {_player} with {_item.4} named {_name} to run:
			mj_shop_menu_trade({_player}, {_source}, {_id}, {_page}, {_return})
			stop
	else:
		make a gui slot {_slot} of {_player} with {_item.4} named {_name} to run:
			stop
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_shop_menu_product_button_price(player: player, source: text, id: text, type: text, item: item) :: item:
	set {_count} to mj_manager_item_lore_count({_item})
	if {_type} is "sell":
		remove 1 from {_count}
	set {_value.1} to mj_editfiles_number("shop.data_%{_source}%", "data.%{_id}%.%{_type}%.price")
	if {_value.1} isn't 0:
		set {_value.2} to mj_core_money_viewer({_value.1})
		set {_lore} to mj_editfiles_gettext("shop", "data.%{_type}%.price", {_player}, {_value.2})
		set line {_count} of lore of {_item} to {_lore}
	return {_item}
# ---------------------------------------------------------------------------------------------------------------------
function mj_shop_menu_product_button_admin(player: player, source: text, id: text, item: item) :: item:
	if {_player} has permission "*" or "mj.*" or "mj.shop.*" or "mj.shop.admin":
		set {_count} to mj_manager_item_lore_count({_item})
		set {_data} to mj_editfiles_gettext("shop", "data.admin_info.title", {_player})
		set line {_count} of lore of {_item} to {_data}
		add 1 to {_count}
		set {_value.1} to mj_editfiles_boolean("shop.data_%{_source}%", "data.%{_id}%.visible")
		set {_value.2} to mj_editfiles_gettext("manager", "data.type.hide", {_player})
		if {_value.1} is true:
			set {_value.2} to mj_editfiles_gettext("manager", "data.type.show", {_player})
		set {_lore} to mj_editfiles_gettext("shop", "data.admin_info.visible", {_player}, "%{_value.2}%")
		set line {_count} of lore of {_item} to {_lore}
		set {_qnt} to mj_editfiles_number("shop.data_%{_source}%", "data.%{_id}%.buy.interact")
		set {_lore} to mj_editfiles_gettext("shop", "data.buy.interact", {_player}, "%{_qnt}%")
		add 1 to {_count}
		set line {_count} of lore of {_item} to {_lore}
		set {_qnt} to mj_editfiles_number("shop.data_%{_source}%", "data.%{_id}%.sell.interact")
		set {_lore} to mj_editfiles_gettext("shop", "data.sell.interact", {_player}, "%{_qnt}%")
		add 1 to {_count}
		set line {_count} of lore of {_item} to {_lore}
	return {_item}
# ---------------------------------------------------------------------------------------------------------------------
# APIxMJ - Menu Product
# =====================================================================================================================
# APIxMJ - Menu Trade
# ---------------------------------------------------------------------------------------------------------------------
function mj_shop_menu_trade(player: player, source: text, id: text, page: number=1, return: boolean=true):
	set {_title} to mj_editfiles_gettext("shop", "data.title.offer")
	mj_core_gui_generator({_player}, 6, true, "default", {_title}, "shop")
	mj_shop_menu_product_button({_player}, {_source}, {_id}, {_page}, false, true, 13, false)
	set {_price.1} to mj_editfiles_number("shop.data_%{_source}%", "data.%{_id}%.buy.price")
	if {_price.1} isn't 0:
		mj_shop_menu_trade_button_buy({_player}, {_source}, {_id}, {_page}, 10, {_price.1}, 1)
		set {_check.1} to mj_editfiles_boolean("shop.data_%{_source}%", "data.%{_id}%.buy.available")
		if {_check.1} is true:
			mj_shop_menu_trade_button_buy({_player}, {_source}, {_id}, {_page}, 11, {_price.1}, 8)
			mj_shop_menu_trade_button_buy({_player}, {_source}, {_id}, {_page}, 19, {_price.1}, 12)
			mj_shop_menu_trade_button_buy({_player}, {_source}, {_id}, {_page}, 20, {_price.1}, 16)
			mj_shop_menu_trade_button_buy({_player}, {_source}, {_id}, {_page}, 28, {_price.1}, 24)
			mj_shop_menu_trade_button_buy({_player}, {_source}, {_id}, {_page}, 29, {_price.1}, 32)
			mj_shop_menu_trade_button_buy({_player}, {_source}, {_id}, {_page}, 37, {_price.1}, 48)
			mj_shop_menu_trade_button_buy({_player}, {_source}, {_id}, {_page}, 38, {_price.1}, 64)
	set {_price.2} to mj_editfiles_number("shop.data_%{_source}%", "data.%{_id}%.sell.price")
	if {_price.2} isn't 0:
		mj_shop_menu_trade_button_sell({_player}, {_source}, {_id}, {_page}, 15, {_price.2}, 1)
		set {_check.2} to mj_editfiles_boolean("shop.data_%{_source}%", "data.%{_id}%.sell.available")
		if {_check.2} is true:
			mj_shop_menu_trade_button_sell({_player}, {_source}, {_id}, {_page}, 16, {_price.2}, 8)
			mj_shop_menu_trade_button_sell({_player}, {_source}, {_id}, {_page}, 24, {_price.2}, 12)
			mj_shop_menu_trade_button_sell({_player}, {_source}, {_id}, {_page}, 25, {_price.2}, 16)
			mj_shop_menu_trade_button_sell({_player}, {_source}, {_id}, {_page}, 33, {_price.2}, 24)
			mj_shop_menu_trade_button_sell({_player}, {_source}, {_id}, {_page}, 34, {_price.2}, 32)
			mj_shop_menu_trade_button_sell({_player}, {_source}, {_id}, {_page}, 42, {_price.2}, 48)
			mj_shop_menu_trade_button_sell({_player}, {_source}, {_id}, {_page}, 43, {_price.2}, 64)
	if {_return} is true:
		mj_shop_menu_return({_player}, "product", 49, {_source}, {_page}, {_return})
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_shop_menu_trade_button_buy(player: player, source: text, id: text, page: number, slot: number, price: number, multiply: number=1):
	set {_item.1} to mj_manager_item_convert("shop.data_%{_source}%", "data.%{_id}%.item")
	set {_price.1} to {_price}*{_multiply}
	set {_view.1} to mj_core_money_viewer({_price.1})
	set {_money} to mj_essentials_money_modify({_player}, "all")
	if {_money} >= {_price.1}:
		set {_quantity.1} to mj_editfiles_number("shop.data_%{_source}%", "data.%{_id}%.quantity")
		set {_quantity.2} to {_quantity.1}
		set {_infinite} to mj_editfiles_boolean("shop.data_%{_source}%", "data.%{_id}%.infinite")
		if {_infinite} is true:
			set {_quantity.2} to 1000
		if {_quantity.2} >= {_multiply}:
			if {_player}'s inventory has space for {_multiply} of {_item.1}:
				set {_item.2} to mj_shop_menu_trade_button_item_offer_generator({_player}, {_source}, {_id}, "buy", {_price}, {_multiply})
				make a gui slot {_slot} of {_player} with {_multiply} of {_item.2} to run:
					mj_essentials_money_system({_player}, {_price.1}, false, "buyed x%{_multiply}% of %{_item}%")
					mj_shop_menu_trade_button_interact({_source}, {_id}, "buy", {_multiply})
					remove {_multiply} from {_quantity.1}
					mj_editfiles_number("shop.data_%{_source}%", "data.%{_id}%.quantity", "modify", {_quantity.1})
					give {_multiply} of {_item.1} to {_player}
					mj_shop_menu_trade({_player}, {_source}, {_id}, {_page})
					stop
			else:
				mj_shop_menu_trade_button_failed({_player}, {_slot}, "inventory_full", "none", {_multiply})
		else:
			mj_shop_menu_trade_button_failed({_player}, {_slot}, "no_quantity", "&a%{_quantity.1}%&6/&a%{_multiply}%", {_multiply})
	else:
		mj_shop_menu_trade_button_failed({_player}, {_slot}, "no_enough", {_view.1}, {_multiply})
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_shop_menu_trade_button_sell(player: player, source: text, id: text, page: number, slot: number, price: number, multiply: number=1):
	set {_name} to mj_editfiles_gettext("shop", "data.index.product.%{_id}%.name", {_player})
	set {_item.1} to mj_manager_item_convert("shop.data_%{_source}%", "data.%{_id}%.item")
	set {_price.1} to {_price}*{_multiply}
	set {_view} to mj_core_money_viewer({_price.1})
	set {_count} to amount of {_item.1} in {_player}'s inventory
	if {_count} >= {_multiply}:
		set {_item.2} to mj_shop_menu_trade_button_item_offer_generator({_player}, {_source}, {_id}, "sell", {_price}, {_multiply})
		make a gui slot {_slot} of {_player} with {_multiply} of {_item.2} to run:
			mj_shop_menu_trade_button_interact({_source}, {_id}, "sell", {_multiply})
			mj_essentials_money_system({_player}, {_price.1}, true, "selled in shop x%{_multiply}% of %{_item.1}%")
			set {_quantity} to mj_editfiles_number("shop.data_%{_source}%", "data.%{_id}%.quantity")
			add {_multiply} to {_quantity}
			mj_editfiles_number("shop.data_%{_source}%", "data.%{_id}%.quantity", "modify", {_quantity})
			remove {_multiply} of {_item.1} from {_player}
			mj_shop_menu_trade({_player}, {_source}, {_id}, {_page})
			stop
	else:
		mj_shop_menu_trade_button_failed({_player}, {_slot}, "no_item", {_view}, {_multiply})
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_shop_menu_trade_button_interact(source: text, id: text, type: text, quantity: number=1):
	set {_count.1} to mj_editfiles_number("shop.data_%{_source}%", "data.%{_id}%.%{_type}%.interact")
	set {_count.2} to {_count.1}+{_quantity}
	mj_editfiles_number("shop.data_%{_source}%", "data.%{_id}%.%{_type}%.interact", "modify", {_count.2})
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_shop_menu_trade_button_item_offer_generator(player: player, source: text, id: text, type: text="buy", price: number, multiply: number=1) :: item:
	set {_name} to mj_editfiles_gettext("shop", "data.index.product.%{_id}%.name", {_player})
	set {_item.1} to mj_manager_item_convert("shop.data_%{_source}%", "data.%{_id}%.item")
	set {_item.2} to mj_shop_menu_trade_button_info({_player}, {_source}, {_id}, {_item.1})
	set {_item.3} to mj_manager_item_button({_player}, {_item.2}, "left_click", "shop", "data.%{_type}%.click")
	set {_price.1} to {_price}*{_multiply}
	set {_view} to mj_core_money_viewer({_price.1})
	if {_type} is "buy":
		set {_price.2} to "-%{_price.1}%" parsed as number
		set {_view} to mj_core_money_viewer({_price.2})
	set {_title} to mj_editfiles_gettext("shop", "data.%{_type}%.name", {_player}, "%{_multiply}%", {_name}, {_view})
	set {_item.4} to {_item.3} named {_title}
	return {_item.4}
# ---------------------------------------------------------------------------------------------------------------------
function mj_shop_menu_trade_button_failed(player: player, slot: number, lore.1: text, value: text, multiply: number=1):
	set {_name} to mj_editfiles_gettext("shop", "data.failed.no_offer", {_player})
	set {_lore.2} to mj_editfiles_gettext("shop", "data.failed.%{_lore.1}%", {_player})
	if {_value} isn't "none":
		set {_lore.2} to mj_editfiles_gettext("shop", "data.failed.%{_lore.1}%", {_player}, {_value})
	set {_item} to barrier named {_name}
	set line 2 of lore of {_item} to {_lore.2}
	make a gui slot {_slot} of {_player} with {_multiply} of {_item} to run:
		stop
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_shop_menu_trade_button_info(player: player, source: text, id: text, item: item) :: item:
	set {_count} to mj_manager_item_lore_count({_item})
	set {_quantity} to mj_editfiles_number("shop.data_%{_source}%", "data.%{_id}%.quantity")
	set {_quantity} to mj_core_number_convert({_quantity})
	set {_infinite} to mj_editfiles_boolean("shop.data_%{_source}%", "data.%{_id}%.infinite")
	if {_infinite} is true:
		set {_quantity} to "∞"
	set {_data} to mj_editfiles_gettext("shop", "data.quantity", {_player}, {_quantity})
	set line {_count} of lore of {_item} to {_data}
	add 1 to {_count}
	set {_money.1} to mj_essentials_money_modify({_player}, "all")
	set {_money.2} to mj_core_money_viewer({_money.1})
	set {_data} to mj_editfiles_gettext("shop", "data.money", {_player}, {_money.2})
	set line {_count} of lore of {_item} to {_data}
	return {_item}
# ---------------------------------------------------------------------------------------------------------------------
# APIxMJ - Menu Trade
# =====================================================================================================================
# APIxMJ - Sell
# ---------------------------------------------------------------------------------------------------------------------
command /sell [<text>]:
	executable by: player
	trigger:
		if player has permission "*" or "mj.*" or "mj.shop.*" or "mj.shop.sell.*" or "mj.shop.sell":
			if arg-1 is "all":
				mj_shop_sell_all(player)
			else:
				mj_shop_sell(player)
		else:
			mj_manager_permission(player, "shop", "data.prefix", "mj.shop.sell")
		stop
# ---------------------------------------------------------------------------------------------------------------------
on tab complete of "/sell":
	set tab completions for position 1 to "all"
	stop
# ---------------------------------------------------------------------------------------------------------------------
on leftclick:
	if player has permission "*" or "mj.*" or "mj.shop.*" or "mj.shop.sell.*" or "mj.shop.sell.stick":
		set {_item} to mj_manager_item_convert("shop.config", "data.sell_item")
		if player's tool is {_item}:
			set {_list::*} to "chest", "eastward chest", "southward chest", "westward chest", "trapped chest", "eastward trapped chest", "southward trapped chest" and "westward trapped chest"
			if {_list::*} contains "%type of event-block%":
				mj_shop_sell_all(player, event-block)
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_shop_sell(player: player):
	set {_value} to {_player}'s tool
	set {_list.1::*} to mj_manager_nodes("shop.data")
	loop {_list.1::*}:
		set {_source} to loop-value-1
		set {_check} to mj_editfiles_boolean("shop.data", "data.%{_source}%.visible")
		if {_check} is true:
			set {_list.2::*} to mj_manager_nodes("shop.data_%{_source}%")
			loop {_list.2::*}:
				set {_id} to loop-value-2
				set {_item} to mj_manager_item_convert("shop.data_%{_source}%", "data.%{_id}%.item")
				if type of {_player}'s tool contains type of {_item}:
					set {_count} to item amount of {_player}'s tool
					set {_sell} to mj_editfiles_number("shop.data_%{_source}%", "data.%{_id}%.sell.price")
					if {_sell} >= 0.01:
						mj_shop_menu_trade_button_interact({_source}, {_value}, "sell", {_multiply})
						set {_price} to {_sell}*{_count}
						clear {_player}'s tool
						mj_essentials_money_system({_player}, {_price}, true, "selled out shop x%{_multiply}% of %{_item}%")
						set {_name} to mj_editfiles_gettext("shop.data_%{_source}%", "data.%{_id}%.name", {_player})
						set {_view} to mj_core_money_viewer({_price})
						mj_manager_message({_player}, "shop", "data.prefix", "shop", "data.sell.success", {_name}, "%{_view}%")
						exit loop
					else:
						mj_manager_message({_player}, "shop", "data.prefix", "shop", "data.failed.no_selling")
						exit loop
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_shop_sell_all(player: player, block: object="none"):
	set {_nosell} to true
	set {_list.1::*} to mj_manager_nodes("shop.data")
	loop {_list.1::*}:
		set {_source} to loop-value-1
		set {_list.2::*} to mj_manager_nodes("shop.data_%{_source}%")
		loop {_list.2::*}:
			set {_id} to loop-value-2
			set {_check} to mj_editfiles_boolean("shop.data_%{_source}%", "data.%{_id}%.visible")
			if {_check} is true:
				set {_item} to mj_manager_item_convert("shop.data_%{_source}%", "data.%{_id}%.item")
				if "%{_block}%" is "none":
					set {_count} to amount of {_item} in {_player}'s inventory
				else:
					set {_count} to amount of {_item} in {_block}'s inventory
				if {_count} >= 1:
					set {_sell} to mj_editfiles_number("shop.data_%{_source}%", "data.%{_id}%.sell.price")
					if {_sell} >= 0.01:
						mj_shop_menu_trade_button_interact({_source}, {_id}, "sell", {_multiply})
						set {_price} to {_sell}*{_count}
						if "%{_block}%" is "none":
							remove {_count} of {_item} from {_player}
						else:
							remove {_count} of {_item} from {_block}'s inventory
						mj_essentials_money_system({_player}, {_price}, true, "selled out shop x%{_multiply}% of %{_item}%")
						set {_name} to mj_editfiles_gettext("shop", "data.index.product.%{_id}%.name", {_player})
						set {_view} to mj_core_money_viewer({_price})
						mj_manager_message({_player}, "shop", "data.prefix", "shop", "data.sell.success", {_name}, "%{_view}%")
						set {_nosell} to false
	if {_nosell} is true:
		mj_manager_message({_player}, "shop", "data.prefix", "shop", "data.failed.no_selling")
	stop
# ---------------------------------------------------------------------------------------------------------------------
# APIxMJ - Sell
# =====================================================================================================================