# =====================================================================================================================
# APIxMJ - Files
# ---------------------------------------------------------------------------------------------------------------------
function mj_files_faction():
	set {_folder} to mj_editfiles("manager.data", "data.addon.gamemodes_faction_main.faction.folder")
	load yaml "plugins/APIxMJ/%{_folder}%/config.yml" as "mj.faction.config"
	load yaml "plugins/APIxMJ/%{_folder}%/data.yml" as "mj.faction.data"
	set {_list::*} to mj_editfiles_list("manager.config", "data.language.list")
	if {_list::*} is set:
		loop {_list::*}:
			load yaml "plugins/APIxMJ/%{_folder}%/language/%loop-value%.yml" as "mj.faction.language.%loop-value%"
			load yaml "plugins/APIxMJ/%{_folder}%/help/%loop-value%.yml" as "mj.faction.help.%loop-value%"
	stop
# ---------------------------------------------------------------------------------------------------------------------
on load:
	set {_list::*} to mj_manager_skript_list()
	if {_list::*} contains "apixmj_manager.sk" and "apixmj.sk" and "apixmj_essentials.sk":
		send "[APIxMJ] Loading faction..." to console
		mj_files_faction()
		mj_editfiles("manager.data", "data.addon.gamemodes_faction_main.faction.version", "modify", "2023.05.05.0001")
	else:
		broadcast "[APIxMJ] Script loading cancel It requires (apixmj_manager.sk, apixmj.sk and apixmj_essentials.sk)"
		unload script file "apixmj_faction.sk"
	stop
# ---------------------------------------------------------------------------------------------------------------------
on skript stop:
	rename file "plugins/Skript/scripts/apixmj_faction.sk" to "-apixmj_faction.sk"
	send "[APIxMJ] Unloading faction.."
	stop
# ---------------------------------------------------------------------------------------------------------------------
# APIxMJ - Files
# =====================================================================================================================
# APIxMJ - Command
# ---------------------------------------------------------------------------------------------------------------------
command /faction [<text>] [<text>]:
	aliases: fac, f
	executable by: player
	trigger:
		if player has permission "*" or "mj.*" or "mj.faction.*" or "mj.faction":
			if arg-1 is set:
				if arg-1 is "create" or "rename" or "description" or "desc" or "permission":
					if arg-2 is set:
						if arg-1 is "create":
							mj_faction_create(player, arg-2)
						else if arg-1 is "rename":
							mj_faction_rename(player, arg-2)
						else if arg-1 is "description" or "desc":
							mj_faction_description(player, arg-2)
						else:
							mj_faction_permission(player, arg-2)
					else:
						mj_manager_message(player, "faction", "data.prefix", "manager", "data.argument.name")
				else if arg-1 is "disband" or "delete":
					if arg-2 is set:
						if arg-2 is "confirm":
							mj_faction_delete_confirm(player)
						else:
							mj_manager_message(player, "faction", "data.prefix", "faction", "data.disband_confirm")
					else:
						mj_faction_delete_request(player)
				else if arg-1 is "list" or "power" or "join" or "refuse" or "claim" or "unclaim" or "unclaimall" or "chat" or "sethome" or "home" or "map":
					if arg-1 is "list":
						mj_faction_list(player)
					else if arg-1 is "power":
						mj_faction_power(player)
					else if arg-1 is "join":
						mj_faction_guest_join(player)
					else if arg-1 is "refuse":
						mj_faction_guest_refuse(player)
					else if arg-1 is "claim":
						mj_faction_claim(player)
					else if arg-1 is "unclaim":
						mj_faction_unclaim(player)
					else if arg-1 is "unclaimall":
						mj_faction_unclaim_all(player)
					else if arg-1 is "chat":
						mj_faction_chat(player)
					else if arg-1 is "sethome":
						mj_faction_home_define(player)
					else if arg-1 is "home":
						mj_faction_home_tp(player)
					else:
						mj_faction_map(player)
				else if arg-1 is "info" or "f":
					if arg-2 is set:
						mj_faction_info_inspect(player, arg-2)
					else:
						set {_id} to mj_editfiles("userdata", "data.%player's uuid%.faction.guild")
						if {_id} is set:
							mj_faction_info(player, {_id})
						else:
							mj_manager_message(player, "faction", "data.prefix", "faction", "data.request.guild_lost")
				else if arg-1 is "invite" or "leader" or "promote" or "demote" or "kick":
					if arg-2 is set:
						set {_target} to arg-2 parsed as offlineplayer
						if arg-1 is "invite":
							mj_faction_guest_invite(player, {_target})
						else if arg-1 is "leader":
							mj_faction_leader(player, {_target})
						else if arg-1 is "promote" or "demote":
							mj_faction_rank(player, {_target}, arg-1)
						else:
							mj_faction_kick(player, {_target})
					else:
						mj_manager_message(player, "core", "data.prefix", "manager", "data.argument.player")
				else if arg-1 is "leave":
					if arg-2 is set:
						if arg-2 is "confirm":
							mj_faction_leave_confirm(player)
						else:
							mj_manager_message(player, "faction", "data.prefix", "faction", "data.leave_cancel")
					else:
						mj_faction_leave_request(player)
				else if arg-1 is "neutral" or "ally" or "enemy":
					if arg-2 is set:
						mj_faction_alliance(player, arg-2, arg-1)
					else:
						mj_manager_message(player, "core", "data.prefix", "manager", "data.argument.name")
				else if arg-1 is "request":
					if arg-2 is "accept" or "refuse":
						mj_faction_alliance_request(player, "none", arg-2)
					else:
						mj_manager_message(player, "faction", "data.prefix", "manager", "data.argument.boolean", "accept", "refuse")
				else if arg-1 is "deposit" or "withdraw":
					set {_list::*} to regex replace all "[^0-9-.]" with "" in arg-2
					set {_value} to "%{_list::*}%" parsed as number
					mj_faction_money(player, arg-1, {_value})
				else:
					mj_manager_message(player, "faction", "data.prefix", "manager", "data.argument.name")
			else:
				mj_manager_message(player, "faction", "data.prefix", "manager", "data.argument.name")
		else:
			mj_manager_permission(player, "faction", "data.prefix", "mj.faction")
		stop
# ---------------------------------------------------------------------------------------------------------------------
on tab complete of "/faction" or "/f":
	if player has permission "*" or "mj.*" or "mj.faction.*" or "mj.faction":
		set {_player::*} to all players
		set {_guild::*} to mj_core_id_converter("faction.data", "data.guild")
		set {_id1} to mj_editfiles("userdata", "data.%player's uuid%.source.faction.guild")
		set {_list2::*} to mj_manager_nodes("userdata")
		loop {_list2::*}:
			set {_target} to loop-value parsed as offlineplayer
			set {_id2} to mj_editfiles("userdata", "data.%{_target}'s uuid%.source.faction.guild")
			if {_id1} is {_id2}:
				add {_target} to {_list3::*}
		set {_list4::*} to "create", "rename", "description", "desc", "disband", "delete", "list", "info", "f", "invite", "kick", "leader", "promote", "demote" and "chat"
		set {_list5::*} to "join", "refuse", "leave", "neutral", "ally", "enemy", "claim", "unclaim","unclaimall", "chat", "permission", "map", "deposit" and "withdraw"
		add {_list4::*} to {_list5::*}
		set tab completions for position 1 to {_list5::*}
		if tab arg-1 is "info" or "f":
			add {_player::*} to {_guild::*}
			set tab completions for position 2 to {_guild::*}
		if tab arg-1 is "invite":
			set tab completions for position 2 to {_player::*}
		if tab arg-1 is "leave":
			set tab completions for position 2 to "confirm"
		if tab arg-1 is "permission":
			set tab completions for position 2 to "friendly_fire" #"mobspawning", "allyaccess" and 
		if tab arg-1 is "leader" or "kick" or "promote" or "demote":
			set tab completions for position 2 to {_list3::*}
		if tab arg-1 is "neutral" or "ally" or "enemy":
			set tab completions for position 2 to {_guild::*}
		if tab arg-1 is "deposit" or "withdraw":
			if tab arg-1 is "deposit":
				set {_value} to mj_essentials_money_modify(player, "all")
			else:
				set {_value} to mj_faction_money_modify(player)
			set tab completions for position 2 to {_value}
	stop
# ---------------------------------------------------------------------------------------------------------------------
# APIxMJ - Command
# =====================================================================================================================
# APIxMJ - Gestion
# ---------------------------------------------------------------------------------------------------------------------
on join:
	if event-entity is player:
		mj_faction_data_player(player)
	stop
# ---------------------------------------------------------------------------------------------------------------------
every 1 hour:
	loop all players:
		mj_faction_power_modify(loop-player, true)
	stop
# ---------------------------------------------------------------------------------------------------------------------
on death:
	if victim is player:
		if "%region at victim%" doesn't contain "pvp":
			mj_faction_power_modify(victim)
	stop
# ---------------------------------------------------------------------------------------------------------------------
on chat:
	set {_check1} to mj_editfiles_boolean("config", "data.custom_chat")
	if {_check1} is true:
		set {_check2} to mj_editfiles("config", "data.chat_priority")
		if {_check2} is "faction":
			set {_check3} to mj_editfiles_boolean("userdata.%player's uuid%", "data.temp.mute")
			if {_check3} is false:
				set {_rank} to mj_ranker(player)
				set {_send} to mj_editfiles("essentials.config", "data.format.chat")
				set {_id} to mj_editfiles("userdata", "data.%player's uuid%.source.faction.guild")
				if {_id} is set:
					set {_send} to mj_editfiles("faction.config", "data.format.chat")
					set {_name} to mj_editfiles("faction.data", "data.%{_id}%.name")
					set {_rank} to mj_ranker(player, "tab")
				set {_mode} to mj_editfiles_boolean("userdata.%player's uuid%", "data.source.faction.chat")
				if {_mode} is true:
					set {_send} to mj_editfiles("faction.config", "data.format.message")
					replace "$0" with "%{_name}%" in {_send}
					replace "$1" with "%player%" in {_send}
					replace "$2" with message in {_send}
					loop all players:
						set {_check4} to mj_editfiles("userdata", "data.%loop-player's uuid%.source.faction.guild")
						if {_check4} is {_id}:
							send "%{_send}%" to loop-player
				else:
					set {_message} to mj_essentials_notification(message)
					replace "$0" with "%{_rank}%" in {_send}
					replace "$1" with "%player%" in {_send}
					replace "$2" with "%{_message}%" in {_send}
					replace "$3" with "%{_name}%" in {_send}
					mj_core_chat(player, {_send})
	stop
# ---------------------------------------------------------------------------------------------------------------------
on click:
	set {_owner} to mj_editfiles("faction.data", "data.claim.%chunk at event-block%.owner")
	set {_id} to mj_editfiles("userdata", "data.%player's uuid%.source.faction.guild")
	set {_list::*} to mj_editfiles_list("faction.data", "data.guild.%{_id}%.ally")
	if player has permission "*" or "mj.*" or "mj.faction.*" or "mj.faction.bypass":
		stop
	set {_mode} to false
	if {_owner} is set:
		if {_list::*} contains {_owner}:
			set {_check} to mj_editfiles_boolean("faction.data", "data.claim.%chunk at player%.permission.ally_access")
			if {_check} is false:
				set {_mode} to true
		else if {_id} is {_owner}:
			set {_mode} to false
		else:
			set {_mode} to true
	if {_mode} is true:
		cancel event
	else:
		stop
	stop
# ---------------------------------------------------------------------------------------------------------------------
on place:
	set {_owner} to mj_editfiles("faction.data", "data.claim.%chunk at event-block%.owner")
	set {_id} to mj_editfiles("userdata", "data.%player's uuid%.source.faction.guild")
	set {_list::*} to mj_editfiles_list("faction.data", "data.guild.%{_id}%.ally")
	if player has permission "*" or "mj.*" or "mj.faction.*" or "mj.faction.bypass":
		stop
	set {_mode} to false
	if {_owner} is set:
		if {_list::*} contains {_owner}:
			set {_check} to mj_editfiles_boolean("faction.data", "data.claim.%chunk at player%.permission.ally_access")
			if {_check} is false:
				set {_mode} to true
		else if {_id} is {_owner}:
			set {_mode} to false
		else:
			set {_mode} to true
	if {_mode} is true:
		cancel event
	else:
		stop
	stop
# ---------------------------------------------------------------------------------------------------------------------
on damage:
	if victim is player:
		if attacker is a player:
			set {_id1} to mj_editfiles("userdata", "data.%victim's uuid%.source.faction.guild")
			set {_id2} to mj_editfiles("userdata", "data.%attacker's uuid%.source.faction.guild")
			set {_list1::*} to mj_editfiles_list("faction.data", "data.guild.%{_id1}%.ally")
			set {_list2::*} to mj_editfiles_list("faction.data", "data.guild.%{_id1}%.enemy")
			set {_owner} to mj_editfiles("faction.data", "data.claim.%chunk at victim%.owner")
			set {_pvp} to mj_editfiles_boolean("faction.data", "data.guild.%{_id1}%.permission.friendly_fire")
			if attacker has permission "*" or "mj.*" or "mj.faction.*" or "mj.faction.bypass":
				stop
			set {_mode} to false
			if {_list1::*} contains {_id2}:
				if "%region at victim%" is "%region at attacker%":
					if "%region at victim%" doesn't contain "pvp" or "warzone":
						if "%region at attacker%" doesn't contain "pvp" or "warzone":
							set {_mode} to true
			else if {_list2::*} contains {_id2}:
				set {_mode} to false
			else if {_id1} is {_owner}:
				set {_mode} to true
			else if {_id1} is {_id2}:
				if "%region at victim%" isn't set:
					if "%region at victim%" is "%region at attacker%":
						if "%region at victim%" doesn't contain "pvp" or "warzone":
							if "%region at attacker%" doesn't contain "pvp" or "warzone":
								set {_mode} to true
				if {_pvp} is true:
					set {_mode} to true
				else:
					set {_mode} to false
		if {_mode} is true:
			cancel event
		else:
			stop
	stop
# ---------------------------------------------------------------------------------------------------------------------
every 3 seconds:
	set {_check} to mj_editfiles_boolean("faction.config", "data.claim_indicator")
	if {_check} is true:
		loop all players:
			mj_faction_claim_info(loop-player)
	stop
# ---------------------------------------------------------------------------------------------------------------------
on load:
	set {_data} to now formatted with "dd-MM"
	set {_check} to mj_editfiles("temp", "data.faction.date")
	if {_check} isn't {_data}:
		mj_editfiles("temp", "data.faction.date", "modify", {_data})
		set {_list::*} to mj_manager_nodes("userdata")
		set {_now1} to now
		loop 29 times:
			subtract a day from {_now1}
		loop {_list::*}:
			set {_date} to mj_editfiles_date("userdata", "data.%loop-value%.connect.last")
			if {_date} < {_now1}:
				set {_id} to mj_editfiles("userdata", "data.%loop-value%.source.faction.guild")
				if {_id} isn't "none":
					set {_player} to mj_editfiles("userdata", "data.%loop-value%.pseudo")
					set {_guild} to mj_editfiles("userdata", "data.guild.%{_id}%.name")
					mj_editfiles("userdata", "data.%loop-value%.source.faction.guild", "modify", "none")
					mj_editfiles("userdata", "data.%loop-value%.source.faction.rank", "modify", "free")
					mj_core_logger(2, "%{_player}% was expelled from the faction %{_guild}%")
	stop
# ---------------------------------------------------------------------------------------------------------------------
# APIxMJ - Gestion
# =====================================================================================================================
# APIxMJ - Data
# ---------------------------------------------------------------------------------------------------------------------
function mj_faction_data_player(player: offlineplayer):
	set {_check1} to yaml value "data.%{_player}'s uuid%.profil" from "mj.userdata"
	if {_check1} is set:
		load yaml "plugins/APIxMJ/%{_folder}%/userdata/%{_player}'s uuid%\%{_check1}%.yml" as "mj.userdata.%{_player}'s uuid%.%{_check1}%"
	set {_check2} to yaml value "data.%{_player}'s uuid%.source.faction" from "mj.userdata"
	if {_check2} isn't set:
		wait 3 seconds
		set {_power} to mj_editfiles_number("faction.config", "data.max_power")
		set yaml value "data.%{_player}'s uuid%.source.faction.guild" from "mj.userdata" to "none"
		set yaml value "data.%{_player}'s uuid%.source.faction.rank" from "mj.userdata" to "free"
		set yaml value "data.%{_player}'s uuid%.source.faction.power" from "mj.userdata" to {_power}
		save yaml "mj.userdata"
		mj_core_logger(1, "%{_player}% faction data file was generated..")
	set {_check3} to yaml value "data.source.faction" from "mj.userdata.%{_player}'s uuid%.%{_check1}%"
	if {_check3} isn't set:
		wait 3 seconds
		set yaml value "data.source.faction.chat" from "mj.userdata.%{_player}'s uuid%.%{_check1}%" to false
		save yaml "mj.userdata.%{_player}'s uuid%.%{_check1}%"
		mj_core_logger(1, "%{_player}% faction data was generated..")
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_faction_data_claim(player: player):
	set {_id} to mj_editfiles("userdata", "data.%{_player}'s uuid%.source.faction.guild")
	mj_editfiles("faction.data", "data.claim.%chunk at {_player}%.owner", "modify", {_id})
	mj_editfiles_number("faction.data", "data.claim.%chunk at {_player}%.price", "modify", 0)
	mj_editfiles_boolean("faction.data", "data.claim.%chunk at {_player}%.permission.mob_spawning", "modify", true)
	mj_editfiles_boolean("faction.data", "data.claim.%chunk at {_player}%.permission.ally_access", "modify", false)
	mj_manager_message({_player}, "faction", "data.prefix", "faction", "data.claim.success")
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_faction_data_guild(name: text, id: text="none"):
	if {_id} is "none":
		set {_id} to mj_core_id_generator()
	set yaml value "data.guild.%{_id}%.name" from "mj.faction.data" to {_name}
	set {_desc} to mj_editfiles_gettext("faction", "data.create.description")
	set yaml value "data.guild.%{_id}%.description" from "mj.faction.data" to {_desc}
	set yaml value "data.guild.%{_id}%.date" from "mj.faction.data" to now
	set yaml value "data.guild.%{_id}%.point" from "mj.faction.data" to 0
	set yaml value "data.guild.%{_id}%.money.value" from "mj.faction.data" to 0
	set yaml value "data.guild.%{_id}%.money.bypass" from "mj.faction.data" to false
	set yaml value "data.guild.%{_id}%.upgrade.player_slot" from "mj.faction.data" to 0
	set yaml value "data.guild.%{_id}%.upgrade.money" from "mj.faction.data" to 0
	set yaml value "data.guild.%{_id}%.permission.friendly_fire" from "mj.faction.data" to true
	set yaml value "data.guild.%{_id}%.alliance.ally" from "mj.faction.data" to ""
	set yaml value "data.guild.%{_id}%.alliance.enemy" from "mj.faction.data" to ""
	set yaml value "data.guild.%{_id}%.extension" from "mj.faction.data" to "none"
	set yaml value "data.guild.%{_id}%.home" from "mj.faction.data" to ""
	save yaml "mj.faction.data"
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_faction_data_check_name(target: text) :: boolean:
	set {_result} to true
	set {_list::*} to mj_manager_nodes("faction.data", "data.guild")
	loop {_list::*}:
		set {_value} to mj_editfiles("faction.data", "data.guild.%loop-value%.name")
		if {_target} is {_value}:
			set {_result} to false
			exit loop
	return {_result}
# ---------------------------------------------------------------------------------------------------------------------
function mj_faction_data_check_id(target: text) :: text:
	set {_list::*} to mj_manager_nodes("faction.data", "data.guild")
	loop {_list::*}:
		set {_value} to mj_editfiles("faction.data", "data.guild.%loop-value%.name")
		if {_target} is {_value}:
			set {_result} to loop-value
			exit loop
		else:
			set {_result} to "none"
	return {_result}
# ---------------------------------------------------------------------------------------------------------------------
function mj_faction_count_power(id: text, type: boolean=false) :: number:
	set {_power} to mj_editfiles_number("faction.config", "data.max_power")
	set {_count1} to 0
	set {_count2} to 0
	set {_list::*} to mj_manager_nodes("userdata")
	loop {_list::*}:
		set {_value1} to mj_editfiles("userdata", "data.%loop-value%.source.faction.guild")
		if {_value1} is {_id}:
			set {_value2} to mj_editfiles_number("userdata", "data.%loop-value%.source.faction.power")
			add {_value2} to {_count1}
			add {_power} to {_count2}
	set {_result} to {_count1}
	if {_type} is true:
		set {_result} to {_count2}
	return {_result}
# ---------------------------------------------------------------------------------------------------------------------
function mj_faction_count_claim(id: text) :: number:
	set {_count} to 0
	set {_list::*} to mj_manager_nodes("faction.data", "data.claim")
	loop {_list::*}:
		set {_value} to mj_editfiles("faction.data", "data.claim.%loop-value%.owner")
		if {_value} is {_id}:
			add 1 to {_count}
	return {_count}
# ---------------------------------------------------------------------------------------------------------------------
# APIxMJ - Data
# =====================================================================================================================
# APIxMJ - Create ✓
# ---------------------------------------------------------------------------------------------------------------------
function mj_faction_create(player: player, value: text):
	set {_limit} to mj_editfiles_number("faction.config", "data.create.character_limit")
	set {_name} to mj_core_converter_name({_value})
	if length of {_name} >= 3:
		if length of {_name} <= {_limit}:
			set {_price} to mj_editfiles_number("faction.config", "data.create.price")
			set {_money} to mj_essentials_money_modify({_player}, "all")
			if {_money} >= {_price}:
				mj_faction_create_result({_player}, {_name})
			else:
				set {_view} to mj_core_format_money(false, {_price})
				mj_manager_message({_player}, "faction", "data.prefix", "essentials", "data.money.no_enough", {_view})
		else:
			mj_manager_message({_player}, "faction", "data.prefix", "faction", "data.create.character_limit", "%{_limit}%")
	else:
		mj_manager_message({_player}, "faction", "data.prefix", "faction", "data.create.character_limit", "%{_limit}%")
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_faction_create_result(player: player, value: text):
	set {_rank} to mj_editfiles("userdata", "data.%{_player}'s uuid%.source.faction.rank")
	if {_rank} is "free":
		set {_check} to mj_faction_data_check_name({_value})
		if {_check} is true:
			set {_id} to mj_core_id_generator()
			mj_faction_data_guild({_value}, {_id})
			set {_price} to mj_editfiles_number("faction.config", "data.create.price")
			mj_essentials_money_system({_player}, {_price}, false, "Create new guild named %{_value}%")
			mj_editfiles("userdata", "data.%{_player}'s uuid%.source.faction.guild", "modify", {_id})
			mj_editfiles("userdata", "data.%{_player}'s uuid%.source.faction.rank", "modify", "leader")
			mj_manager_message({_player}, "faction", "data.prefix", "faction", "data.create.success", {_value})
			loop all players:
				mj_manager_message(loop-player, "faction", "data.prefix", "faction", "data.create.broadcast", "%{_player}%", {_value})
		else:
			mj_manager_message({_player}, "faction", "data.prefix", "faction", "data.create.is_created")
	else:
		mj_manager_message({_player}, "faction", "data.prefix", "faction", "data.create.no_free")
	stop
# ---------------------------------------------------------------------------------------------------------------------
# APIxMJ - Create
# =====================================================================================================================
# APIxMJ - Rename ✓
# ---------------------------------------------------------------------------------------------------------------------
function mj_faction_rename(player: player, name: text):
	set {_limit} to mj_editfiles_number("faction.config", "data.create.character_limit")
	if length of {_name} >= 3:
		if length of {_name} <= {_limit}:
			set {_rank} to mj_editfiles("userdata", "data.%{_player}'s uuid%.source.faction.rank")
			if {_rank} is "leader":
				set {_id} to mj_editfiles("userdata", "data.%{_player}'s uuid%.source.faction.guild")
				set {_name} to mj_core_converter_name({_value})
				set {_check} to mj_faction_data_check_name({_name})
				if {_check} is true:
					mj_editfiles("faction.data", "data.guild.%{_id}%.name", "modify", {_name})
					mj_manager_message({_player}, "faction", "data.prefix", "faction", "data.rename.success", {_name})
				else:
					mj_manager_message({_player}, "faction", "data.prefix", "faction", "data.rename.error")
			else:
				mj_manager_message({_player}, "faction", "data.prefix", "faction", "data.request.rank_leader")
		else:
			mj_manager_message({_player}, "faction", "data.prefix", "faction", "data.create.character_limit", "%{_limit}%")
	else:
		mj_manager_message({_player}, "faction", "data.prefix", "faction", "data.create.character_limit", "%{_limit}%")
	stop
# ---------------------------------------------------------------------------------------------------------------------
# APIxMJ - Rename
# =====================================================================================================================
# APIxMJ - Description ✓
# ---------------------------------------------------------------------------------------------------------------------
function mj_faction_description(player: player, name: text):
	if length of {_name} >= 3:
		if length of {_name} <= 64:
			set {_rank} to mj_editfiles("userdata", "data.%{_player}'s uuid%.source.faction.rank")
			if {_rank} is "leader" or "officer":
				set {_id} to mj_editfiles("userdata", "data.%{_player}'s uuid%.source.faction.guild")
				set {_name} to uncolored {_name}
				mj_editfiles("faction.data", "data.guild.%{_id}%.description", "modify", {_name})
				mj_manager_message({_player}, "faction", "data.prefix", "faction", "data.description", {_name})
			else:
				mj_manager_message({_player}, "faction", "data.prefix", "faction", "data.request.rank_officer")
		else:
			mj_manager_message({_player}, "faction", "data.prefix", "faction", "data.create.character_limit", "64")
	else:
		mj_manager_message({_player}, "faction", "data.prefix", "faction", "data.create.character_limit", "64")
	stop
# ---------------------------------------------------------------------------------------------------------------------
# APIxMJ - Description
# =====================================================================================================================
# APIxMJ - List ✓
# ---------------------------------------------------------------------------------------------------------------------
function mj_faction_list(player: player):
	set {_list1::*} to mj_manager_nodes("faction.data", "data.guild")
	loop {_list1::*}:
		set {_name} to mj_editfiles("faction.data", "data.guild.%loop-value%.name")
		add {_name} to {_list2::*}
	if {_list2::*} isn't set:
		set {_empty} to mj_editfiles_gettext("faction", "data.none", {_player})
		add {_empty} to {_list2::*}
	mj_manager_message({_player}, "faction", "data.prefix", "faction", "data.list", "%{_list2::*}%")
	stop
# ---------------------------------------------------------------------------------------------------------------------
# APIxMJ - List
# =====================================================================================================================
# APIxMJ - Delete ✗
# ---------------------------------------------------------------------------------------------------------------------
function mj_faction_delete_request(player: player):
	set {_rank} to mj_editfiles("userdata", "data.%{_player}'s uuid%.source.faction.rank")
	if {_rank} is "leader":
		set {_id} to mj_editfiles("userdata", "data.%{_player}'s uuid%.source.faction.guild")
		set {_name} to mj_editfiles("faction.data", "data.guild.%{_id}%.name")
		mj_manager_message({_player}, "faction", "data.prefix", "faction", "data.delete.request", {_name})
		mj_core_request({_player}, "faction", "data.prefix", "/faction delete confirm", "/faction delete cancel")
	else:
		mj_manager_message({_player}, "faction", "data.prefix", "faction", "data.request.rank_leader")
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_faction_delete_confirm(player: player):
	set {_rank} to mj_editfiles("userdata", "data.%{_player}'s uuid%.source.faction.rank")
	if {_rank} is "leader":
		set {_id} to mj_editfiles("userdata", "data.%{_player}'s uuid%.source.faction.guild")
		set {_name} to mj_editfiles("faction.data", "data.guild.%{_id}%.name")
		mj_faction_delete({_id})
		mj_manager_message({_player}, "faction", "data.prefix", "faction", "data.delete.success", {_name})
	else:
		mj_manager_message({_player}, "faction", "data.prefix", "faction", "data.request.rank_leader")
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_faction_delete(id: text):
	set {_list1::*} to mj_manager_nodes("userdata")
	loop {_list1::*}:
		set {_value1} to loop-value parsed as offlineplayer
		set {_id1} to mj_editfiles("userdata", "data.%{_value1}'s uuid%.source.faction.guild")
		if {_id1} is {_id}:
			mj_editfiles("userdata", "data.%{_value1}'s uuid%.source.faction.guild", "modify", "none")
			mj_editfiles("userdata", "data.%{_value1}'s uuid%.source.faction.rank", "modify", "free")
			if {_value1} is online:
				mj_manager_message({_value1}, "faction", "data.prefix", "faction", "data.free_player")
	set {_list2::*} to mj_manager_nodes("faction.data", "data.claim")
	loop {_list2::*}:
		set {_value2} to mj_editfiles("faction.data", "data.claim.%loop-value%.owner")
		if {_value2} is {_id}:
			delete yaml value "data.claim.%loop-value%" from "mj.faction.data"
	save yaml "mj.faction.data"
	set {_list3::*} to mj_manager_nodes("faction.data", "data.guild")
	loop {_list3::*}:
		if {_id} isn't loop-value:
			mj_faction_alliance_change("neutral", {_id}, loop-value)
	mj_editfiles("faction.data", "data.guild.%{_id}%", "delete")
	stop
# ---------------------------------------------------------------------------------------------------------------------
# APIxMJ - Delete
# =====================================================================================================================
# APIxMJ - Power ✓
# ---------------------------------------------------------------------------------------------------------------------
function mj_faction_power(player: player):
	set {_power1} to mj_editfiles_number("userdata", "data.%{_player}'s uuid%.source.faction.power")
	set {_max} to mj_editfiles_number("faction.config", "data.max_power")
	mj_manager_message({_player}, "faction", "data.prefix", "faction", "data.power.view", "%{_power1}%", "%{_max}%")
	# other member in the faction
	set {_guild1} to mj_editfiles("userdata", "data.%{_player}'s uuid%.source.faction.guild")
	if {_guild1} isn't "none":
		send "" to {_player}
		set {_list::*} to mj_manager_nodes("userdata")
		loop {_list::*}:
			set {_target} to loop-value parsed as offlineplayer
			if {_target} isn't {_player}:
				set {_guild2} to mj_editfiles("userdata", "data.%{_target}'s uuid%.source.faction.guild")
				if {_guild2} is {_guild1}:
					set {_power2} to mj_editfiles_number("userdata", "data.%{_target}'s uuid%.source.faction.power")
					mj_manager_message({_player}, "faction", "data.prefix", "faction", "data.power.view_other", "%{_target}%", "%{_power2}%", "%{_max}%")
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_faction_power_modify(player: player, mode: boolean=false):
	set {_power} to mj_editfiles_number("userdata", "data.%{_player}'s uuid%.source.faction.power")
	set {_max} to mj_editfiles_number("faction.config", "data.max_power")
	if {_mode} is true:
		if {_power} <= {_max}-1:
			add 1 to {_power}
			mj_editfiles_number("userdata", "data.%{_player}'s uuid%.source.faction.power", "modify", {_power})
	else:
		if {_power} >= 1:
			remove 1 from {_power}
			mj_editfiles_number("userdata", "data.%{_player}'s uuid%.source.faction.power", "modify", {_power})
	stop
# ---------------------------------------------------------------------------------------------------------------------
# APIxMJ - Power
# =====================================================================================================================
# APIxMJ - Info ✓
# ---------------------------------------------------------------------------------------------------------------------
function mj_faction_info_inspect(player: player, target: text):
	set {_check} to {_target} parsed as offlineplayer
	set {_list1::*} to mj_manager_nodes("userdata")
	set {_list2::*} to mj_manager_nodes("faction.data", "data.guild")
	set {_skip} to false
	loop {_list1::*}:
		if {_check}'s uuid is loop-value:
			set {_id} to mj_editfiles("userdata", "data.%{_check}'s uuid%.source.faction.guild")
			set {_skip} to true
			exit loop
		else:
			set {_id} to "none"
	if {_skip} is false:
		loop {_list2::*}:
			set {_id} to loop-value
			set {_value} to mj_editfiles("faction.data", "data.guild.%{_id}%.name")
			if {_value} is {_target}:
				exit loop
			else:
				set {_id} to "none"
	mj_faction_info({_player}, {_id})
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_faction_info(player: player, id: text):
	if {_id} isn't "none":
		set {_name} to mj_editfiles("faction.data", "data.guild.%{_id}%.name")
		set {_desc} to mj_editfiles("faction.data", "data.guild.%{_id}%.description")
		set {_date} to mj_editfiles_date("faction.data", "data.guild.%{_id}%.date")
		set {_point} to 0
		set {_claim} to mj_faction_count_claim({_id})
		set {_power} to 0
		set {_maxpower} to 0
		set {_ally1::*} to mj_editfiles_list("faction.data", "data.guild.%{_id}%.ally")
		if {_ally1::*} is set:
			loop {_ally1::*}:
				set {_value5} to mj_editfiles("faction.data", "data.guild.%loop-value%.name")
				add {_value5} to {_ally::*}
		else:
			set {_ally::*} to mj_editfiles_gettext("faction", "data.none", {_player})
		set {_enemy1::*} to mj_editfiles_list("faction.data", "data.guild.%{_id}%.enemy")
		if {_enemy1::*} is set:
			loop {_enemy1::*}:
				set {_value5} to mj_editfiles("faction.data", "data.guild.%loop-value%.name")
				add {_value5} to {_enemy::*}
		else:
			set {_enemy::*} to mj_editfiles_gettext("faction", "data.none", {_player})
		set {_player::*} to mj_manager_nodes("userdata")
		loop {_player::*}:
			set {_value1} to loop-value parsed as offlineplayer
			delete {_value2}
			set {_value2} to mj_editfiles("userdata", "data.%{_value1}'s uuid%.source.faction.guild")
			if {_value2} is {_id}:
				set {_value3} to mj_editfiles_number("userdata", "data.%{_value1}'s uuid%.source.faction.power")
				add {_value3} to {_power}
				set {_max} to mj_editfiles_number("faction.config", "data.max_power")
				add {_max} to {_maxpower}
				set {_rank} to mj_editfiles("userdata", "data.%{_value1}'s uuid%.source.faction.rank")
				if {_rank} is "leader":
					set {_value4} to "**%{_value1}%"
				else if {_rank} is "officer":
					set {_value4} to "*%{_value1}%"
				else if {_rank} is "member":
					set {_value4} to "+%{_value1}%"
				else:
					set {_value4} to "-%{_value1}%"
				if {_value1} is online:
					add {_value4} to {_online::*}
				else:
					add {_value4} to {_offline::*}
		if {_online::*} isn't set:
			set {_online::*} to mj_editfiles_gettext("faction", "data.none", {_player})
		if {_offline::*} isn't set:
			set {_offline::*} to mj_editfiles_gettext("faction", "data.none", {_player})
		send "&6------------------------------------------" to {_player}
		set {_info} to mj_editfiles_gettext("faction", "data.info.title", {_player})
		send "%{_info}%" to {_player}
		set {_line1} to mj_editfiles_gettext("faction", "data.info.line_name", {_player}, "%{_name}%")
		set {_line2} to mj_editfiles_gettext("faction", "data.info.line_description", {_player}, "%{_desc}%")
		set {_line3} to mj_editfiles_gettext("faction", "data.info.line_date", {_player}, "%{_date}%")
		set {_line4} to mj_editfiles_gettext("faction", "data.info.line_score", {_player}, "%{_point}%")
		set {_line5} to mj_editfiles_gettext("faction", "data.info.line_claim", {_player}, "%{_claim}%")
		set {_line6} to mj_editfiles_gettext("faction", "data.info.line_power", {_player}, "%{_power}%", "%{_maxpower}%")
		set {_line7} to mj_editfiles_gettext("faction", "data.info.line_ally", {_player}, "%{_ally::*}%")
		set {_line8} to mj_editfiles_gettext("faction", "data.info.line_enemy", {_player}, "%{_enemy::*}%")
		set {_line9} to mj_editfiles_gettext("faction", "data.info.line_connect", {_player}, "%{_online::*}%")
		set {_line10} to mj_editfiles_gettext("faction", "data.info.line_disconnect", {_player}, "%{_offline::*}%")
		send "%{_line1}%%nl%%{_line2}%%nl%%{_line3}%%nl%%{_line4}%%nl%%{_line5}%%nl%%{_line6}%%nl%%{_line7}%%nl%%{_line8}%%nl%%{_line9}%%nl%%{_line10}%" to {_player}
		send "&6------------------------------------------" to {_player}
	else:
		mj_manager_message({_player}, "faction", "data.prefix", "faction", "data.info.no_found")
	stop
# ---------------------------------------------------------------------------------------------------------------------
# APIxMJ - Info
# =====================================================================================================================
# APIxMJ - Guest ✓
# ---------------------------------------------------------------------------------------------------------------------
function mj_faction_guest_invite(player: player, target: player):
	set {_rank1} to mj_editfiles("userdata", "data.%{_player}'s uuid%.source.faction.rank")
	if {_rank1} is "leader" or "officer":
		mj_faction_data_player({_target})
		set {_rank2} to mj_editfiles("userdata", "data.%{_target}'s uuid%.source.faction.rank")
		if {_rank2} is "free":
			set {_id} to mj_editfiles("userdata", "data.%{_player}'s uuid%.source.faction.guild")
			set {_list::*} to mj_manager_nodes("userdata")
			loop {_list::*}:
				set {_check} to mj_editfiles("userdata", "data.%loop-value%.source.faction.guild")
				if {_check} is {_id}:
					add 1 to {_count}
			set {_upgrade} to mj_editfiles_number("faction.data", "data.guild.%{_id}%.upgrade.player_slot")
			set {_limit} to mj_editfiles_number("faction.config", "data.upgrade.player_slot.%{_upgrade}%.value")
			if {_count} >= {_limit}:
				mj_manager_message({_player}, "faction", "data.prefix", "faction", "data.guest.limite")
				stop
			else:
				set {_name} to mj_editfiles("faction.data", "data.guild.%{_id}%.name")
				mj_manager_message({_player}, "faction", "data.prefix", "faction", "data.guest.request", "%{_target}%")
				mj_manager_message({_target}, "faction", "data.prefix", "faction", "data.guest.invitation", {_name})
				mj_core_request({_target}, "faction", "data.prefix", "/faction join", "/faction refuse")
				mj_editfiles("temp", "data.%{_target}'s uuid%.faction.guest_request", "modify", {_id})
				set {_title} to mj_editfiles_gettext("faction", "data.guest.bossbar", {_target}, {_name})
				mj_core_bossbar({_target}, "cooldown", {_title}, 30)
				wait 30 seconds
				set {_check} to mj_editfiles("temp", "data.%{_target}'s uuid%.faction.guest_request")
				if {_check} is set:
					mj_core_bossbar({_target}, "delete")
					mj_editfiles("temp", "data.%{_target}'s uuid%.faction.guest_request", "delete")
		else:
			mj_manager_message({_player}, "faction", "data.prefix", "faction", "data.guest.no_free")
	else:
		mj_manager_message({_player}, "faction", "data.prefix", "faction", "data.request.rank_officer")
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_faction_guest_join(player: player):
	set {_id} to mj_editfiles("temp", "data.%{_player}'s uuid%.faction.guest_request")
	if {_id} is set:
		set {_rank} to mj_editfiles("userdata", "data.%{_player}'s uuid%.source.faction.rank")
		if {_rank} is "free":
			mj_editfiles("userdata", "data.%{_player}'s uuid%.source.faction.guild", "modify", {_id})
			mj_editfiles("userdata", "data.%{_player}'s uuid%.source.faction.rank", "modify", "recruit")
			set {_name} to mj_editfiles("faction.data", "data.guild.%{_id}%.name")
			mj_manager_message({_player}, "faction", "data.prefix", "faction", "data.guest.join", {_name})
			loop all players:
				set {_value} to mj_editfiles("userdata", "data.%loop-player's uuid%.source.faction.guild")
				if {_value} is {_id}:
					if loop-player isn't "%{_player}%":
						mj_manager_message(loop-player, "faction", "data.prefix", "faction", "data.guest.join_broadcast", "%{_player}%")
			mj_core_bossbar({_player}, "delete")
			mj_editfiles("temp", "data.%{_player}'s uuid%.faction.guest_request", "delete")
		else:
			mj_manager_message({_player}, "faction", "data.prefix", "faction", "data.create.no_free")
			set {_check} to mj_editfiles("temp", "data.%{_player}'s uuid%.faction.guest_request")
			if {_check} is set:
				mj_core_bossbar({_player}, "delete")
				mj_editfiles("temp", "data.%{_player}'s uuid%.faction.guest_request", "delete")
	else:
		mj_manager_message({_player}, "faction", "data.prefix", "faction", "data.guest.no_request")
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_faction_guest_refuse(player: player):
	set {_id} to mj_editfiles("temp", "data.%{_player}'s uuid%.faction.guest_request")
	if {_id} is set:
		mj_manager_message({_player}, "faction", "data.prefix", "faction", "data.guest.refuse")
		loop all players:
			set {_value} to mj_editfiles("userdata", "data.%loop-player's uuid%.source.faction.guild")
			if {_value} is {_id}:
				mj_manager_message(loop-player, "faction", "data.prefix", "faction", "data.guest.refuse_broadcast")
		mj_core_bossbar({_player}, "delete")
		mj_editfiles("temp", "data.%{_player}'s uuid%.faction.guest_request", "delete")
	else:
		mj_manager_message({_player}, "faction", "data.prefix", "faction", "data.guest.no_request")
	stop
# ---------------------------------------------------------------------------------------------------------------------
# APIxMJ - Guest
# =====================================================================================================================
# APIxMJ - Kick ✓
# ---------------------------------------------------------------------------------------------------------------------
function mj_faction_kick(player: player, target: offlineplayer):
	set {_rank1} to mj_editfiles("userdata", "data.%{_player}'s uuid%.source.faction.rank")
	if {_rank1} is "leader" or "officer":
		set {_id1} to mj_editfiles("userdata", "data.%{_player}'s uuid%.source.faction.guild")
		set {_id2} to mj_editfiles("userdata", "data.%{_target}'s uuid%.source.faction.guild")
		if {_id1} is {_id2}:
			set {_rank2} to mj_editfiles("userdata", "data.%{_target}'s uuid%.source.faction.rank")
			if {_rank2} isn't "leader":
				mj_editfiles("userdata", "data.%{_target}'s uuid%.source.faction.guild", "modify", "none")
				mj_editfiles("userdata", "data.%{_target}'s uuid%.source.faction.rank", "modify", "free")
				set {_name} to mj_editfiles("faction.data", "data.guild.%{_id}%.name")
				mj_manager_message({_player}, "faction", "data.prefix", "faction", "data.kick.player", "%{_target}%")
				if {_target} is online:
					mj_manager_message({_target}, "faction", "data.prefix", "faction", "data.kick.broadcast", {_name})
			else:
				mj_manager_message({_player}, "faction", "data.prefix", "faction", "data.kick.leader")
		else:
			mj_manager_message({_player}, "faction", "data.prefix", "faction", "data.request.guild_both")
	else:
		mj_manager_message({_player}, "faction", "data.prefix", "faction", "data.request.rank_officer")
	stop
# ---------------------------------------------------------------------------------------------------------------------
# APIxMJ - Kick
# =====================================================================================================================
# APIxMJ - Leader ✓
# ---------------------------------------------------------------------------------------------------------------------
function mj_faction_leader(player: player, target: offlineplayer):
	set {_id1} to mj_editfiles("userdata", "data.%{_player}'s uuid%.source.faction.guild")
	set {_id2} to mj_editfiles("userdata", "data.%{_target}'s uuid%.source.faction.guild")
	if {_id1} is {_id2}:
		set {_rank} to mj_editfiles("userdata", "data.%{_player}'s uuid%.source.faction.rank")
		if {_rank} is "leader":
			mj_editfiles("userdata", "data.%{_player}'s uuid%.source.faction.rank", "modify", "officer")
			mj_editfiles("userdata", "data.%{_target}'s uuid%.source.faction.rank", "modify", "leader")
			mj_manager_message({_player}, "faction", "data.prefix", "faction", "data.leader.old")
			mj_manager_message({_target}, "faction", "data.prefix", "faction", "data.leader.new")
		else:
			mj_manager_message({_player}, "faction", "data.prefix", "faction", "data.request.rank_leader")
	else:
		mj_manager_message({_player}, "faction", "data.prefix", "faction", "data.request.guild_both")
	stop
# ---------------------------------------------------------------------------------------------------------------------
# APIxMJ - Leader
# =====================================================================================================================
# APIxMJ - Leave ✓
# ---------------------------------------------------------------------------------------------------------------------
function mj_faction_leave_request(player: player):
	set {_id} to mj_editfiles("userdata", "data.%{_player}'s uuid%.source.faction.guild")
	if {_id} isn't "none":
		set {_name} to mj_editfiles("faction.data", "data.guild.%{_id}%.name")
		mj_manager_message({_player}, "faction", "data.prefix", "faction", "data.leave.request", {_name})
		mj_core_request({_player}, "faction", "data.prefix", "/faction leave confirm", "/faction leave cancel")
	else:
		mj_manager_message({_player}, "faction", "data.prefix", "faction", "data.request.guild_lost")
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_faction_leave_confirm(player: player):
	set {_id1} to mj_editfiles("userdata", "data.%{_player}'s uuid%.source.faction.guild")
	if {_id1} isn't "none":
		set {_rank} to mj_editfiles("userdata", "data.%{_player}'s uuid%.source.faction.rank")
		if {_rank} isn't "leader":
			mj_editfiles("userdata", "data.%{_player}'s uuid%.source.faction.rank", "modify", "free")
			mj_editfiles("userdata", "data.%{_player}'s uuid%.source.faction.guild", "modify", "none")
			set {_name} to mj_editfiles("faction.data", "data.guild.%{_id1}%.name")
			mj_manager_message({_player}, "faction", "data.prefix", "faction", "data.leave.success", {_name})
			loop all players:
				set {_id2} to mj_editfiles("userdata", "data.%loop-player's uuid%.source.faction.guild")
				if {_id2} is {_id1}:
					mj_manager_message(loop-player, "faction", "data.prefix", "faction", "data.leave.alert", "%{_player}%")
		else:
			mj_manager_message({_player}, "faction", "data.prefix", "faction", "data.leave.leader")
	else:
		mj_manager_message({_player}, "faction", "data.prefix", "faction", "data.request.guild_lost")
	stop
# ---------------------------------------------------------------------------------------------------------------------
# APIxMJ - Leave
# =====================================================================================================================
# APIxMJ - Rank ✓
# ---------------------------------------------------------------------------------------------------------------------
function mj_faction_rank(player: player, target: offlineplayer, mode: text):
	if {_mode} is "promote" or "demote":
		if {_mode} is "promote":
			set {_choice1} to "recruit"
			set {_choice2} to "officer"
		else:
			set {_choice1} to "officer"
			set {_choice2} to "recruit"
	set {_rank1} to mj_editfiles("userdata", "data.%{_player}'s uuid%.source.faction.rank")
	if {_rank1} is "leader":
		set {_id1} to mj_editfiles("userdata", "data.%{_player}'s uuid%.source.faction.guild")
		set {_id2} to mj_editfiles("userdata", "data.%{_target}'s uuid%.source.faction.guild")
		if {_id1} is {_id2}:
			set {_rank2} to mj_editfiles("userdata", "data.%{_target}'s uuid%.source.faction.rank")
			if {_rank2} is {_choice1}:
				mj_editfiles("userdata", "data.%{_target}'s uuid%.source.faction.rank", "modify", "member")
				set {_info1} to mj_editfiles_gettext("faction", "data.rank.member", {_player})
				set {_info2} to mj_editfiles_gettext("faction", "data.rank.member", {_target})
			else if {_rank2} is "member":
				mj_editfiles("userdata", "data.%{_target}'s uuid%.source.faction.rank", "modify", {_choice2})
				set {_info1} to mj_editfiles_gettext("faction", "data.rank.%{_choice2}%", {_player})
				set {_info2} to mj_editfiles_gettext("faction", "data.rank.%{_choice2}%", {_target})
			else:
				mj_manager_message({_player}, "faction", "data.prefix", "faction", "data.rank_post.no_promote")
				stop
			mj_manager_message({_player}, "faction", "data.prefix", "faction", "data.rank_post.%{_mode}%.me", "%{_target}%", {_info1})
			mj_manager_message({_target}, "faction", "data.prefix", "faction", "data.rank_post.%{_mode}%.it", {_info2})
		else:
			mj_manager_message({_player}, "faction", "data.prefix", "faction", "data.request.guild_both")
	else:
		mj_manager_message({_player}, "faction", "data.prefix", "faction", "data.request.rank_leader")
	stop
# ---------------------------------------------------------------------------------------------------------------------
# APIxMJ - Rank
# =====================================================================================================================
# APIxMJ - Alliance ✓
# ---------------------------------------------------------------------------------------------------------------------
function mj_faction_alliance_reset(type: text, id1: text, id2: text):
	if {_type} is "ally" or "enemy":
		set {_list::*} to mj_editfiles_list("faction.data", "data.guild.%{_id1}%.%{_type}%")
		if {_list::*} contains {_id2}:
			set {_count} to 0
			loop {_list::*}:
				add 1 to {_count}
			if {_count} >= 2:
				remove {_id2} from {_list::*}
				mj_editfiles_list("faction.data", "data.guild.%{_id1}%.%{_type}%", "modify", {_list::*})
			else:
				mj_editfiles("faction.data", "data.guild.%{_id1}%.%{_type}%", "modify", "")
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_faction_alliance_change(type: text, id1: text, id2: text):
	if {_type} is "neutral" or "ally" or "enemy":
		if {_type} is "ally" or "enemy":
			mj_faction_alliance_change("neutral", {_id1}, {_id2})
			set {_list1::*} to mj_editfiles_list("faction.data", "data.guild.%{_id1}%.%{_type}%")
			add {_id2} to {_list1::*}
			mj_editfiles_list("faction.data", "data.guild.%{_id1}%.%{_type}%", "modify", {_list1::*})
			set {_list2::*} to mj_editfiles_list("faction.data", "data.guild.%{_id2}%.%{_type}%")
			add {_id1} to {_list2::*}
			mj_editfiles_list("faction.data", "data.guild.%{_id2}%.%{_type}%", "modify", {_list2::*})
		else:
			mj_faction_alliance_reset("ally", {_id1}, {_id2})
			mj_faction_alliance_reset("enemy", {_id1}, {_id2})
			mj_faction_alliance_reset("ally", {_id2}, {_id1})
			mj_faction_alliance_reset("enemy", {_id2}, {_id1})
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_faction_alliance(player: player, target: text, type: text):
	set {_rank} to mj_editfiles("userdata", "data.%{_player}'s uuid%.source.faction.rank")
	if {_rank} is "leader" or "officer":
		set {_id1} to mj_editfiles("userdata", "data.%{_player}'s uuid%.source.faction.guild")
		set {_name} to mj_editfiles("faction.data", "data.guild.%{_id1}%.name")
		set {_id2} to mj_faction_data_check_id({_target})
		if {_id2} isn't "none":
			if {_id1} isn't {_id2}:
				if {_type} is "neutral" or "ally" or "enemy":
					if {_type} is "neutral" or "enemy":
						mj_faction_alliance_change({_type}, {_id1}, {_id2})
						set {_view} to mj_editfiles_gettext("faction", "data.rank.%{_type}%")
						mj_manager_message({_player}, "faction", "data.prefix", "faction", "data.alliance.new_relation", {_target}, {_view})
						loop all players:
							set {_id3} to mj_editfiles("userdata", "data.%loop-player's uuid%.source.faction.guild")
							if {_id2} is {_id3}:
								mj_manager_message(loop-player, "faction", "data.prefix", "faction", "data.alliance.new_relation_broadcast", {_name}, {_view})
					else:
						mj_faction_alliance_request({_player}, {_id2})
			else:
				mj_manager_message({_player}, "faction", "data.prefix", "faction", "data.alliance.no_oneself")
		else:
			mj_manager_message({_player}, "faction", "data.prefix", "faction", "data.request.guild_no_found")
	else:
		mj_manager_message({_player}, "faction", "data.prefix", "faction", "data.request.rank_officer")
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_faction_alliance_request(player: player, id1: text, mode: text="request"):
	set {_id2} to mj_editfiles("userdata", "data.%{_player}'s uuid%.source.faction.guild")
	set {_name1} to mj_editfiles("faction.data", "data.guild.%{_id1}%.name")
	set {_name2} to mj_editfiles("faction.data", "data.guild.%{_id2}%.name")
	if {_mode} is "request":
		mj_manager_message({_player}, "faction", "data.prefix", "faction", "data.alliance.request.me", {_name1})
		loop all players:
			set {_id3} to mj_editfiles("userdata", "data.%loop-player's uuid%.source.faction.guild")
			if {_id1} is {_id3}:
				set {_rank} to mj_editfiles("userdata", "data.%loop-player's uuid%.source.faction.rank")
				if {_rank} is "leader" or "officer":
					mj_manager_message(loop-player, "faction", "data.prefix", "faction", "data.alliance.request.it", {_name2})
					mj_core_request(loop-player, "faction", "data.prefix", "/faction request accept", "/faction request refuse")
					mj_editfiles("temp", "data.faction.request.%{_id1}%", "modify", {_id2})
	else if {_mode} is "accept" or "refuse":
		set {_id1} to mj_editfiles("temp", "data.faction.request.%{_id2}%")
		if {_id1} is set:
			mj_editfiles("temp", "data.faction.request.%{_id2}%", "delete")
			if {_mode} is "accept":
				mj_faction_alliance_change("ally", {_id1}, {_id2})
				set {_view} to mj_editfiles_gettext("faction", "data.rank.ally", {_player})
				mj_manager_message({_player}, "faction", "data.prefix", "faction", "data.alliance.new_relation", {_name1}, {_view})
				loop all players:
					set {_id3} to mj_editfiles("userdata", "data.%loop-player's uuid%.source.faction.guild")
					if {_id2} is {_id3}:
						if loop-player isn't {_player}:
							set {_view} to mj_editfiles_gettext("faction", "data.rank.ally", loop-player)
							mj_manager_message(loop-player, "faction", "data.prefix", "faction", "data.alliance.new_relation_broadcast", {_name1}, {_view})
					else if {_id1} is {_id3}:
						set {_view} to mj_editfiles_gettext("faction", "data.rank.ally", loop-player)
						mj_manager_message(loop-player, "faction", "data.prefix", "faction", "data.alliance.new_relation_broadcast", {_name2}, {_view})
			else:
				mj_manager_message({_player}, "faction", "data.prefix", "faction", "data.alliance.refuse.me", {_name1})
				loop all players:
					set {_id3} to mj_editfiles("userdata", "data.%loop-player's uuid%.source.faction.guild")
					if {_id2} is {_id3}:
						if loop-player isn't {_player}:
							mj_manager_message(loop-player, "faction", "data.prefix", "faction", "data.alliance.refuse.it1", "%{_player}%", {_name1})
					if {_id1} is {_id3}:
						mj_manager_message(loop-player, "faction", "data.prefix", "faction", "data.alliance.refuse.it2", {_name2})
		else:
			mj_manager_message({_player}, "faction", "data.prefix", "faction", "data.alliance.no_request")
	else:
		send "error" to console
	stop
# ---------------------------------------------------------------------------------------------------------------------
# APIxMJ - Alliance
# =====================================================================================================================
# APIxMJ - Claim ✓
# ---------------------------------------------------------------------------------------------------------------------
function mj_faction_claim(player: player):
	set {_check} to mj_editfiles_boolean("faction.config", "data.claim_in_world_list")
	if {_check} is true:
		set {_list1::*} to mj_editfiles_list("faction.config", "data.world")
		if {_list1::*} doesn't contain {_player}'s world:
			mj_manager_message({_player}, "faction", "data.prefix", "faction", "data.claim.no_world")
			stop
	set {_rank} to mj_editfiles("userdata", "data.%{_player}'s uuid%.source.faction.rank")
	if {_rank} is "leader" or "officer" or "member":
		if "%region at {_player}%" doesn't contain "world":
			set {_id} to mj_editfiles("userdata", "data.%{_player}'s uuid%.source.faction.guild")
			set {_owner} to mj_editfiles("faction.data", "data.claim.%chunk at {_player}%.owner")
			if {_owner} is {_id}:
				mj_manager_message({_player}, "faction", "data.prefix", "faction", "data.claim.already_claimed")
				stop
			else:
				set {_value1} to mj_faction_count_power({_id})
				set {_claim1} to mj_faction_count_claim({_id})
				if {_claim1} >= {_value1}:
					mj_manager_message({_player}, "faction", "data.prefix", "faction", "data.claim.max_claimed")
					stop
				if {_owner} is set:
					set {_value2} to mj_faction_count_power({_owner})
					set {_claim2} to mj_faction_count_claim({_owner})
					if {_claim2} > {_value2}:
						mj_faction_data_claim({_player})
					else:
						mj_manager_message({_player}, "faction", "data.prefix", "faction", "data.claim.too_much_power")
				else:
					mj_faction_data_claim({_player})
		else:
			mj_manager_message({_player}, "faction", "data.prefix", "faction", "data.claim.no_wilderness")
	else:
		mj_manager_message({_player}, "faction", "data.prefix", "faction", "data.request.rank_member")
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_faction_unclaim(player: player):
	set {_rank} to mj_editfiles("userdata", "data.%{_player}'s uuid%.source.faction.rank")
	if {_rank} is "leader" or "officer" or "member":
		set {_id} to mj_editfiles("userdata", "data.%{_player}'s uuid%.source.faction.guild")
		set {_owner} to mj_editfiles("faction.data", "data.claim.%chunk at {_player}%.owner")
		if {_id} is {_owner}:
			mj_editfiles("faction.data", "data.claim.%chunk at {_player}%", "delete")
			mj_manager_message({_player}, "faction", "data.prefix", "faction", "data.claim.unclaimed")
		else:
			mj_manager_message({_player}, "faction", "data.prefix", "faction", "data.claim.no_claimed")
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_faction_unclaim_all(player: player):
	set {_rank} to mj_editfiles("userdata", "data.%{_player}'s uuid%.source.faction.rank")
	if {_rank} is "leader" or "officer":
		set {_id} to mj_editfiles("userdata", "data.%{_player}'s uuid%.source.faction.guild")
		set {_list::*} to mj_manager_nodes("faction.data", "data.claim")
		loop {_list::*}:
			set {_owner} to mj_editfiles("faction.data", "data.claim.%loop-value%.owner")
			if {_id} is {_owner}:
				mj_editfiles("faction.data", "data.claim.%loop-value%", "delete")
		mj_manager_message({_player}, "faction", "data.prefix", "faction", "data.claim.unclaimed_all")
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_faction_claim_info(player: player):
	set {_owner} to mj_editfiles("faction.data", "data.claim.%chunk at {_player}%.owner")
	if {_owner} is set:
		set {_name} to mj_editfiles("faction.data", "data.%{_owner}%.name")
		set {_info} to mj_editfiles_gettext("faction", "data.claim.infobar", {_player}, {_name})
		mj_core_infobar({_player}, 2, {_info})
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_faction_claim_permission(player: player, target: text):
	set {_owner} to mj_editfiles("faction.data", "data.claim.%chunk at {_player}%.owner")
	set {_id} to mj_editfiles("userdata", "data.%{_player}'s uuid%.source.faction.guild")
	if {_id} is {_owner}:
		set {_rank} to mj_editfiles("userdata", "data.%{_player}'s uuid%.source.faction.rank")
		if {_rank} is "leader" or "officer":
			set {_check} to mj_editfiles_boolean("faction.data", "data.claim.%chunk at {_player}%.permission.%{_target}%")
			mj_editfiles_boolean("faction.data", "data.claim.%chunk at {_player}%.permission.%{_target}%", "modify", true)
			set {_type} to mj_editfiles_gettext("manager", "data.type.enable", {_player})
			if {_check} is true:
				mj_editfiles_boolean("faction.data", "data.claim.%chunk at {_player}%.permission.%{_target}%", "modify", false)
				set {_type} to mj_editfiles_gettext("manager", "data.type.disable", {_player})
			mj_manager_message({_player}, "faction", "data.prefix", "faction", "data.permission.claim.%{_target}%", {_type})
		else:
			mj_manager_message({_player}, "faction", "data.prefix", "faction", "data.request.rank_officer")
	else:
		mj_manager_message({_player}, "faction", "data.prefix", "faction", "data.claim.no_claimed")
	stop
# ---------------------------------------------------------------------------------------------------------------------
# APIxMJ - Claim
# =====================================================================================================================
# APIxMJ - Chat ✓
# ---------------------------------------------------------------------------------------------------------------------
function mj_faction_chat(player: player):
	set {_id} to mj_editfiles("userdata", "data.%{_player}'s uuid%.source.faction.guild")
	if {_id} isn't "none":
		set {_mode} to mj_editfiles_boolean("userdata.%{_player}'s uuid%", "data.source.faction.chat")
		mj_editfiles_boolean("userdata.%{_player}'s uuid%", "data.source.faction.chat", "modify", true)
		set {_type} to mj_editfiles_gettext("manager", "data.type.enable", {_player})
		if {_mode} is true:
			mj_editfiles_boolean("userdata.%{_player}'s uuid%", "data.source.faction.chat", "modify", false)
			set {_type} to mj_editfiles_gettext("manager", "data.type.disable", {_player})
		mj_manager_message({_player}, "faction", "data.prefix", "faction", "data.chat.change_mode", {_type})
	else:
		mj_manager_message({_player}, "faction", "data.prefix", "faction", "data.request.guild_lost")
	stop
# ---------------------------------------------------------------------------------------------------------------------
# APIxMJ - Chat
# =====================================================================================================================
# APIxMJ - Permission ✓
# ---------------------------------------------------------------------------------------------------------------------
function mj_faction_permission(player: player, target: text):
	set {_rank} to mj_editfiles("userdata", "data.%{_player}'s uuid%.source.faction.rank")
	if {_rank} is "leader" or "officer":
		set {_id} to mj_editfiles("userdata", "data.%{_player}'s uuid%.source.faction.guild")
		if {_target} is "mob_spawning" or "ally_access":
			mj_faction_claim_permission({_player}, {_target})
		else if {_target} is "friendly_fire":
			set {_check} to mj_editfiles_boolean("faction.data", "data.guild.%{_id}%.permission.%{_target}%")
			mj_editfiles_boolean("faction.data", "data.guild.%{_id}%.permission.%{_target}%", "modify", true)
			set {_type} to mj_editfiles_gettext("manager", "data.type.enable", {_player})
			if {_check} is true:
				mj_editfiles_boolean("faction.data", "data.guild.%{_id}%.permission.%{_target}%", "modify", false)
				set {_type} to mj_editfiles_gettext("manager", "data.type.disable", {_player})
			mj_manager_message({_player}, "faction", "data.prefix", "faction", "data.permission.%{_target}%", {_type})
		else:
			set {_info1} to mj_editfiles_gettext("faction", "data.permission.error.friendly_fire", {_player})
			#set {_info2} to mj_editfiles_gettext("faction", "data.permission.error.mob_spawning", {_player})
			#set {_info3} to mj_editfiles_gettext("faction", "data.permission.error.ally_access", {_player})
			#mj_manager_message({_player}, "faction", "data.prefix", "faction", "data.permission.error.info", {_info1}, {_info2}, {_info3})
			mj_manager_message({_player}, "faction", "data.prefix", "faction", "data.permission.error.info", {_info1})
	else:
		mj_manager_message({_player}, "faction", "data.prefix", "faction", "data.request.rank_officer")
	stop
# ---------------------------------------------------------------------------------------------------------------------
# APIxMJ - Permission
# =====================================================================================================================
# APIxMJ - Home ✓
# ---------------------------------------------------------------------------------------------------------------------
function mj_faction_home_tp(player: player):
	set {_name} to mj_timecount_text("factionhome_%{_player}%", "name")
	if {_name} is "none":
		set {_id} to mj_editfiles("userdata", "data.%{_player}'s uuid%.source.faction.guild")
		set {_tp} to mj_core_location("faction.data", "data.guild.%{_id}%.home")
		if {_tp} is set:
			if {_player} don't have permission "*" or "mj.*" or "mj.faction.*" or "mj.faction.home.*" or "mj.faction.home.bypass":
				mj_manager_message({_player}, "faction", "data.prefix", "essentials", "data.teleport.wait")
				set {_xyz1} to mj_core_location_viewer({_player})
				wait 5 seconds
				set {_xyz2} to mj_core_location_viewer({_player})
				if {_xyz1} is {_xyz2}:
					mj_essentials_back({_player})		
					set {_time} to mj_editfiles_number("essentials.config", "data.teleport.time")
					mj_timecount("factionhome_%{_player}%", "backward", 0, 0, {_time})
					mj_timecount("godmode_%{_player}%", "backward", 0, 0, 10)
					mj_manager_message({_player}, "faction", "data.prefix", "faction", "data.home.success")
					teleport {_player} to {_tp}
				else:
					mj_manager_message({_player}, "faction", "data.prefix", "essentials", "data.teleport.cancel")
			else:
				mj_essentials_back({_player})
				mj_manager_message({_player}, "faction", "data.prefix", "faction", "data.home.success")
				mj_timecount("godmode_%{_player}%", "backward", 0, 0, 10)
				teleport {_player} to {_tp}
		else:
			mj_manager_message({_player}, "faction", "data.prefix", "faction", "data.home.no_set")
	else:
		set {_time} to mj_timecount_viewer("factionhome_%{_player}%")
		mj_manager_message({_player}, "faction", "data.prefix", "core", "data.time.wait", {_time})
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_faction_home_define(player: player):
	set {_rank} to mj_editfiles("userdata", "data.%{_player}'s uuid%.source.faction.rank")
	if {_rank} is "leader" or "officer":
		set {_id} to mj_editfiles("userdata", "data.%{_player}'s uuid%.source.faction.guild")
		mj_core_location("faction.data", "data.guild.%{_id}%.home", "modify", {_player})
		mj_manager_message({_player}, "faction", "data.prefix", "faction", "data.home.set_success")
		#set {_owner} to mj_editfiles("faction.data", "data.claim.%chunk at {_player}%.owner")
		#if {_id} is {_owner}:
		#else:
		#	mj_manager_message({_player}, "faction", "data.prefix", "faction", "data.noclaimwilderness")
	else:
		mj_manager_message({_player}, "faction", "data.prefix", "faction", "data.request.rank_officer")
	stop
# ---------------------------------------------------------------------------------------------------------------------
# APIxMJ - Home
# =====================================================================================================================
# APIxMJ - Map ✓
# ---------------------------------------------------------------------------------------------------------------------
function mj_faction_map(player: player):
	set {_list1::*} to mj_faction_map_chunk({_player})
	set {_l1} to ""
	set {_l2} to ""
	set {_l3} to ""
	set {_l4} to ""
	set {_l5} to ""
	set {_l6} to ""
	set {_l7} to ""
	set {_l8} to ""
	set {_l9} to ""
	set {_cont} to 0
	set {_id} to mj_editfiles("userdata", "data.%{_player}'s uuid%.source.faction.guild")
	set {_list2::*} to mj_editfiles_list("faction.data", "data.guild.%{_id}%.ally")
	set {_list3::*} to mj_editfiles_list("faction.data", "data.guild.%{_id}%.enemy")
	loop {_list1::*}:
		delete {_value1}
		set {_value1} to mj_editfiles("faction.data", "data.claim.%loop-value%.owner")
		if {_value1} is set:
			if {_value1} is {_id}:
				set {_ico} to "&a⬛&f"
			else if {_list2::*} contains {_value1}:
				set {_ico} to "&2⬛&f"
			else if {_list3::*} contains {_value1}:
				set {_ico} to "&c⬛&f"
			else:
				set {_ico} to "&7⬛&f"
		else:
			set {_ico} to "&f⬛&f"
		if loop-value is chunk at {_player}'s location:
			set {_ico} to "&b⬛&f"
		set {_n} to "&3N"
		set {_s} to "&3S"
		set {_e} to "&3E"
		set {_w} to "&3W"
		if {_player}'s yaw is between 135 and 225:
			set {_n} to "&cN"
		else if {_player}'s yaw is between 45 and 135:
			set {_w} to "&cW"
		else if {_player}'s yaw is between 225 and 315:
			set {_e} to "&cE"
		else:
			set {_s} to "&cS"
		if {_cont} is less than 9:
			set {_l1} to "%{_l1}% %{_ico}%"
			add 1 to {_cont}
		else if {_cont} is less than 18:
			set {_l2} to "%{_l2}% %{_ico}%"
			add 1 to {_cont}
		else if {_cont} is less than 27:
			set {_l3} to "%{_l3}% %{_ico}%"
			add 1 to {_cont}
		else if {_cont} is less than 36:
			set {_l4} to "%{_l4}% %{_ico}%"
			add 1 to {_cont}
		else if {_cont} is less than 45:
			set {_l5} to "%{_l5}% %{_ico}%"
			add 1 to {_cont}
		else if {_cont} is less than 54:
			set {_l6} to "%{_l6}% %{_ico}%"
			add 1 to {_cont}
		else if {_cont} is less than 63:
			set {_l7} to "%{_l7}% %{_ico}%"
			add 1 to {_cont}
		else if {_cont} is less than 72:
			set {_l8} to "%{_l8}% %{_ico}%"
			add 1 to {_cont}
		else if {_cont} is less than 81:
			set {_l9} to "%{_l9}% %{_ico}%"
			add 1 to {_cont}
	set {_prefix} to mj_editfiles_gettext("faction", "data.prefix", {_player})
	set {_title} to mj_editfiles_gettext("faction", "data.map_title", {_player})
	set {_info1} to mj_editfiles_gettext("faction", "data.map_info.l1", {_player})
	set {_info2} to mj_editfiles_gettext("faction", "data.map_info.l2", {_player})
	set {_middle} to "%{_l4}% &6\%{_n}%&6/%nl%%{_l5}% &6%{_w}%&6+%{_e}%%nl%%{_l6}% &6/%{_s}%&6\"
	send "&6%{_prefix}% %{_title}%%nl%%{_l1}%%nl%%{_l2}%%nl%%{_l3}%%nl%%{_middle}%%nl%%{_l7}%%nl%%{_l8}%%nl%%{_l9}%%nl%%{_info1}%%nl%%{_info2}%" to {_player}
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_faction_map_chunk(player: player) :: objects:
	set {_center} to {_player}'s location
	set {_radius} to 4
	set {_pos} to {_center}
	set {_counter} to 1
	if {_player}'s yaw is between 135 and 225:
		loop 2 * {_radius} + 1 times:
			set z-coordinate of {_pos} to z-coordinate of {_center} - 16 * {_radius} + (loop-number - 1) * 16
			set x-coordinate of {_pos} to x-coordinate of {_center} - 16 * {_radius}
			loop 2 * {_radius} + 1 times:
				set {_chunks::%{_counter}%} to chunk at {_pos}
				add 1 to {_counter}
				add 16 to x-coordinate of {_pos}
	else if {_player}'s yaw is between 45 and 135:
		loop 2 * {_radius} + 1 times:
			set x-coordinate of {_pos} to x-coordinate of {_center} - 16 * {_radius} + (loop-number - 1) * 16
			set z-coordinate of {_pos} to z-coordinate of {_center} + 16 * {_radius}
			loop 2 * {_radius} + 1 times:
				set {_chunks::%{_counter}%} to chunk at {_pos}
				add 1 to {_counter}
				add -16 to z-coordinate of {_pos}
	else if {_player}'s yaw is between 225 and 315:
		loop 2 * {_radius} + 1 times:
			set x-coordinate of {_pos} to x-coordinate of {_center} + 16 * {_radius} - (loop-number - 1) * 16
			set z-coordinate of {_pos} to z-coordinate of {_center} - 16 * {_radius}
			loop 2 * {_radius} + 1 times:
				set {_chunks::%{_counter}%} to chunk at {_pos}
				add 1 to {_counter}
				add 16 to z-coordinate of {_pos}
	else:
		loop 2 * {_radius} + 1 times:
			set z-coordinate of {_pos} to z-coordinate of {_center} + 16 * {_radius} - (loop-number - 1) * 16
			set x-coordinate of {_pos} to x-coordinate of {_center} + 16 * {_radius}
			loop 2 * {_radius} + 1 times:
				set {_chunks::%{_counter}%} to chunk at {_pos}
				add 1 to {_counter}
				add -16 to x-coordinate of {_pos}
	return {_chunks::*}
# ---------------------------------------------------------------------------------------------------------------------
# APIxMJ - Map
# =====================================================================================================================
# APIxMJ - Money ✓
# ---------------------------------------------------------------------------------------------------------------------
function mj_faction_money(player: offlineplayer, mode: text="deposit", value: number=0):
	set {_rank} to mj_editfiles("userdata", "data.%{_player}'s uuid%.source.faction.rank")
	if {_rank} is "leader" or "officer" or "member":
		set {_view} to mj_core_format_money(false, {_value})
		if {_mode} is "deposit":
			set {_money} to mj_essentials_money_modify({_player}, "all")
			if {_money} >= {_value}:
				mj_essentials_money_system({_player}, {_value}, false, "Deposit guild money")
				mj_faction_money_edit({_player}, "add", {_value})
				mj_manager_message({_player}, "essentials", "data.bank.prefix", "essentials", "data.bank.deposit", {_view})
		else:
			set {_money} to mj_faction_money_modify({_player})
			if {_money} >= {_value}:
				mj_faction_money_edit({_player}, "remove", {_value})
				mj_essentials_money_system({_player}, {_value}, true, "Withdraw guild money")
				mj_manager_message({_player}, "essentials", "data.bank.prefix", "essentials", "data.bank.withdraw", {_view})
	else:
		mj_manager_message({_player}, "faction", "data.prefix", "faction", "data.request.rank_member")
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_faction_money_modify(player: offlineplayer, mode: text="extract", value: number=0) :: number:
	set {_id} to mj_editfiles("userdata", "data.%{_player}'s uuid%.source.faction.guild")
	if {_mode} is "extract":
		set {_result} to mj_editfiles_number("faction.data", "data.guild.%{_id}%.money.value")
	else:
		mj_editfiles_number("faction.data", "data.guild.%{_id}%.money.value", "modify", {_value})
	return {_result}
# ---------------------------------------------------------------------------------------------------------------------
function mj_faction_money_edit(player: offlineplayer, type: text="add", value: number=0):
	set {_money} to mj_faction_money_modify({_player})
	if {_type} is "set" or "add" or "remove":
		if {_type} is "add":
			set {_result} to {_money} + {_value}
		else if {_type} is "remove":
			set {_result} to {_money} - {_value}
		else:
			set {_result} to {_value}
	set {_check1} to mj_editfiles_boolean("faction.config", "data.money.limit")
	if {_check1} is true:
		set {_check2} to mj_editfiles_boolean("faction.data", "data.guild.%{_id}%.money.bypass")
		if {_check2} is false:
			set {_upgrade} to mj_editfiles_number("faction.data", "data.guild.%{_id}%.upgrade.money")
			set {_limit} to mj_editfiles_number("faction.data", "data.upgrade.money.%{_upgrade}%.value")
			if {_result} >= {_limit} + 1:
				set {_lost} to {_result} - {_limit}
				set {_result} to {_limit}
				set {_view} to mj_core_format_money(false, {_lost})
				mj_essentials_money_system({_player}, {_lost}, true, "Withdraw guild lost money")
				wait 1 tick
				mj_manager_message({_player}, "faction", "data.prefix", "essentials", "data.bank.lost", {_view})
	mj_faction_money_modify({_player}, "modify", {_result})
	stop
# ---------------------------------------------------------------------------------------------------------------------
# APIxMJ - Money
# =====================================================================================================================