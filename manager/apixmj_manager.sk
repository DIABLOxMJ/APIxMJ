# =====================================================================================================================
# APIxMJ - Files ✓ ✗ ← ↑ → ↓ ⚠ ❤
# ---------------------------------------------------------------------------------------------------------------------
# PREMIUM - DIABLOxMJ: fa743dc8-450e-4f1b-a75c-8ae7e52b6f17 - Nyceidu: edcda98f-ed98-41c6-ba2c-77bc313ed248
# CRACK   - DIABLOxMJ: b00cadd2-6497-3134-93d5-5be9512e9f48 - Nyceidu: 1412f834-ede6-34f1-aeaa-84467fc1f237
# ---------------------------------------------------------------------------------------------------------------------
function mj_files_manager():
	load yaml "plugins/APIxMJ/manager/config.yml" as "mj.manager.config"
	load yaml "plugins/APIxMJ/manager/data.yml" as "mj.manager.data"
	wait 1 second
	set {_list::*} to mj_editfiles_list("manager.config", "data.language.list")
	if {_list::*} is set:
		loop {_list::*}:
			load yaml "plugins/APIxMJ/manager/language/%loop-value%.yml" as "mj.manager.language.%loop-value%"
			load yaml "plugins/APIxMJ/manager/help/%loop-value%.yml" as "mj.manager.help.%loop-value%"
			load yaml "plugins/APIxMJ/manager/help_custom/%loop-value%.yml" as "mj.custom.help.%loop-value%"
	stop
# ---------------------------------------------------------------------------------------------------------------------
on load:
	send "[APIxMJ] Loading manager..." to console
	mj_files_manager()
	mj_editfiles("manager.data", "data.addon.main.manager.version", "modify", "2023.04.13.0001")
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_manager_loader():
	set {_list1::*} to mj_manager_nodes("manager.data", "data.main")
	loop {_list1::*}:
		set {_check} to mj_editfiles_boolean("manager.data", "data.main.%loop-value%.installed")
		if {_check} is true:
			set {_start} to mj_editfiles_boolean("manager.data", "data.main.%loop-value%.skript.1")
			enable script file "%{_start}%.sk"
	set {_list2::*} to mj_manager_nodes("manager.data", "data.extension")
	loop {_list2::*}:
		set {_check} to mj_editfiles_boolean("manager.data", "data.extension.%loop-value%.installed")
		if {_check} is true:
			set {_start} to mj_editfiles_boolean("manager.data", "data.extension.%loop-value%.skript.1")
			enable script file "%{_start}%.sk"
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_editfiles(source: text, find: text="data", mode: text="extract", data: text="") :: text:
	if {_mode} is "extract":
		set {_result} to yaml value "%{_find}%" from "mj.%{_source}%"
		if {_result} isn't set:
			if {_data} isn't empty:
				set {_result} to {_data}
	else if {_mode} is "delete":
		set {_result} to yaml value "%{_find}%" from "mj.%{_source}%"
		if {_result} is set:
			delete yaml value "%{_find}%" from "mj.%{_source}%"
			save yaml "mj.%{_source}%"
	else:
		set yaml value "%{_find}%" from "mj.%{_source}%" to {_data}
		save yaml "mj.%{_source}%"
	return {_result}
# ---------------------------------------------------------------------------------------------------------------------
function mj_editfiles_boolean(source: text, find: text="data", mode: text="extract", data: boolean=false) :: boolean:
	if {_mode} is "extract":
		set {_result} to yaml value "%{_find}%" from "mj.%{_source}%"
		if {_result} isn't set:
			if {_data} isn't empty:
				set {_result} to {_data}
	else:
		set yaml value "%{_find}%" from "mj.%{_source}%" to {_data}
		save yaml "mj.%{_source}%"
	return {_result}
# ---------------------------------------------------------------------------------------------------------------------
function mj_editfiles_number(source: text, find: text="data", mode: text="extract", data: number=0) :: number:
	if {_mode} is "extract":
		set {_result} to yaml value "%{_find}%" from "mj.%{_source}%"
		if {_result} isn't set:
			if {_data} isn't empty:
				set {_result} to {_data}
	else:
		set yaml value "%{_find}%" from "mj.%{_source}%" to {_data}
		save yaml "mj.%{_source}%"
	return {_result}
# ---------------------------------------------------------------------------------------------------------------------
function mj_editfiles_list(source: text, find: text="data", mode: text="extract", data: objects="") :: objects:
	if {_mode} is "extract":
		set {_list::*} to yaml list "%{_find}%" from "mj.%{_source}%"
		if {_result} isn't set:
			if {_data} isn't empty:
				set {_result} to {_data}
	else:
		set yaml list "%{_find}%" from "mj.%{_source}%" to {_data::*}
		save yaml "mj.%{_source}%"
	return {_list::*}
# ---------------------------------------------------------------------------------------------------------------------
function mj_editfiles_stock(source: text, find: text="data", mode: text="extract", data: object="") :: object:
	if {_mode} is "extract":
		set {_result} to yaml value "%{_find}%" from "mj.%{_source}%"
		if {_result} isn't set:
			if {_data} isn't empty:
				set {_result} to {_data}
	else:
		set yaml value "%{_find}%" from "mj.%{_source}%" to {_data}
		save yaml "mj.%{_source}%"
	return {_result}
# ---------------------------------------------------------------------------------------------------------------------
function mj_editfiles_timespan(source: text, find: text="data", mode: text="extract", data: timespan="") :: timespan:
	if {_mode} is "extract":
		set {_result} to yaml value "%{_find}%" from "mj.%{_source}%"
		if {_result} isn't set:
			if {_data} isn't empty:
				set {_result} to {_data}
	else:
		set yaml value "%{_find}%" from "mj.%{_source}%" to {_data}
		save yaml "mj.%{_source}%"
	return {_result}
# ---------------------------------------------------------------------------------------------------------------------
function mj_editfiles_date(source: text, find: text="data", mode: text="extract", data: date="") :: date:
	if {_mode} is "extract":
		set {_result} to yaml value "%{_find}%" from "mj.%{_source}%"
		if {_result} isn't set:
			if {_data} isn't empty:
				set {_result} to {_data}
	else:
		set yaml value "%{_find}%" from "mj.%{_source}%" to {_data}
		save yaml "mj.%{_source}%"
	return {_result}
# ---------------------------------------------------------------------------------------------------------------------
function mj_editfiles_gettext(source: text, find: text="data", player: player="none", info1: text="none", info2: text="none", info3: text="none") :: text:
	set {_lang} to yaml value "data.language.use" from "mj.manager.config"
	set {_result} to yaml value "%{_find}%" from "mj.%{_source}%.language.%{_lang}%"
	#set {_list1::*} to mj_manager_skript_list()
	#if {_list1::*} contains "apixmj.sk":
	#	if {_player} isn't "none":
	#		set {_list2::*} to the currently loaded yaml files
	#		if {_list2::*} contains "mj.userdata":
	#			set {_lang} to yaml value "data.%{_player}'s uuid%.language" from "mj.userdata"
	#			set {_result} to "%{_find}%" from "mj.%{_source}%.language.%{_lang}%"
	if {_info1} isn't "none":
		replace "$0" with {_info1} in {_result}
	if {_info2} isn't "none":
		replace "$1" with {_info2} in {_result}
	if {_info3} isn't "none":
		replace "$2" with {_info3} in {_result}
	if {_result} isn't set:
		set {_result} to {_find}
	return {_result}
# ---------------------------------------------------------------------------------------------------------------------
# APIxMJ - Files
# =====================================================================================================================
# APIxMJ - Command
# ---------------------------------------------------------------------------------------------------------------------
command /manager [<text>]:
	executable by: player
	trigger:
		if player is op:
			if arg-1 is set:
				if arg-1 is "reload":
					player command "/sk reload apixmj_manager"
				else if arg-1 is "data_update":
					set {_check} to mj_editfiles_boolean("manager.config", "data.data_update")
					if {_check} is false:
						mj_editfiles_boolean("manager.config", "data.data_update", "modify", true)
						mj_manager_update_data()
						wait 1 second
						mj_editfiles_boolean("manager.config", "data.data_update", "modify", false)
					else:
						mj_manager_update_data()
					mj_manager_message(player, "manager", "data.prefix", "manager", "data.data_update")
				else if arg-1 is "data_reset":
					mj_manager_reset_data()
					mj_manager_message(player, "manager", "data.prefix", "manager", "data.data_reset")
			else:
				mj_manager_menu(player)
		stop
# ---------------------------------------------------------------------------------------------------------------------
on tab complete of "/manager":
	set tab completions for position 1 to "reload", "data_update" and "data_reset"
	stop
# ---------------------------------------------------------------------------------------------------------------------
# APIxMJ - Command
# =====================================================================================================================
# APIxMJ - Gui Function
# ---------------------------------------------------------------------------------------------------------------------
function mj_manager_menu_return(player: player, id: text="main", slot: number=0):
	set {_return} to mj_editfiles_gettext("manager", "data.button.return", {_player})
	make a gui slot {_slot} of {_player} with barrier named {_return} to run:
		mj_manager_menu({_player}, {_id})
		stop
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_manager_menu_gui_generator(player: player, size: number=1, title: text="No gui name", item: text="air"):
	set {_item} to {_item} parsed as item with no nbt
	open virtual chest inventory with size {_size} named {_title} to {_player}
	set {_time} to 9*{_size}
	set {_slot} to 0
	loop {_time} times:
		make a gui slot {_slot} of {_player} with {_item} named " " to run:
			stop
		add 1 to {_slot}
	stop
# ---------------------------------------------------------------------------------------------------------------------
# APIxMJ - Gui Function
# =====================================================================================================================
# APIxMJ - Gui Request
# ---------------------------------------------------------------------------------------------------------------------
function mj_manager_menu_request(player: player, source: text, id: text, option: text):
	set {_title} to mj_editfiles_gettext("manager", "data.menu.confirm")
	mj_manager_menu_gui_generator({_player}, 3, {_title}, "light gray glass pane")
	mj_manager_menu_request_button_confirm({_player}, {_source}, {_id}, {_option})
	mj_manager_menu_request_button_cancel({_player}, {_source}, {_id}, {_option})
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_manager_menu_request_button_confirm(player: player, source: text, id: text, option: text):
	set {_lang} to mj_editfiles("manager.config", "data.language.use")
	set {_find_name} to mj_editfiles("manager.data", "data.button.request.confirm.name")
	set {_name} to mj_editfiles_gettext("manager", {_find_name})
	set {_slot} to mj_editfiles_number("manager.data", "data.button.request.confirm.slot")
	set {_item} to lime wool
	set {_item} to mj_manager_item_description({_player}, {_item}, "data.button.request.confirm")
	make a gui slot {_slot} of {_player} with {_item} named {_name} to close:
		if {_option} is "install" or "update":
			mj_manager_menu_control_installer({_player}, {_source}, {_id}, {_option})
		else if {_option} is "uninstall":
			mj_manager_menu_control_uninstalled({_player}, {_source}, {_id})
		stop
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_manager_menu_request_button_cancel(player: player, source: text, id: text, option: text):
	set {_lang} to mj_editfiles("manager.config", "data.language.use")
	set {_find_name} to mj_editfiles("manager.data", "data.button.request.cancel.name")
	set {_name} to mj_editfiles_gettext("manager", {_find_name})
	set {_slot} to mj_editfiles_number("manager.data", "data.button.request.cancel.slot")
	set {_item} to red wool
	set {_item} to mj_manager_item_description({_player}, {_item}, "data.button.request.cancel")
	make a gui slot {_slot} of {_player} with {_item} named {_name} to close:
		mj_manager_menu_control({_player}, {_source}, {_id})
		stop
	stop
# ---------------------------------------------------------------------------------------------------------------------
# APIxMJ - Gui Request
# =====================================================================================================================
# APIxMJ - Gui Main
# ---------------------------------------------------------------------------------------------------------------------
function mj_manager_menu(player: player, id: text="main"):
	if {_id} is "main":
		set {_title} to mj_editfiles_gettext("manager", "data.menu.main", {_player})
		set {_item} to mj_editfiles("manager.config", "data.gui_background.item")
		mj_manager_menu_gui_generator({_player}, 6, {_title}, {_item})
		mj_manager_menu_index({_player}, {_id})
		mj_manager_menu_addon({_player}, {_id})
	else:
		set {_find_name} to mj_editfiles("manager.data", "data.index.%{_id}%.name")
		set {_name} to mj_editfiles_gettext("manager", {_find_name}, {_player})
		set {_title} to mj_editfiles_gettext("manager", "data.menu.menu", {_player}, {_name})
		if length of {_name} >= 16:
			set {_name} to mj_editfiles_gettext("manager", "%{_find_name}%_lite", {_player})
			set {_title} to mj_editfiles_gettext("manager", "data.menu.menu_lite", {_player}, {_name})
		set {_item} to mj_editfiles("manager.data", "data.index.%{_id}%.gui_background.item")
		mj_manager_menu_gui_generator({_player}, 6, {_title}, {_item})
		mj_manager_menu_index({_player}, {_id})
		mj_manager_menu_addon({_player}, {_id})
		set {_return} to mj_editfiles("manager.data", "data.index.%{_id}%.menu_back")
		mj_manager_menu_return({_player}, {_return}, 49)
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_manager_menu_index(player: player, id: text):
	set {_list::*} to mj_manager_nodes("manager.data", "data.index")
	loop {_list::*}:
		set {_value1} to loop-value
		set {_value2} to mj_editfiles("manager.data", "data.index.%{_value1}%.menu_back")
		if {_id} is {_value2}:
			mj_manager_menu_index_button_generator({_player}, {_value1})
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_manager_menu_addon(player: player, id: text):
	set {_list::*} to mj_manager_nodes("manager.data", "data.addon.%{_id}%")
	loop {_list::*}:
		set {_value} to loop-value
		mj_manager_menu_addon_button_generator({_player}, {_id}, {_value})
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_manager_menu_index_button_generator(player: player, id: text):
	set {_visible} to mj_editfiles_boolean("manager.data", "data.index.%{_id}%.visible")
	if {_visible} is true:
		set {_find_name} to mj_editfiles("manager.data", "data.index.%{_id}%.name")
		set {_name} to mj_editfiles_gettext("manager", {_find_name}, {_player})
		set {_title} to mj_editfiles_gettext("manager", "data.menu.name", {_player}, {_name})
		set {_slot} to mj_editfiles_number("manager.data", "data.index.%{_id}%.slot")
		set {_item} to mj_manager_item_convert("manager.data", "data.index.%{_id}%.item", true)
		set {_item} to mj_manager_item_description({_player}, {_item}, "data.index.%{_id}%")
		set {_item} to mj_manager_item_button({_player}, {_item}, "left_click", "manager", "data.open.gui_folder")
		make a gui slot {_slot} of {_player} with {_item} named {_title} to run:
			set {_next} to mj_editfiles("manager.data", "data.index.%{_id}%.menu_next")
			if {_next} isn't "none":
				mj_manager_menu({_player}, {_next})
			stop
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_manager_menu_addon_button_generator(player: player, source: text, id: text):
	set {_visible} to mj_editfiles_boolean("manager.data", "data.addon.%{_source}%.%{_id}%.visible")
	if {_visible} is true:
		set {_find_name} to mj_editfiles("manager.data", "data.addon.%{_source}%.%{_id}%.name")
		set {_name} to mj_editfiles_gettext("manager", {_find_name}, {_player})
		set {_title} to mj_editfiles_gettext("manager", "data.menu.name", {_player}, {_name})
		set {_slot} to mj_editfiles_number("manager.data", "data.addon.%{_source}%.%{_id}%.slot")
		set {_item} to mj_manager_item_convert("manager.data", "data.addon.%{_source}%.%{_id}%.item", true)
		set {_item} to mj_manager_item_description({_player}, {_item}, "data.addon.%{_source}%.%{_id}%")
		set {_count} to mj_manager_item_lore_count({_player}, {_item})
		set {_item} to mj_manager_item_button({_player}, {_item}, "left_click", "manager", "data.open.gui_panel")
		make a gui slot {_slot} of {_player} with {_item} named {_title} to run:
			mj_manager_menu_control({_player}, {_source}, {_id})
			stop
	stop
# ---------------------------------------------------------------------------------------------------------------------
# APIxMJ - Gui Main
# =====================================================================================================================
# APIxMJ - Gui Control
# ---------------------------------------------------------------------------------------------------------------------
function mj_manager_menu_control(player: player, source: text, id: text):
	set {_find_name} to mj_editfiles("manager.data", "data.addon.%{_source}%.%{_id}%.name")
	set {_name} to mj_editfiles_gettext("manager", {_find_name}, {_player})
	set {_title} to mj_editfiles_gettext("manager", "data.menu.manager", {_player}, {_name})
	if length of {_name} >= 16:
		set {_find_name} to mj_editfiles("manager.data", "data.addon.%{_source}%.%{_id}%.name")
		set {_name} to mj_editfiles_gettext("manager", "%{_find_name}%_lite", {_player})
		set {_title} to mj_editfiles_gettext("manager", "data.menu.manager_lite", {_player}, {_name})
	set {_item} to mj_editfiles("manager.data", "data.addon.%{_source}%.%{_id}%.gui_background.item")
	mj_manager_menu_gui_generator({_player}, 5, {_title}, {_item})
	mj_manager_menu_control_button_status({_player}, {_source}, {_id}, 10)
	mj_manager_menu_control_button_installer({_player}, {_source}, {_id})
	mj_manager_menu_control_button_update({_player}, {_source}, {_id})
	mj_manager_menu_control_button_help({_player}, {_source}, {_id})
	if {_id} isn't "manager":
		mj_manager_menu_control_button_uninstalled({_player}, {_source}, {_id})
	mj_manager_menu_return({_player}, {_source}, 40)
	stop
# ---------------------------------------------------------------------------------------------------------------------
# APIxMJ - Gui Control
# =====================================================================================================================
# APIxMJ - Gui Control (Status)
# ---------------------------------------------------------------------------------------------------------------------
function mj_manager_menu_control_button_status(player: player, source: text, id: text, slot: number):
	set {_lang} to mj_editfiles("manager.config", "data.language.use")
	set {_find_name} to mj_editfiles("manager.data", "data.addon.%{_source}%.%{_id}%.name")
	set {_name} to mj_editfiles_gettext("manager", {_find_name}, {_player})
	set {_item} to paper
	set {_count} to 2
	set {_desc1} to mj_editfiles_gettext("manager", "data.category.info", {_player})
	set line {_count} of lore of {_item} to "%{_desc1}%"
	set {_item} to mj_manager_menu_control_button_status_data({_player}, {_source}, {_id}, {_item}, "version")
	set {_item} to mj_manager_menu_control_button_status_data({_player}, {_source}, {_id}, {_item}, "depends")
	set {_item} to mj_manager_menu_control_button_status_data({_player}, {_source}, {_id}, {_item}, "skript")
	set {_item} to mj_manager_menu_control_button_status_data({_player}, {_source}, {_id}, {_item}, "file")
	set {_item} to mj_manager_item_description({_player}, {_item}, "data.addon.%{_source}%.%{_id}%")	
	make a gui slot {_slot} of {_player} with {_item} named {_name} to run:
		stop
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_manager_menu_control_button_status_data(player: player, source: text, id: text, item: item, type: text) :: item:
	set {_lang} to mj_editfiles("manager.config", "data.language.use")
	set {_count} to mj_manager_item_lore_count({_player}, {_item})
	if {_type} is "version":
		set {_data} to mj_editfiles("manager.data", "data.addon.%{_source}%.%{_id}%.%{_type}%")
		set {_data_view} to mj_editfiles_gettext("manager", "data.category.%{_type}%.1", {_player}, {_data})
		set line {_count} of lore of {_item} to "%{_data_view}%"
		add 2 to {_count}
	else:
		set {_data1} to mj_editfiles("manager.data", "data.addon.%{_source}%.%{_id}%.%{_type}%.1")
		if {_data1} isn't "none":
			set {_data2} to mj_editfiles_gettext("manager", "data.category.%{_type}%", {_player})
			set line {_count} of lore of {_item} to "%{_data2}%"
			add 1 to {_count}
			set {_list1::*} to mj_manager_nodes("manager.data", "data.addon.%{_source}%.%{_id}%.%{_type}%")
			loop {_list1::*}:
				set {_data3} to mj_editfiles("manager.data", "data.addon.%{_source}%.%{_id}%.%{_type}%.%loop-value%")
				set {_data4} to mj_editfiles_gettext("manager", "data.argument", {_player}, {_data3})
				if {_type} is "depends":
					set {_data31} to mj_editfiles("manager.data", "data.addon.%{_data3}%.name")
					set {_data32} to mj_editfiles_gettext("manager", {_data31}, {_player})
					set {_data32} to uncolored {_data32}
					set {_data4} to mj_editfiles_gettext("manager", "data.argument", {_player}, "&a%{_data32}%")
				set line {_count} of lore of {_item} to "%{_data4}%"
				add 1 to {_count}
	return {_item}
# ---------------------------------------------------------------------------------------------------------------------
# APIxMJ - Gui Control (Status)
# =====================================================================================================================
# APIxMJ - Gui Control (Installer)
# ---------------------------------------------------------------------------------------------------------------------
function mj_manager_menu_control_button_installer(player: player, source: text, id: text):
	set {_lang} to mj_editfiles("manager.config", "data.language.use")
	set {_find_name} to mj_editfiles("manager.data", "data.button.installer.name")
	set {_name} to mj_editfiles_gettext("manager", {_find_name}, {_player})
	set {_slot} to mj_editfiles_number("manager.data", "data.button.installer.slot")
	set {_installed} to mj_editfiles_boolean("manager.data", "data.addon.%{_source}%.%{_id}%.installed")
	set {_item} to minecart
	set {_mode} to mj_editfiles_gettext("manager", "data.type.not_installed", {_player})
	if {_installed} is true:
		set {_item} to minecart with chest
		set {_mode} to mj_editfiles_gettext("manager", "data.type.installed", {_player})
	else:
		set {_version} to mj_editfiles("manager.data", "data.addon.%{_source}%.%{_id}%.version")
		if {_version} isn't "0000.00.00.0000":
			set {_mode} to mj_editfiles_gettext("manager", "data.type.uninstalled", {_player})
	set {_value1} to mj_editfiles("manager.data", "data.addon.%{_source}%.%{_id}%.depends.1")
	if {_value1} isn't "none":
		set {_count} to mj_manager_nodes_count("manager.data", "data.addon.%{_source}%.%{_id}%.depends")
		loop {_count} times:
			set {_value1} to mj_editfiles("manager.data", "data.addon.%{_source}%.%{_id}%.depends.%loop-value%")
			set {_value2} to mj_editfiles_boolean("manager.data", "data.addon.%{_value1}%.installed")
			set {_value3} to mj_editfiles("manager.data", "data.addon.%{_value1}%.name")
			set {_value4} to mj_editfiles_gettext("manager", {_value3}, {_player})
			if {_value2} is false:
				set {_name} to mj_editfiles_gettext("manager", "data.button.installer.request", {_player}, {_value4})
				set {_installed} to true
				exit loop
	set {_count} to 2
	set {_install} to mj_editfiles_gettext("manager", "data.category.type", {_player}, {_mode})
	set line {_count} of lore of {_item} to "%{_install}%"
	set {_item} to mj_manager_item_description({_player}, {_item}, "data.button.installer")
	if {_installed} isn't true:
		set {_item} to mj_manager_item_button({_player}, {_item}, "left_click", "manager", "data.open.install")
	make a gui slot {_slot} of {_player} with {_item} named {_name} to run:
		if {_installed} isn't true:
			mj_manager_menu_request({_player}, {_source}, {_id}, "install")
		stop
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_manager_menu_control_installer(player: player, source: text, id: text, option: text):
	set {_find_name} to mj_editfiles("manager.data", "data.addon.%{_source}%.%{_id}%.name")
	set {_name} to mj_editfiles_gettext("manager", {_find_name}, {_player})
	set {_github} to mj_editfiles("manager.data", "data.addon.%{_source}%.%{_id}%.github_folder")
	set {_folder} to mj_editfiles("manager.data", "data.addon.%{_source}%.%{_id}%.folder")
	create script "plugins/APIxMJ/%{_folder}%/language/log.txt"
	delete file "plugins/APIxMJ/%{_folder}%/language/log.txt"
	create script "plugins/APIxMJ/%{_folder}%/help/log.txt"
	delete file "plugins/APIxMJ/%{_folder}%/help/log.txt"
	mj_manager_menu_control_installer_skript({_player}, {_source}, {_id}, {_option})
	mj_editfiles_boolean("manager.data", "data.addon.%{_source}%.%{_id}%.installed", "modify", true)
	if {_option} is "install":	
		mj_manager_message({_player}, "manager", "data.prefix", "manager", "data.process.installed", {_name})
		set {_kick} to mj_editfiles_boolean("manager.data", "data.addon.%{_source}%.%{_id}%.kick")
		if {_kick} is true:
			set {_send} to mj_editfiles_gettext("manager", "data.kick_install", {_player}, {_name})
			kick all players due to "%{_send}%"
	else if {_option} is "update":
		mj_manager_message({_player}, "manager", "data.prefix", "manager", "data.process.updated", {_name})
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_manager_menu_control_installer_skript(player: player, source: text, id: text, option: text):
	set {_find_name} to mj_editfiles("manager.data", "data.addon.%{_source}%.%{_id}%.name")
	set {_name} to mj_editfiles_gettext("manager", {_find_name}, {_player})
	set {_link} to "https://raw.githubusercontent.com/DIABLOxMJ/APIxMJ/main"
	set {_github} to mj_editfiles("manager.data", "data.addon.%{_source}%.%{_id}%.github_folder")
	set {_list::*} to mj_manager_nodes("manager.data", "data.addon.%{_source}%.%{_id}%.skript")
	loop {_list::*}:
		set {_skript} to mj_editfiles("manager.data", "data.addon.%{_source}%.%{_id}%.skript.%loop-value%")
		delete file "plugins/Skript/scripts/%{_skript}%.sk"
		download file from "%{_link}%/%{_github}%/%{_skript}%.sk" to file "plugins/Skript/scripts/%{_skript}%.sk"
	if {_option} is "install":	
		mj_manager_menu_control_installer_file({_player}, {_source}, {_id})
		mj_manager_menu_control_installer_language({_player}, {_source}, {_id})
	else if {_option} is "update":
		download file from "%{_link}%/%{_github}%/apixmj_update.sk" to file "plugins/Skript/scripts/apixmj_update.sk"
		wait 2 seconds
		reload script "apixmj_update"
	wait 2 seconds
	set {_start} to mj_editfiles("manager.data", "data.addon.%{_source}%.%{_id}%.skript.1")
	reload script "%{_start}%"
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_manager_menu_control_installer_file(player: player, source: text, id: text):
	set {_link} to "https://raw.githubusercontent.com/DIABLOxMJ/APIxMJ/main"
	set {_github} to mj_editfiles("manager.data", "data.addon.%{_source}%.%{_id}%.github_folder")
	set {_folder} to mj_editfiles("manager.data", "data.addon.%{_source}%.%{_id}%.folder")
	set {_list::*} to mj_manager_nodes("manager.data", "data.addon.%{_source}%.%{_id}%.yml")
	loop {_list::*}:
		set {_file} to mj_editfiles("manager.data", "data.addon.%{_source}%.%{_id}%.yml.%loop-value%")
		download file from "%{_link}%/%{_github}%/%{_file}%.yml" to file "plugins/APIxMJ/%{_folder}%/%{_file}%.yml"
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_manager_menu_control_installer_language(player: player, source: text, id: text):
	set {_link} to "https://raw.githubusercontent.com/DIABLOxMJ/APIxMJ/main"
	set {_github} to mj_editfiles("manager.data", "data.addon.%{_source}%.%{_id}%.github_folder")
	set {_folder} to mj_editfiles("manager.data", "data.addon.%{_source}%.%{_id}%.folder")
	set {_list::*} to mj_editfiles_list("manager.config", "data.language.list")
	loop {_list::*}:
		download file from "%{_link}%/%{_github}%/language/%loop-value%.yml" to file "plugins/APIxMJ/%{_folder}%/language/%loop-value%.yml"
		download file from "%{_link}%/%{_github}%/help/%loop-value%.yml" to file "plugins/APIxMJ/%{_folder}%/help/%loop-value%.yml" # effect compact
	stop
# ---------------------------------------------------------------------------------------------------------------------
# APIxMJ - Gui Control (Installer)
# =====================================================================================================================
# APIxMJ - Gui Control (Update)
# ---------------------------------------------------------------------------------------------------------------------
function mj_manager_menu_control_button_update(player: player, source: text, id: text, choice: number=1):
	set {_link} to "https://raw.githubusercontent.com/DIABLOxMJ/APIxMJ/main"
	set {_github} to mj_editfiles("manager.data", "data.addon.%{_source}%.%{_id}%.github_folder")
	set {_folder} to mj_editfiles("manager.data", "data.addon.%{_source}%.%{_id}%.folder")
	set {_installed} to mj_editfiles_boolean("manager.data", "data.addon.%{_source}%.%{_id}%.installed")
	if {_installed} is true:
		set {_lang} to mj_editfiles("manager.config", "data.language.use")
		set {_find_name} to mj_editfiles("manager.data", "data.button.update.name")
		set {_name} to mj_editfiles_gettext("manager", "%{_find_name}%.%{_choice}%", {_player})
		set {_slot} to mj_editfiles_number("manager.data", "data.button.update.slot")
		if {_choice} is 2:
			set {_item} to minecart with furnace
		else if {_choice} is 3:
			set {_item} to minecart with chest
		else:
			set {_item} to minecart
		set {_count} to 2
		set {_version} to mj_editfiles("manager.data", "data.addon.%{_source}%.%{_id}%.version")
		set {_version_2} to mj_editfiles_gettext("manager", "data.category.version.2", {_player}, {_version})
		set line {_count} of lore of {_item} to "%{_version_2}%"
		add 1 to {_count}
		set {_none} to mj_editfiles_gettext("manager", "data.none")
		set {_version_3} to mj_editfiles_gettext("manager", "data.category.version.3", {_player}, {_none})
		set line {_count} of lore of {_item} to "%{_version_3}%"
		if {_choice} is 3:
			set {_version_4} to text from "https://raw.githubusercontent.com/DIABLOxMJ/APIxMJ/main/%{_github}%/version.txt"
			set {_version_3} to mj_editfiles_gettext("manager", "data.category.version.3", {_player}, {_version_4})
			set line {_count} of lore of {_item} to "%{_version_3}%"
		set {_item} to mj_manager_item_description({_player}, {_item}, "data.button.update")
		if {_choice} is 1:
			set {_item} to mj_manager_item_button({_player}, {_item}, "left_click", "manager", "data.open.update_check")
			make a gui slot {_slot} of {_player} with {_item} named {_name} to run:
				mj_manager_menu_control_button_update_check({_player}, {_source}, {_id}, {_choice})
				stop
		else if {_choice} is 3:			
			set {_item} to mj_manager_item_button({_player}, {_item}, "left_click", "manager", "data.open.update_now")
			make a gui slot {_slot} of {_player} with {_item} named {_name} to close:		
				mj_manager_menu_control_installer({_player}, {_source}, {_id}, "update")
				stop
		else:
			make a gui slot {_slot} of {_player} with {_item} named {_name} to run:
				stop
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_manager_menu_control_button_update_check(player: player, source: text, id: text, choice: number=1):
	if {_choice} is 1:
		mj_manager_menu_control_button_update({_player}, {_source}, {_id}, 2)
		wait 2 seconds
		set {_version} to mj_editfiles("manager.data", "data.addon.%{_source}%.%{_id}%.version")
		set {_github} to mj_editfiles("manager.data", "data.addon.%{_source}%.%{_id}%.github_folder")
		set {_check} to text from "https://raw.githubusercontent.com/DIABLOxMJ/APIxMJ/main/%{_github}%/version.txt"
		if "%{_check}%" isn't "%{_version}%":
			mj_manager_menu_control_button_update({_player}, {_source}, {_id}, 3)
		else:
			mj_manager_menu_control_button_update({_player}, {_source}, {_id}, 4)
	stop
# ---------------------------------------------------------------------------------------------------------------------
every 1 hour:
	mj_manager_update_data()
	set {_check1} to mj_editfiles_boolean("manager.config", "data.auto_update")
	if {_check1} is true:
		mj_manager_update()
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_manager_update():
	set {_list1::*} to mj_manager_nodes("manager.data", "data.addon")
	loop {_list1::*}:
		set {_value1} to loop-value-1
		set {_list2::*} to mj_manager_nodes("manager.data", "data.addon.%{_value1}%")
		loop {_list2::*}:
			set {_value2} to loop-value-2
			set {_version} to mj_editfiles("manager.data", "data.addon.%{_value1}%.%{_value2}%.version")
			set {_github} to mj_editfiles("manager.data", "data.addon.%{_value1}%.%{_value2}%.github")
			set {_check} to text from "https://raw.githubusercontent.com/DIABLOxMJ/APIxMJ/%{_folder}%/version.txt"
			if "%{_check}%" doesn't contain "%{_version}%":
				mj_manager_menu_control_installer({_source}, {_value1}, {_value2}, "update")
				wait 8 seconds
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_manager_update_data():
	set {_check1} to mj_editfiles_boolean("manager.config", "data.data_update")
	if {_check1} is true:
		set {_link} to "https://raw.githubusercontent.com/DIABLOxMJ/APIxMJ/main"
		rename file "plugins/APIxMJ/manager/data.yml" to "data_old.yml"
		delete file "plugins/APIxMJ/manager/language/fr.yml"
		delete file "plugins/APIxMJ/manager/help/fr.yml"
		wait 2 ticks
		download file from "%{_link}%/manager/data.yml" to file "plugins/APIxMJ/manager/data.yml"
		download file from "%{_link}%/manager/language/fr.yml" to file "plugins/APIxMJ/manager/language/fr.yml"
		download file from "%{_link}%/manager/help/fr.yml" to file "plugins/APIxMJ/manager/help/fr.yml"
		wait 1 second
		mj_files_manager()
		wait 1 second
		load yaml "plugins/APIxMJ/manager/data_old.yml" as "mj.manager.data_old"
		set {_list1::*} to mj_manager_nodes("manager.data_old", "data.addon")
		loop {_list1::*}:
			set {_value1} to loop-value-1
			if {_value1} isn't "main":
				set {_list2::*} to mj_manager_nodes("manager.data_old", "data.addon.%{_value1}%")
				loop {_list2::*}:
					set {_value2} to loop-value-2
					set {_value3} to mj_editfiles_boolean("manager.data_old", "data.addon.%{_value1}%.%{_value2}%.installed")
					if {_value3} is true:
						mj_editfiles_boolean("manager.data", "data.addon.%{_value1}%.%{_value2}%.installed", "modify", {_value3})
						set {_value4} to mj_editfiles("manager.data_old", "data.addon.%{_value1}%.%{_value2}%.version")
						mj_editfiles("manager.data", "data.addon.%{_value1}%.%{_value2}%.version", "modify", {_value4})
		unload yaml "mj.manager.data_old"
		delete file "plugins/APIxMJ/manager/data_old.yml"
		send "[APIxMJ] Database for Manager Updated !" to console
		loop all players:
			if loop-player is op:
				send "[APIxMJ] Database for Manager Updated !" to loop-player
	stop
# ---------------------------------------------------------------------------------------------------------------------
# APIxMJ - Gui Control (Update)
# =====================================================================================================================
# APIxMJ - Gui Control (Uninstalled)
# ---------------------------------------------------------------------------------------------------------------------
function mj_manager_menu_control_button_uninstalled(player: player, source: text, id: text):
	set {_installed} to mj_editfiles_boolean("manager.data", "data.addon.%{_source}%.%{_id}%.installed")
	if {_installed} is true:
		set {_find_name} to mj_editfiles("manager.data", "data.button.uninstalled.name")
		set {_name} to mj_editfiles_gettext("manager", {_find_name}, {_player})
		set {_slot} to mj_editfiles_number("manager.data", "data.button.uninstalled.slot")
		set {_item} to minecart with tnt
		set {_item} to mj_manager_item_description({_player}, {_item}, "data.button.uninstalled")
		set {_item} to mj_manager_item_button({_player}, {_item}, "left_click", "manager", "data.open.uninstall")
		make a gui slot {_slot} of {_player} with {_item} named {_name} to run:
			mj_manager_menu_request({_player}, {_source}, {_id}, "uninstall")
			stop
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_manager_menu_control_uninstalled(player: player, source: text, id: text):
	set {_find_name} to mj_editfiles("manager.data", "data.addon.%{_source}%.%{_id}%.name")
	set {_name} to mj_editfiles_gettext("manager", {_find_name}, {_player})
	set {_list::*} to mj_manager_nodes("manager.data", "data.addon.%{_source}%.%{_id}%.skript")
	loop {_list::*}:
		set {_skript} to mj_editfiles("manager.data", "data.addon.%{_source}%.%{_id}%.skript.%loop-value%")
		unload script file "%{_skript}%.sk"
		delete file "plugins/Skript/scripts/-%{_skript}%.sk"
	mj_editfiles_boolean("manager.data", "data.addon.%{_source}%.%{_id}%.installed", "modify", false)
	mj_manager_message({_player}, "manager", "data.prefix", "manager", "data.process.uninstalled", {_name})
	stop
# ---------------------------------------------------------------------------------------------------------------------
# APIxMJ - Gui Control (Uninstalled)
# =====================================================================================================================
# APIxMJ - Gui Control (Reset)
# ---------------------------------------------------------------------------------------------------------------------
function mj_manager_reset_data():
	set {_link} to "https://raw.githubusercontent.com/DIABLOxMJ/APIxMJ/main"
	delete file "plugins/APIxMJ/manager/data.yml"
	delete file "plugins/APIxMJ/manager/language/fr.yml"
	delete file "plugins/APIxMJ/manager/help/fr.yml"
	wait 2 ticks
	download file from "%{_link}%/manager/data.yml" to file "plugins/APIxMJ/manager/data.yml"
	download file from "%{_link}%/manager/language/fr.yml" to file "plugins/APIxMJ/manager/language/fr.yml"
	download file from "%{_link}%/manager/help/fr.yml" to file "plugins/APIxMJ/manager/help/fr.yml"
	wait 1 second
	mj_files_manager()
	send "[APIxMJ] Database for Manager Reset !" to console
	loop all players:
		if loop-player is op:
			send "[APIxMJ] Database for Manager Reset !" to loop-player
	stop
# ---------------------------------------------------------------------------------------------------------------------
# APIxMJ - Gui Control (Reset)
# =====================================================================================================================
# APIxMJ - Gui Control (Help)
# ---------------------------------------------------------------------------------------------------------------------
function mj_manager_menu_control_button_help(player: player, source: text, id: text):
	set {_installed} to mj_editfiles_boolean("manager.data", "data.addon.%{_source}%.%{_id}%.installed")
	if {_installed} is true:
		set {_find_name} to mj_editfiles("manager.data", "data.button.helper.name")
		set {_name} to mj_editfiles_gettext("manager", {_find_name}, {_player})
		set {_slot} to mj_editfiles_number("manager.data", "data.button.helper.slot")
		set {_item} to book
		set {_item} to mj_manager_item_description({_player}, {_item}, "data.button.helper")
		set {_item} to mj_manager_item_button({_player}, {_item}, "left_click", "manager", "data.open.helper")
		make a gui slot {_slot} of {_player} with {_item} named {_name} to run:
			mj_manager_help_menu_viewer({_player}, {_source}, {_id}, true)
			stop
	stop
# ---------------------------------------------------------------------------------------------------------------------
# APIxMJ - Gui Control (Help)
# =====================================================================================================================
# APIxMJ - Function
# ---------------------------------------------------------------------------------------------------------------------
function mj_manager_nodes(source: text, find: text="data") :: objects:
	loop yaml node keys "%{_find}%" from "mj.%{_source}%":
		add loop-node to {_list::*}
	replace all "%{_find}%." with "" in {_list::*}
	return {_list::*}
# ---------------------------------------------------------------------------------------------------------------------
function mj_manager_nodes_count(source: text, find: text="data") :: number:
	set {_count} to 0
	loop yaml node keys "%{_find}%" from "mj.%{_source}%":
		add 1 to {_count}
	return {_count}
# ---------------------------------------------------------------------------------------------------------------------
function mj_manager_item_convert(source: text, find: text, nbt: boolean=false) :: item:
	set {_item} to yaml value "%{_find}%" from "mj.%{_source}%"
	if {_item} isn't a item:
		set {_item} to {_item} parsed as item
	if {_nbt} is true:
		set {_item} to {_item} with no nbt
	return {_item}
# ---------------------------------------------------------------------------------------------------------------------
function mj_manager_item_description(player: player, item: item, source: text) :: item:
	set {_lang} to mj_editfiles("manager.config", "data.language.use")
	set {_count} to mj_manager_item_lore_count({_player}, {_item})
	set {_data1} to mj_editfiles_gettext("manager", "data.category.description")
	set line {_count} of lore of {_item} to "%{_data1}%"
	add 2 to {_count}
	set {_list::*} to mj_manager_nodes("manager.language.%{_lang}%", "%{_source}%.lore")
	loop {_list::*}:
		set {_data2} to mj_editfiles_gettext("manager", "%{_source}%.lore.%loop-value%")
		set line {_count} of lore of {_item} to "%{_data2}%"
		add 1 to {_count}
	return {_item}
# ---------------------------------------------------------------------------------------------------------------------
function mj_manager_item_lore_count(player: player, item: item) :: number:
	set {_count} to 1
	set {_list::*} to lore of {_item}
	loop {_list::*}:
		add 1 to {_count}
	add 1 to {_count}
	return {_count}
# ---------------------------------------------------------------------------------------------------------------------
function mj_manager_item_button(player: player, item: item, type: text, source: text, find: text) :: item:
	set {_count} to 1
	set {_list::*} to lore of {_item}
	loop {_list::*}:
		add 1 to {_count}
	add 1 to {_count}
	set {_click} to mj_editfiles_gettext("manager", "data.type.%{_type}%", {_player})
	set {_lore} to mj_editfiles_gettext({_source}, {_find}, {_player})
	set line {_count} of lore of {_item} to "%{_click}% %{_lore}%"
	return {_item}
# ---------------------------------------------------------------------------------------------------------------------
function mj_manager_message(player: player, source1: text, prefix1: text, source2: text, send1: text, int0: text="", int1: text="", int2: text="", int3: text="", int4: text=""):
	set {_lang} to mj_editfiles("manager.config", "data.language.use")
	set {_prefix} to yaml value "%{_prefix1}%" from "mj.%{_source1}%.language.%{_lang}%"
	set {_send} to yaml value "%{_send1}%" from "mj.%{_source2}%.language.%{_lang}%"
	replace "$0" with {_int0} in {_send}
	replace "$1" with {_int1} in {_send}
	replace "$2" with {_int2} in {_send}
	replace "$3" with {_int3} in {_send}
	replace "$4" with {_int4} in {_send}
	if {_prefix} isn't set:
		set {_prefix} to {_prefix1}
	if {_send} isn't set:
		set {_send} to {_send1}
	send formatted "%{_prefix}% %{_send}%" to {_player}
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_manager_message_simple(player: player, source1: text, send1: text, int0: text="", int1: text="", int2: text="", int3: text="", int4: text=""):
	set {_lang} to mj_editfiles("manager.config", "data.language.use")
	set {_send} to yaml value "%{_send1}%" from "mj.%{_source1}%.language.%{_lang}%"
	replace "$0" with {_int0} in {_send}
	replace "$1" with {_int1} in {_send}
	replace "$2" with {_int2} in {_send}
	replace "$3" with {_int3} in {_send}
	replace "$4" with {_int4} in {_send}
	if {_send} isn't set:
		set {_send} to {_send1}
	send formatted "%{_send}%" to {_player}
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_manager_lobby_return():
	set {_check} to mj_editfiles_boolean("manager.config", "data.bungeecord.condition")
	if {_check} is true:
		set {_server} to mj_editfiles("manager.config", "data.bungeecord.server")
		send all players to server "%{_server}%"
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_manager_skript_list() :: objects:
	set {_slash} to mj_editfiles("manager.config", "data.slash_option")
	loop files in dir "plugins%{_slash}%Skript%{_slash}%scripts":
		set {_value} to loop-value-1
		set {_list1::*} to {_value} split at "%{_slash}%"
		loop {_list1::*}:
			if loop-value-2 contains ".sk":
				add loop-value-2 to {_list2::*}
	#replace all ".sk" with "" in {_list2::*}
	return {_list2::*}
# ---------------------------------------------------------------------------------------------------------------------
function mj_manager_skript_start():
	set {_list1::*} to mj_manager_nodes("manager.data", "data.addon")
	loop {_list1::*}:
		set {_value1} to loop-value-1
		if {_value1} isn't "main":
			set {_list2::*} to mj_manager_nodes("manager.data", "data.addon.%{_value1}%")
			loop {_list2::*}:
				set {_value2} to loop-value-2
				set {_check} to mj_editfiles_boolean("manager.data", "data.addon.%{_value1}%.%{_value2}%.installed")
				if {_check} is true:
					set {_list3::*} to mj_manager_nodes("manager.data", "data.addon.%{_value1}%.%{_value2}%.skript")
					loop {_list3::*}:
						set {_value3} to loop-value-3
						set {_skript} to mj_editfiles("manager.data", "data.addon.%{_value1}%.%{_value2}%.skript.%{_value3}%")
						enable script file {_skript}
						wait 4 seconds
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_manager_file_reset(folder: text, file: text, language: boolean=false):
	set {_link} to "https://raw.githubusercontent.com/DIABLOxMJ/APIxMJ/main"
	if {_language} is true:
		delete file "plugins/APIxMJ/%{_folder}%/language/%{_file}%.yml"
		download file from "%{_link}%/%{_folder}%/language/%{_file}%.yml" to file "plugins/APIxMJ/%{_folder}%/language/%{_file}%.yml"
		delete file "plugins/APIxMJ/%{_folder}%/help/%{_file}%.yml"
		download file from "%{_link}%/%{_folder}%/help/%{_file}%.yml" to file "plugins/APIxMJ/%{_folder}%/help/%{_file}%.yml"
	else:
		delete file "plugins/APIxMJ/%{_folder}%/%{_file}%.yml"
		download file from "%{_link}%/%{_folder}%/%{_file}%.yml" to file "plugins/APIxMJ/%{_folder}%/%{_file}%.yml"
	stop
# ---------------------------------------------------------------------------------------------------------------------
# APIxMJ - Function
# =====================================================================================================================
# APIxMJ - Reload
# ---------------------------------------------------------------------------------------------------------------------
command /restart:
	executable by: player and console
	trigger:
		if sender is a player:
			if player isn't op:
				stop
		console command "/save-all"
		wait 5 seconds
		mj_manager_lobby_return()
		set {_check} to mj_editfiles_boolean("manager.config", "data.auto_whitelist")
		if {_check} is true:
			set whitelist to true
		restart server
		stop
# ---------------------------------------------------------------------------------------------------------------------
command /reload:
	executable by: player and console
	trigger:
		if sender is a player:
			if player isn't op:
				stop
		set {_prefix} to mj_editfiles_gettext("manager", "data.prefix")
		set {_send} to mj_editfiles_gettext("manager", "data.reload.prevent")
		broadcast "%{_prefix}% %{_send}%"
		console command "/save-all"
		set {_count} to 10
		loop 10 times:
			set {_send} to mj_editfiles_gettext("manager", "data.reload.timing")
			replace "$0" with "%{_count}%" in {_send}
			broadcast "%{_prefix}% %{_send}%"
			wait 1 second
			remove 1 from {_count}
			if {_count} is 3:
				mj_manager_lobby_return()
		set {_check} to mj_editfiles_boolean("manager.config", "data.auto_whitelist")
		if {_check} is true:
			set whitelist to true
		reload server
		stop
# ---------------------------------------------------------------------------------------------------------------------
on skript start:
	wait 5 seconds
	set {_prefix} to mj_editfiles_gettext("manager", "data.prefix")
	set {_send} to mj_editfiles_gettext("manager", "data.reload.success")
	broadcast "%{_prefix}% %{_send}%"
	mj_manager_skript_start()
	set {_check} to mj_editfiles_boolean("manager.config", "data.auto_whitelist")
	if {_check} is true:
		set whitelist to false
	stop
# ---------------------------------------------------------------------------------------------------------------------
on skript stop:
	set {_check} to mj_editfiles_boolean("manager.config", "data.auto_whitelist")
	if {_check} is true:
		set whitelist to true
	stop
# ---------------------------------------------------------------------------------------------------------------------
# APIxMJ - Reload
# =====================================================================================================================
# APIxMJ - Help
# ---------------------------------------------------------------------------------------------------------------------
command /help [<text>]:
	aliases: aide
	executable by: player
	trigger:
		if arg-1 is set:
			mj_manager_help(player, arg-1)
		else:
			mj_manager_help_menu_index(player)
		stop
# ---------------------------------------------------------------------------------------------------------------------
on tab complete of "/help" or "/aide":
	#set {_lang} to mj_editfiles("manager.config", "data.language.use")
	#set {_list1::*} to mj_manager_nodes("manager.data", "data.addon")
	#loop {_list1::*}:
	#	set {_value1} to loop-value-1
	#	set {_list2::*} to mj_manager_nodes("manager.data", "data.addon.%{_value1}%")
	#	loop {_list2::*}:
	#		set {_value2} to loop-value-2
	#		set {_check} to mj_editfiles_boolean("manager.data", "data.addon.%{_value1}%.%{_value2}%.installed")
	#		if {_check} is true:
	#			set {_list3::*} to mj_manager_nodes("%{_value2}%.help.%{_lang}%")
	#			loop {_list3::*}:
	#				set {_value3} to loop-value-3
	#				set {_list4::*} to mj_editfiles_list("%{_value2}%.help.%{_lang}%", "data.%{_value3}%.permission")
	#				if player has permission {_list4::*}:
	#					add loop-value-3 to {_list5::*}
	#set tab completions for position 1 to {_list5::*}
	set tab completions for position 1 to "failed loading…"
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_manager_help(player: player, id: text):
	set {_lang} to mj_editfiles("manager.config", "data.language.use")
	set {_name} to mj_editfiles("manager.help.%{_lang}%", "data.%{_id}%.name")
	if {_name} is set:
		set {_border} to mj_editfiles_gettext("manager", "data.help.border", {_player}, {_name})
		send "%{_border}%" to {_player}
		mj_manager_message_simple({_player}, "manager", "data.help.description")
		set {_list1::*} to mj_manager_nodes("manager.help.%{_lang}%", "data.%{_id}%.description")
		loop {_list1::*}:
			set {_send} to mj_editfiles("manager.help.%{_lang}%", "data.%{_id}%.description.%loop-value%")
			send "%{_send}%" to {_player}
		send "&0" to {_player}
		mj_manager_message_simple({_player}, "manager", "data.help.info")
		set {_list2::*} to mj_manager_nodes("manager.help.%{_lang}%", "data.%{_id}%.info")
		loop {_list2::*}:
			set {_send} to mj_editfiles("manager.help.%{_lang}%", "data.%{_id}%.info.%loop-value%")
			send "%{_send}%" to {_player}
		send "%{_border}%" to {_player}
	else:
		mj_manager_message({_player}, "manager", "data.prefix", "manager", "data.help.argument")
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_manager_help_menu_return(player: player, type: text, slot: number=0, source: text="none", id: text="none", manager: boolean=false):
	set {_return} to mj_editfiles_gettext("manager", "data.button.return", {_player})
	make a gui slot {_slot} of {_player} with barrier named {_return} to run:
		if {_manager} is true:
			mj_manager_menu_control({_player}, {_source}, {_id})
		else:
			if {_type} is "back":
				mj_manager_help_menu_addon({_player}, {_source})
			else:
				mj_manager_help_menu_index({_player})
		stop
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_manager_help_menu_index(player: player):
	set {_title} to mj_editfiles_gettext("manager", "data.help.menu.main", {_player})
	set {_item} to mj_editfiles("manager.config", "data.gui_background.item")
	mj_manager_menu_gui_generator({_player}, 6, {_title}, {_item})
	mj_manager_help_menu_index_button({_player})
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_manager_help_menu_index_button(player: player):
	set {_slot} to 10
	set {_list1::*} to mj_manager_nodes("manager.data", "data.addon")
	loop {_list1::*}:
		set {_value1} to loop-value-1
		set {_list2::*} to mj_manager_nodes("manager.data", "data.addon.%{_value1}%")
		loop {_list2::*}:
			set {_value2} to loop-value-2
			set {_check} to mj_editfiles_boolean("manager.data", "data.addon.%{_value1}%.%{_value2}%.installed")
			if {_check} is true:
				set {_find_name} to mj_editfiles("manager.data", "data.index.%{_value1}%.name")
				set {_name} to mj_editfiles_gettext("manager", {_find_name}, {_player})
				if {_value1} is "main":
					set {_title} to mj_editfiles_gettext("manager", "data.help.button.manager", {_player})
				else:
					set {_index} to mj_editfiles("manager.data", "data.button.help.index.name")
					set {_title} to mj_editfiles_gettext("manager", {_index}, {_player}, {_name})
				set {_item} to mj_manager_item_convert("manager.data", "data.button.help.index.item")
				make a gui slot {_slot} of {_player} with {_item} named {_title} to run:
					mj_manager_help_menu_addon({_player}, {_value1})
					stop
				add 1 to {_slot}
				if {_slot} is 17 or 26 or 35:
					add 2 to {_slot}
				exit loop
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_manager_help_menu_addon(player: player, id: text="main"):
	if {_id} is "main":
		set {_title} to mj_editfiles_gettext("manager", "data.help.menu.manager", {_player})
	else:
		set {_find_name} to mj_editfiles("manager.data", "data.index.%{_id}%.name")
		set {_name} to mj_editfiles_gettext("manager", {_find_name}, {_player})
		set {_title} to mj_editfiles_gettext("manager", "data.help.menu.name", {_player}, {_name})
	set {_item} to mj_editfiles("manager.config", "data.gui_background.item")
	mj_manager_menu_gui_generator({_player}, 6, {_title}, {_item})
	mj_manager_help_menu_addon_button({_player}, {_id})
	mj_manager_help_menu_return({_player}, {_id}, 49)
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_manager_help_menu_addon_button(player: player, id: text="main"):
	set {_slot} to 10
	set {_list::*} to mj_manager_nodes("manager.data", "data.addon.%{_id}%")
	loop {_list::*}:
		set {_value} to loop-value
		set {_check} to mj_editfiles_boolean("manager.data", "data.addon.%{_id}%.%{_value}%.installed")
		if {_check} is true:
			set {_find_name} to mj_editfiles("manager.data", "data.addon.%{_id}%.%{_value}%.name")
			set {_name} to mj_editfiles_gettext("manager", {_find_name}, {_player})
			set {_title} to mj_editfiles_gettext("manager", "data.help.button.addon", {_player}, {_name})
			set {_item} to mj_manager_item_convert("manager.data", "data.button.help.addon.item")
			make a gui slot {_slot} of {_player} with {_item} named {_title} to run:
				mj_manager_help_menu_viewer({_player}, {_id}, {_value})
				stop
			add 1 to {_slot}
			if {_slot} is 17 or 26 or 35:
				add 2 to {_slot}
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_manager_help_menu_viewer(player: player, source: text, id: text, manager: boolean=false):
	set {_find_name} to mj_editfiles("manager.data", "data.addon.%{_source}%.%{_id}%.name")
	set {_name} to mj_editfiles_gettext("manager", {_find_name}, {_player})
	set {_title} to mj_editfiles_gettext("manager", "data.help.button.addon", {_player}, {_name})
	if length of {_name} >= 16:
		set {_name} to mj_editfiles_gettext("manager", "%{_find_name}%_lite", {_player})
		set {_title} to mj_editfiles_gettext("manager", "data.help.button.addon", {_player}, {_name})
	set {_item} to mj_editfiles("manager.config", "data.gui_background.item")
	mj_manager_menu_gui_generator({_player}, 6, {_title}, {_item})
	mj_manager_help_menu_viewer_button({_player}, {_source}, {_id})
	mj_manager_help_menu_return({_player}, "back", 49, {_source}, {_id}, {_manager})
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_manager_help_menu_viewer_button(player: player, source: text, id: text):
	set {_slot} to 10
	set {_lang} to mj_editfiles("manager.config", "data.language.use")
	set {_list1::*} to mj_manager_nodes("%{_id}%.help.%{_lang}%")
	loop {_list1::*}:
		set {_value} to loop-value-1
		set {_type} to mj_editfiles("%{_id}%.help.%{_lang}%", "data.%{_value}%.type")
		set {_name} to mj_editfiles("%{_id}%.help.%{_lang}%", "data.%{_value}%.name")
		set {_valid} to false
		set {_list2::*} to mj_editfiles_list("%{_id}%.help.%{_lang}%", "data.%{_value}%.permission")
		loop {_list2::*}:
			set {_perm} to loop-value-2
			if {_player} has permission {_perm}:
				set {_valid} to true
				exit loop
		if {_list2::*} contains "none":
			set {_valid} to true
		if {_valid} is true:
			set {_find_name} to mj_editfiles("manager.data", "data.button.help.%{_type}%.name")
			set {_title} to mj_editfiles_gettext("manager", {_find_name}, {_player}, {_name})
			set {_item} to mj_manager_item_convert("manager.data", "data.button.help.%{_type}%.item")
			set {_item} to mj_manager_help_menu_viewer_button_lore({_player}, {_item}, {_id}, {_value}, "description")
			set {_item} to mj_manager_help_menu_viewer_button_lore({_player}, {_item}, {_id}, {_value}, "info")
			make a gui slot {_slot} of {_player} with {_item} named {_title} to run:
				stop
			add 1 to {_slot}
			if {_slot} is 17 or 26 or 35:
				add 2 to {_slot}
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_manager_help_menu_viewer_button_lore(player: player, item: item, id: text, value: text, type: text) :: item:
	set {_lang} to mj_editfiles("manager.config", "data.language.use")
	set {_count} to mj_manager_item_lore_count({_player}, {_item})
	set {_data1} to mj_editfiles_gettext("manager", "data.category.%{_type}%")
	set line {_count} of lore of {_item} to "%{_data1}%"
	add 2 to {_count}
	set {_list::*} to mj_manager_nodes("%{_id}%.help.%{_lang}%", "data.%{_value}%.%{_type}%")
	loop {_list::*}:
		set {_data2} to mj_editfiles("%{_id}%.help.%{_lang}%", "data.%{_value}%.%{_type}%.%loop-value%")
		set line {_count} of lore of {_item} to "%{_data2}%"
		add 1 to {_count}
	return {_item}
# ---------------------------------------------------------------------------------------------------------------------
# APIxMJ - Help
# =====================================================================================================================
# APIxMJ - Backup
# ---------------------------------------------------------------------------------------------------------------------
every 1 hour:
	set {_check} to mj_editfiles_boolean("manager.config", "data.backup")
	if {_check} is true:
		set {_date} to now formatted with "yyyy-MM-dd"
		set {_time} to now formatted with "HH-mm"
		create script "plugins/APIxMJ/backup/%{_date}%/%{_time}%/%{_date}%_%{_time}%.log"
		wait 1 second
		copy dir "plugins/Skript/scripts" to "plugins/APIxMJ/backup/%{_date}%/%{_time}%"
		set {_list1::*} to mj_manager_nodes("manager.data", "data.addon")
		loop {_list1::*}:
			set {_value1} to loop-value-1
			set {_list2::*} to mj_manager_nodes("manager.data", "data.addon.%{_value1}%")
			loop {_list2::*}:
				set {_value2} to loop-value-2
				set {_check} to mj_editfiles_boolean("manager.data", "data.addon.%{_value1}%.%{_value2}%.installed")
				if {_check} is true:
					set {_folder} to mj_editfiles("manager.data", "data.addon.%{_value1}%.%{_value2}%.folder")
					copy dir "plugins/APIxMJ/%{_folder}%" to "plugins/APIxMJ/backup/%{_date}%/%{_time}%"
	stop
# ---------------------------------------------------------------------------------------------------------------------
# APIxMJ - Backup
# =====================================================================================================================