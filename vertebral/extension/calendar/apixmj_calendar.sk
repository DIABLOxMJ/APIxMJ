# =====================================================================================================================
# APIxMJ - Files
# ---------------------------------------------------------------------------------------------------------------------
function mj_files_calendar():
	set {_folder} to mj_editfiles("manager.data", "data.addon.vertebral_extension.calendar.folder")
	load yaml "plugins/APIxMJ/%{_folder}%/config.yml" as "mj.calendar.config"
	load yaml "plugins/APIxMJ/%{_folder}%/data.yml" as "mj.calendar.data"
	set {_list::*} to mj_editfiles_list("manager.config", "data.language.list")
	if {_list::*} is set:
		loop {_list::*}:
			load yaml "plugins/APIxMJ/%{_folder}%/language/%loop-value%.yml" as "mj.calendar.language.%loop-value%"
			load yaml "plugins/APIxMJ/%{_folder}%/help/%loop-value%.yml" as "mj.calendar.help.%loop-value%"
	loop all players:
		mj_calendar_playerdata(loop-player)
	stop
# ---------------------------------------------------------------------------------------------------------------------
on load:
	set {_list::*} to mj_manager_skript_list()
	if {_list::*} contains "apixmj_manager.sk" and "apixmj.sk":
		send "[APIxMJ] Loading calendar..." to console
		mj_files_calendar()
	else:
		broadcast "[APIxMJ] Script loading cancel It requires (apixmj_manager.sk and apixmj.sk)"
		unload script file "apixmj_calendar.sk"
	stop
# ---------------------------------------------------------------------------------------------------------------------
on skript stop:
	rename file "plugins/Skript/scripts/apixmj_calendar.sk" to "-apixmj_calendar.sk"
	send "[APIxMJ] Unloading calendar.."
	stop
# ---------------------------------------------------------------------------------------------------------------------
on join:
	if event-entity is player:
		mj_calendar_playerdata(player)
	stop
# ---------------------------------------------------------------------------------------------------------------------
on command:
	if complete command contains "profil_update":
		set {_list::*} to complete command split at " "
		set {_player} to {_list::2} parsed as offlineplayer
		mj_calendar_playerdata({_player})
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_calendar_playerdata(player: offlineplayer):
	wait 206 ticks
	if {_player} is online:
		set {_profil} to yaml value "data.%{_player}'s uuid%.profil" from "mj.userdata"
		set {_check1} to yaml value "data.%{_player}'s uuid%.source.calendar" from "mj.userdata"
		if {_check1} isn't set:
			set yaml value "data.%{_player}'s uuid%.source.calendar" from "mj.userdata" to "none"
			save yaml "mj.userdata"
			mj_core_logger(1, "%{_player}% calendar data file was generated..")
		set {_check2} to yaml value "data.source.calendar" from "mj.userdata.%{_player}'s uuid%.%{_profil}%"
		if {_check2} isn't set:
			set yaml value "data.source.calendar" from "mj.userdata.%{_player}'s uuid%.%{_profil}%" to "none"
			save yaml "mj.userdata.%{_player}'s uuid%.%{_profil}%"
			mj_core_logger(1, "%{_player}% calendar data was generated..")
	stop
# ---------------------------------------------------------------------------------------------------------------------
# APIxMJ - Files
# =====================================================================================================================
# APIxMJ - Command
# ---------------------------------------------------------------------------------------------------------------------
command /calendar [<text>] [<number>] [<number>]:
	aliases: cal, calendrier
	executable by: player
	trigger:
		if player has permission "*" or "mj.*" or "mj.calendar.*" or "mj.calendar":
			if arg-1 is set:
				if player has permission "*" or "mj.*" or "mj.calendar.*" or "mj.calendar.admin":
					if arg-1 is "preview":
						mj_calendar_menu(player, true)
					else if arg-1 is "reset":
						mj_calendar_reset()
						mj_manager_message(player, "calendar", "data.prefix", "calendar", "data.reset")
					else if arg-1 is "item" or "money" or "hide":
						if arg-2 is set:
							if arg-1 is "item":
								mj_calendar_define(player, arg-1, arg-2)
							else if arg-1 is "money":
								if arg-3 is set:
									mj_calendar_define(player, arg-1, arg-2, arg-3)
								else:
									mj_manager_message(player, "core", "data.prefix", "manager", "data.argument.number")
							else:
								mj_calendar_define(player, arg-1, arg-2)
						else:
							mj_manager_message(player, "core", "data.prefix", "manager", "data.argument.number")
					else:
						mj_manager_message(player, "core", "data.prefix", "manager", "data.argument.name")
				else:
					mj_manager_permission(player, "calendar", "data.prefix", "mj.calendar.admin")
			else:
				mj_calendar_menu(player)
		else:
			mj_manager_permission(player, "calendar", "data.prefix", "mj.calendar")
		stop
# ---------------------------------------------------------------------------------------------------------------------
on tab complete of "/calendar" or "/cal" or "/calendrier":
	if player has permission "*" or "mj.*" or "mj.calendar.*" or "mj.calendar.admin":
		set tab completions for position 1 to "preview", "reset", "item", "money" and "hide"
		set {_count} to 1
		loop 31 times:
			add {_count} to {_list::*}
			add 1 to {_count}
		set tab completions for position 2 to {_list::*}
		if tab arg-1 is "money":
			set tab completions for position 3 to "0"
	stop
# ---------------------------------------------------------------------------------------------------------------------
# APIxMJ - Command
# =====================================================================================================================
# APIxMJ - Menu
# ---------------------------------------------------------------------------------------------------------------------
function mj_calendar_menu(player: player, preview: boolean=false):
	set {_mode} to "current"
	set {_name} to mj_editfiles_gettext("calendar", "data.title.current", {_player})
	if {_preview} is true:
		set {_mode} to "next"
		set {_name} to mj_editfiles_gettext("calendar", "data.title.preview", {_player})
	mj_core_gui_generator({_player}, 5, true, "default", {_name}, "calendar")
	wait 1 tick
	set {_slot} to 1
	set {_list::*} to mj_manager_nodes("calendar.data", "data.%{_mode}%_calendar")
	loop {_list::*}:
		set {_value} to loop-value parsed as number
		set {_check} to mj_editfiles("calendar.data", "data.%{_mode}%_calendar.%{_value}%.type")
		if {_check} isn't "hide":
			mj_calendar_menu_button({_player}, {_value}, {_slot}, {_preview})
			add 1 to {_slot}
			if {_slot} is 8 or 17 or 26 or 35:
				add 2 to {_slot}
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_calendar_menu_button(player: player, value: number, slot: number, preview: boolean=false):
	set {_mode} to "current"
	if {_preview} is true:
		set {_mode} to "next"
	set {_name} to mj_editfiles_gettext("calendar", "data.calendar.%{_mode}%.%{_value}%", {_player})
	set {_item.1} to mj_manager_item_convert("calendar.config", "data.item_viewer_type.previous.item", true)
	set {_check.1} to mj_editfiles_boolean("calendar.config", "data.item_viewer")
	if {_check.1} is true:
		set {_item.1} to mj_manager_item_convert("calendar.data", "data.%{_mode}%_calendar.%{_value}%.item", true)
	set {_date} to now formatted with "dd"
	set {_day} to {_date} parsed as number
	set {_item.2} to mj_calendar_menu_button_description({_player}, {_item.1}, {_value}, {_preview})
	set {_check.2} to mj_editfiles_boolean("temp", "data.%{_player}'s uuid%.calendar.%{_value}%")
	if {_check.2} is true:
		if {_check.1} is true:
			set {_item.3} to mj_manager_item_button({_player}, {_item.2}, "refuse", "calendar", "data.button.gifted")
		else:
			set {_item.1} to mj_manager_item_convert("calendar.config", "data.item_viewer_type.gifted.item", true)
			set {_item.2} to mj_calendar_menu_button_description({_player}, {_item.1}, {_value}, {_preview})
			set {_item.3} to mj_manager_item_button({_player}, {_item.2}, "refuse", "calendar", "data.button.gifted")
	else:
		if {_day} > {_value}:
			set {_item.3} to mj_manager_item_button({_player}, {_item.2}, "refuse", "calendar", "data.button.previous_day")
		else if {_day} = {_value}:
			if {_check.1} is true:
				set {_item.3} to mj_manager_item_button({_player}, {_item.2}, "left_click", "calendar", "data.button.today")
			else:
				set {_item.1} to mj_manager_item_convert("calendar.config", "data.item_viewer_type.today.item", true)
				set {_item.2} to mj_calendar_menu_button_description({_player}, {_item.1}, {_value}, {_preview})
				set {_item.3} to mj_manager_item_button({_player}, {_item.2}, "left_click", "calendar", "data.button.today")
		else:
			if {_check.1} is true:
				set {_item.3} to mj_manager_item_button({_player}, {_item.2}, "refuse", "calendar", "data.button.next_day")
			else:
				set {_item.1} to mj_manager_item_convert("calendar.config", "data.item_viewer_type.next.item", true)
				set {_item.3} to mj_manager_item_button({_player}, {_item.1}, "refuse", "calendar", "data.button.next_day")
	make a gui slot {_slot} of {_player} with {_value} of {_item.3} named {_name} to run:
		if {_preview} is false:
			if {_day} = {_value}:
				mj_calendar_menu_gift({_player}, {_value}, {_slot})
		stop
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_calendar_menu_button_description(player: player, item: item, value: number, preview: boolean=false) :: item:
	set {_mode} to "current"
	if {_preview} is true:
		set {_mode} to "next"
	set {_lang} to mj_manager_userdata_language({_player})
	set {_count} to mj_manager_item_lore_count({_player}, {_item})
	set {_data.1} to mj_editfiles_gettext("manager", "data.category.description")
	set line {_count} of lore of {_item} to "%{_data.1}%"
	add 2 to {_count}
	set {_type} to mj_editfiles("calendar.data", "data.%{_mode}%_calendar.%{_value}%.type")
	if {_type} is "item":
		set {_view} to mj_editfiles_stock("calendar.data", "data.%{_mode}%_calendar.%{_value}%.item")
	else:
		set {_money} to mj_editfiles_number("calendar.data", "data.%{_mode}%_calendar.%{_value}%.money")
		set {_view} to mj_core_format_money(false, {_money})
	set {_data.2} to mj_editfiles_gettext("calendar", "data.lore.%{_type}%", {_player}, "%{_view}%")
	set line {_count} of lore of {_item} to "%{_data.2}%"
	add 1 to {_count}
	return {_item}
# ---------------------------------------------------------------------------------------------------------------------
function mj_calendar_menu_gift(player: player, value: number, slot: number):
	set {_date} to now formatted with "dd"
	set {_day} to {_date} parsed as number
	set {_check} to mj_editfiles_boolean("temp", "data.%{_player}'s uuid%.calendar.%{_day}%")
	if {_check} is true:
		mj_manager_message({_player}, "calendar", "data.prefix", "calendar", "data.gift.retrieve")
	else:
		mj_calendar_menu({_player})
		set {_item} to mj_manager_item_convert("calendar.data", "data.current_calendar.%{_value}%.item")
		mj_editfiles_boolean("temp", "data.%{_player}'s uuid%.calendar.%{_day}%", "modify", true)
		give {_item} to {_player}
		mj_manager_message({_player}, "calendar", "data.prefix", "calendar", "data.gift.current", "%{_item}%")
		set {_money} to mj_editfiles_number("calendar.data", "data.current_calendar.%{_value}%.money")
		if {_money} isn't 0:
			set {_cache} to mj_editfiles_number("temp", "data.%{_player}'s uuid%.money")
			add {_money} to {_cache}
			mj_editfiles_number("temp", "data.%{_player}'s uuid%.money", "modify", {_cache})
			set {_view} to mj_core_format_money(false, {_money})
			mj_manager_message({_player}, "calendar", "data.prefix", "calendar", "data.gift.current", "%{_view}%")
	stop
# ---------------------------------------------------------------------------------------------------------------------
# APIxMJ - Menu
# =====================================================================================================================
# APIxMJ - Function
# ---------------------------------------------------------------------------------------------------------------------
function mj_calendar_define(player: player, type: text, value: number, money: number=0):
	mj_editfiles("calendar.data", "data.next_calendar.%{_value}%.type", "modify", {_type})
	if {_type} is "item":
		mj_editfiles_stock("calendar.data", "data.next_calendar.%{_value}%.item", "modify", {_player}'s tool)
		mj_manager_message({_player}, "calendar", "data.prefix", "calendar", "data.define.item", "%{_player}'s tool%", "%{_value}%")
	else if {_type} is "money":
		mj_editfiles_number("calendar.data", "data.next_calendar.%{_value}%.money", "modify", {_money})
		mj_editfiles("calendar.data", "data.next_calendar.%{_value}%.item", "modify", "paper")
		set {_view} to mj_core_format_money(false, {_money})
		mj_manager_message({_player}, "calendar", "data.prefix", "calendar", "data.define.money", {_view}, "%{_value}%")
	else:
		mj_editfiles_number("calendar.data", "data.next_calendar.%{_value}%.money", "modify", 0)
		mj_editfiles("calendar.data", "data.next_calendar.%{_value}%.item", "modify", "air")
		mj_manager_message({_player}, "calendar", "data.prefix", "calendar", "data.define.hide", "%{_value}%")
	stop
# ---------------------------------------------------------------------------------------------------------------------
#every 30 minutes:
	#set {_check} to mj_editfiles_boolean("calendar.config", "data.condition")
	#if {_check} is true:
	#	set {_month.1} to mj_editfiles_number("calendar.data", "data.last_month")
	#	set {_date} to now formatted with "mm"
	#	set {_month.2} to {_date} parsed as number
	#	if {_month.2} isn't {_month.1}:
	#		mj_calendar_reset()
	#		mj_editfiles_number("calendar.data", "data.last_month", "modify", {_day.2})
	#stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_calendar_reset():
	set {_list.1::*} to mj_manager_nodes("calendar.data", "data.next_calendar")
	loop {_list.1::*}:
		set {_value.1} to mj_editfiles("calendar.data", "data.next_calendar.%loop-value%.type")
		set {_value.2} to mj_editfiles_number("calendar.data", "data.next_calendar.%loop-value%.money")
		set {_value.3} to yaml value "data.next_calendar.%loop-value%.item" from "mj.calendar.data"
		wait 2 ticks
		mj_editfiles("calendar.data", "data.current_calendar.%loop-value%.type", "modify", {_value.1})
		mj_editfiles_number("calendar.data", "data.current_calendar.%loop-value%.money", "modify", {_value.2})
		set yaml value "data.current_calendar.%loop-value%.item" from "mj.calendar.data" to {_value.3}
		wait 2 ticks
		mj_editfiles("calendar.data", "data.next_calendar.%loop-value%.type", "modify", "hide")
		mj_editfiles_number("calendar.data", "data.next_calendar.%loop-value%.money", "modify", 0)
		mj_editfiles("calendar.data", "data.next_calendar.%loop-value%.item", "modify", "air")
	save yaml "mj.calendar.data"
	set {_list.2::*} to mj_manager_nodes("userdata")
	loop {_list.2::*}:
		mj_editfiles_boolean("temp", "data.%loop-value%.calendar", "modify", true)
	stop
# ---------------------------------------------------------------------------------------------------------------------
# APIxMJ - Function
# =====================================================================================================================


