# =====================================================================================================================
# APIxMJ - Files
# ---------------------------------------------------------------------------------------------------------------------
function mj_files_userdata():
	set {_folder} to mj_editfiles("supervisor.data", "data.addon.main.userdata.folder")
	load yaml "plugins/APIxMJ/%{_folder}%/config.yml" as "mj.userdata.config"
	load yaml "plugins/APIxMJ/%{_folder}%/data.yml" as "mj.userdata.data"
	set {_list::*} to mj_editfiles_list("supervisor.config", "data.language.list")
	if {_list::*} is set:
		loop {_list::*}:
			load yaml "plugins/APIxMJ/%{_folder}%/language/%loop-value%.yml" as "mj.userdata.language.%loop-value%"
			load yaml "plugins/APIxMJ/%{_folder}%/help/%loop-value%.yml" as "mj.userdata.help.%loop-value%"
	loop all players:
		set {_profil} to mj_editfiles("userdata.data", "data.%loop-player's uuid%.profil")
		if {_profil} isn't "none":
			set {_profil} to "default"
		load yaml "plugins/APIxMJ/%{_folder}%/players/%loop-player's uuid%/%{_profil}%.yml" as "mj.userdata.user.%loop-player's uuid%.%{_profil}%"
		mj_userdata_playerdata(loop-player)
	stop
# ---------------------------------------------------------------------------------------------------------------------
on load:
	set {_list::*} to mj_manager_skript_list()
	if {_list::*} contains "apixmj_sv_core.sk":
		send "[APIxMJ] Loading userdata..." to console
		mj_files_userdata()
	else:
		broadcast "[APIxMJ] Script loading cancel It requires (apixmj_sv_core.sk)"
		unload script file "apixmj_userdata.sk"
	stop
# ---------------------------------------------------------------------------------------------------------------------
on skript stop:
	rename file "plugins/Skript/scripts/apixmj_userdata.sk" to "-apixmj_userdata.sk"
	send "[APIxMJ] Unloading userdata.."
	stop
# ---------------------------------------------------------------------------------------------------------------------
# APIxMJ - Files
# =====================================================================================================================
# APIxMJ - Userdata
# ---------------------------------------------------------------------------------------------------------------------
on join:
	if event-entity is player:
		mj_userdata_playerdata(player)
		wait 3 seconds
		set {_check.1} to mj_editfiles("userdata.data", "data.%player's uuid%.pseudo")
		if {_check.1} isn't "none":
			mj_editfiles_date("userdata.data", "data.%player's uuid%.connect.last", "modify", now)
			if {_check.1} isn't "%player%":
				mj_editfiles("userdata.data", "data.%player's uuid%.pseudo", "modify", "%player%")
				mj_editfiles("userdata.data", "data.%player's uuid%.last_pseudo", "modify", "%{_check.1}%")
				mj_logger(1, "%player% to change nickname he name himself %{_check.1}% before (still uses the same UUID)")
			set {_check.2} to mj_editfiles("userdata.data", "data.%player's uuid%.ip")
			if {_check.2} isn't player's ip:
				mj_editfiles("userdata.data", "data.%player's uuid%.ip", "modify", player's ip)
				mj_logger(1, "%player% it is connected with another IP")
				set {_list::*} to mj_nodes("userdata.data")
				loop {_list::*}:
					set {_target} to loop-value parsed as offlineplayer
					set {_ip} to mj_editfiles("userdata.data", "data.%{_target}'s uuid%.ip")
					if player's ip is {_ip}:
						if player's uuid isn't {_target}'s uuid:
							mj_logger(1, "%player% at the same IP address as the player %{_target}%")
	stop
# ---------------------------------------------------------------------------------------------------------------------
on quit:
	if event-entity is player:
		set {_profil} to mj_editfiles("userdata.data", "data.%player's uuid%.profil")
		mj_location("userdata.user.%player's uuid%", "data", "modify", player)
		mj_editfiles("userdata.data", "data.%player's uuid%.playtime", "modify", "%player's time played%")
		wait 5 seconds
		if player is offline:
			unload yaml "mj.userdata.user.%player's uuid%.%{_profil}%"
			mj_logger(2, "%player% unloading userdata file..")
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_userdata_playerdata(player: offlineplayer):
	set {_folder} to mj_editfiles("supervisor.data", "data.addon.main.userdata.folder")
	set {_profil} to yaml value "data.%{_player}'s uuid%.profil" from "mj.userdata.data"
	if {_profil} isn't set:
		set {_profil} to "default"
	load yaml "plugins/APIxMJ/%{_folder}%/players/%{_player}'s uuid%/%{_profil}%.yml" as "mj.userdata.user.%{_player}'s uuid%.%{_profil}%"
	mj_logger(1, "%{_player}% loading userdata file..")
	wait 5 ticks
	set {_check.1} to yaml value "data.%{_player}'s uuid%.pseudo" from "mj.userdata.data"
	if {_check.1} isn't set:
		set yaml value "data.%{_player}'s uuid%.pseudo" from "mj.userdata.data" to "%{_player}%"
		set yaml value "data.%{_player}'s uuid%.last_pseudo" from "mj.userdata.data" to "none"
		set yaml value "data.%{_player}'s uuid%.ip" from "mj.userdata.data" to "0.0.0.0"
		set yaml value "data.%{_player}'s uuid%.log" from "mj.userdata.data" to 0
		set yaml value "data.%{_player}'s uuid%.connect.first" from "mj.userdata.data" to now
		set yaml value "data.%{_player}'s uuid%.connect.last" from "mj.userdata.data" to now
		set yaml value "data.%{_player}'s uuid%.playtime" from "mj.userdata.data" to "none"
		set yaml value "data.%{_player}'s uuid%.profil" from "mj.userdata.data" to "default"
		set yaml list "data.%{_player}'s uuid%.profil_list" from "mj.userdata.data" to "default"
		set yaml value "data.%{_player}'s uuid%.source" from "mj.userdata.data" to "none"
		save yaml "mj.userdata.data"
		mj_logger(1, "%{_player}% core data file was generated..")
	wait 5 ticks
	set {_check.2} to yaml value "data.pseudo" from "mj.userdata.user.%{_player}'s uuid%.%{_profil}%"
	if {_check.2} isn't set:
		set yaml value "data.pseudo" from "mj.userdata.user.%{_player}'s uuid%.%{_profil}%" to "%{_player}%"
		set yaml value "data.language" from "mj.userdata.user.%{_player}'s uuid%.%{_profil}%" to "fr"
		set yaml value "data.location" from "mj.userdata.user.%{_player}'s uuid%.%{_profil}%" to "none"
		set yaml value "data.source" from "mj.userdata.user.%{_player}'s uuid%.%{_profil}%" to "none"
		set yaml value "data.temp.mute" from "mj.userdata.user.%{_player}'s uuid%.%{_profil}%" to false
		set yaml value "data.temp.gui" from "mj.userdata.user.%{_player}'s uuid%.%{_profil}%" to "none"
		set yaml value "data.temp.gui_protect" from "mj.userdata.user.%{_player}'s uuid%.%{_profil}%" to false
		set yaml value "data.support.stats" from "mj.userdata.user.%{_player}'s uuid%.%{_profil}%" to "none"
		set yaml value "data.support.inventory" from "mj.userdata.user.%{_player}'s uuid%.%{_profil}%" to "none"
		save yaml "mj.userdata.user.%{_player}'s uuid%.%{_profil}%"
		mj_logger(1, "%{_player}% core data was generated..")
	stop
# ---------------------------------------------------------------------------------------------------------------------
# APIxMJ - Userdata
# =====================================================================================================================
# APIxMJ - Profil
# ---------------------------------------------------------------------------------------------------------------------
command /profil [<text>] [<text>] [<text>]:
	executable by: player
	trigger:
		if player has permission "*" or "mj.*" or "mj.userdata.profil.*" or "mj.userdata.profil":
			if arg-1 is set:
				if arg-1 is "migration" or "change":
					if arg-2 is set:
						mj_userdata_profil_migration(player, arg-2)
					else:
						mj_message(player, "userdata", "data.prefix", "supervisor", "data.argument.name")
				else if arg-1 is "create":
					if player has permission "*" or "mj.*" or "mj.userdata.profil.*" or "mj.userdata.profil.create":
						if arg-3 is set:
							if arg-2 is set:
								mj_userdata_profil_create((arg-3 parsed as offlineplayer), arg-2)
								mj_message(player, "userdata", "data.prefix", "userdata", "data.profil.create_other", arg-3, arg-2)
							else:
								mj_message(player, "userdata", "data.prefix", "supervisor", "data.argument.name")
						else if arg-2 is set:
							mj_userdata_profil_create(player, arg-2)
						else:
							mj_message(player, "userdata", "data.prefix", "supervisor", "data.argument.name")
					else:
						mj_permission(player, "userdata", "data.prefix", "mj.userdata.profil.create")
				else:
					mj_message(player, "userdata", "data.prefix", "supervisor", "data.argument.name")
			else:
				mj_message(player, "userdata", "data.prefix", "supervisor", "data.argument.name")
		else:
			mj_permission(player, "userdata", "data.prefix", "mj.userdata.profil")
		stop
# ---------------------------------------------------------------------------------------------------------------------
on tab complete of "/profil":
	if player has permission "*" or "mj.*" or "mj.profil.*" or "mj.profil":
		set {_list1::*} to mj_nodes("userdata.data")
		loop {_list1::*}:
			set {_player} to mj_editfiles("userdata.data", "data.%loop-value%.pseudo")
			add {_player} to {_list2::*}
		if player has permission "*" or "mj.*" or "mj.profil.*" or "mj.profil.create":
			add "create" to {_list3::*}
		set tab completions for position 1 to "migration", "change" and {_list3::*}
		if tab arg-1 is "migration" or "change":
			set {_profil} to mj_editfiles("userdata.data", "data.%player's uuid%.profil")
			set {_list4::*} to mj_editfiles_list("userdata.data", "data.%player's uuid%.profil_list")
			remove {_profil} from {_list4::*}
			set tab completions for position 2 to {_list4::*}
		if tab arg-1 is "create":
			set tab completions for position 2 to "new_profil_name"
			if tab arg-2 is set:
				set tab completions for position 3 to {_list2::*}
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_userdata_profil_create(player: offlineplayer, value: text):
	set {_profil} to mj_editfiles("userdata.data", "data.%{_player}'s uuid%.profil")
	mj_location("userdata.user.%{_player}'s uuid%.%{_profil}%", "data", "modify", {_player})
	mj_editfiles("userdata.data", "data.%{_player}'s uuid%.playtime", "modify", "%{_player}'s time played%")
	mj_userdata_inventory_save({_player}, "last")
	wait 1 second
	mj_editfiles("userdata.data", "data.%{_player}'s uuid%.profil", "modify", {_value})
	set {_list.1::*} to mj_editfiles_list("userdata.data", "data.%{_player}'s uuid%.profil_list")
	add {_value} to {_list.1::*}
	mj_editfiles_list("userdata.data", "data.%{_player}'s uuid%.profil_list", "modify", {_list.1::*})
	mj_userdata_playerdata({_player})
	console command "/profil_update %{_player}%"
	wait 1 second
	unload yaml "mj.userdata.user.%{_player}'s uuid%.%{_profil}%"
	mj_logger(2, "%{_player}% unloading userdata file..")
	clear {_player}'s inventory
	clear {_player}'s enderchest
	set {_player}'s xp to 0
	set {_player}'s health to 20
	set {_player}'s food to 10
	set {_player}'s gamemode to survival
	set {_list2::*} to mj_manager_skript_list()
	#if {_list2::*} contains "apixmj_essentials.sk":
	#	set {_tp} to mj_location("essentials.config", "data.spawn")
	#	teleport {_player} to {_tp}
	mj_message({_player}, "userdata", "data.prefix", "userdata", "data.profil.create", {_value})
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_userdata_profil_migration(player: offlineplayer, value: text):
	set {_list::*} to mj_editfiles_list("userdata.data", "data.%{_player}'s uuid%.profil_list")
	if {_list::*} contains {_value}:
		set {_profil} to mj_editfiles("userdata.data", "data.%{_player}'s uuid%.profil")
		mj_location("userdata.user.%{_player}'s uuid%", "data", "modify", {_player})
		mj_editfiles("userdata.data", "data.%{_player}'s uuid%.playtime", "modify", "%{_player}'s time played%")
		mj_userdata_inventory_save({_player}, "last")
		wait 1 second
		mj_editfiles("userdata.data", "data.%{_player}'s uuid%.profil", "modify", {_value})
		mj_userdata_playerdata({_player})
		console command "/profil_update %{_player}%"
		unload yaml "mj.userdata.user.%{_player}'s uuid%.%{_profil}%"
		mj_logger(2, "%{_player}% unloading userdata file..")
		mj_userdata_inventory_restore({_player}, "last")
		set {_tp} to mj_location("userdata.user.%{_player}'s uuid%", "data")
		teleport {_player} to {_tp}
		mj_message({_player}, "userdata", "data.prefix", "userdata", "data.profil.migration", {_profil}, {_value})
	stop
# ---------------------------------------------------------------------------------------------------------------------
# APIxMJ - Profil
# =====================================================================================================================
# APIxMJ - Inventory
# ---------------------------------------------------------------------------------------------------------------------
command /inventory [<text>] [<player>] [<text>]:
	executable by: player
	trigger:
		if player has permission "*" or "mj.*" or "mj.inventory.*" or "mj.inventory":
			if arg-1 is "save" or "restore":
				if arg-2 is set:
					if arg-3 is set:
						if arg-1 is "save":
							mj_userdata_inventory_save(arg-2, arg-3)
						else:
							mj_userdata_inventory_restore(arg-2, arg-3)
					else:
						mj_message(player, "userdata", "data.prefix", "supervisor", "data.argument.name")
				else:
					mj_message(player, "userdata", "data.prefix", "supervisor", "data.argument.player")
			else:
				mj_message(player, "userdata", "data.prefix", "userdata", "data.inventory.help")
		else:
			mj_permission(player, "userdata", "data.prefix", "mj.inventory")
		stop
# ---------------------------------------------------------------------------------------------------------------------
on tab complete of "/inventory":
	if player has permission "*" or "mj.*" or "mj.inventory.*" or "mj.inventory":
		set tab completions for position 1 to "save" and "restore"
		if tab arg-1 is set:
			if tab arg-2 is set:
				set {_player} to tab arg-2 parsed as offlineplayer
				set {_list::*} to mj_nodes("userdata.user.%{_player}'s uuid%", "data.support.inventory")
				set tab completions for position 3 to {_list::*}
	stop
# ---------------------------------------------------------------------------------------------------------------------
on death:
	if event-entity is player:
		mj_userdata_inventory_save(player, "death")
	stop
# ---------------------------------------------------------------------------------------------------------------------
on quit:
	if event-entity is player:
		mj_userdata_inventory_save(player, "last")
	stop
# ---------------------------------------------------------------------------------------------------------------------
every 5 minutes:
	set {_check} to mj_editfiles_boolean("userdata.config", "data.inventory.backup")
	if {_check} is true:
		loop all players:
			mj_userdata_inventory_save(loop-player, "backup")
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_userdata_inventory_save(player: player, type: text):
	mj_editfiles("userdata.user.%{_player}'s uuid%", "data.support.inventory.%{_type}%", "delete")
	set {_slot} to 0
	loop 36 times:
		set {_inv::%{_slot}%} to slot {_slot} of {_player}'s inventory
		add 1 to {_slot}
	mj_editfiles_date("userdata.user.%{_player}'s uuid%", "data.support.inventory.%{_type}%.date", "modify", now)
	mj_editfiles_number("userdata.user.%{_player}'s uuid%", "data.support.inventory.%{_type}%.level", "modify", {_player}'s xp)
	mj_editfiles_stock("userdata.user.%{_player}'s uuid%", "data.support.inventory.%{_type}%.helmet", "modify", {_player}'s helmet)
	mj_editfiles_stock("userdata.user.%{_player}'s uuid%", "data.support.inventory.%{_type}%.chestplate", "modify", {_player}'s chestplate)
	mj_editfiles_stock("userdata.user.%{_player}'s uuid%", "data.support.inventory.%{_type}%.leggings", "modify", {_player}'s leggings)
	mj_editfiles_stock("userdata.user.%{_player}'s uuid%", "data.support.inventory.%{_type}%.boots", "modify", {_player}'s boots)
	mj_editfiles_stock("userdata.user.%{_player}'s uuid%", "data.support.inventory.%{_type}%.offhand", "modify", {_player}'s offhand)
	mj_editfiles("userdata.user.%{_player}'s uuid%", "data.support.inventory.%{_type}%.gamemode", "modify", "%{_player}'s gamemode%")
	mj_editfiles_number("userdata.user.%{_player}'s uuid%", "data.support.inventory.%{_type}%.health", "modify", {_player}'s health)
	mj_editfiles_number("userdata.user.%{_player}'s uuid%", "data.support.inventory.%{_type}%.hunger", "modify", {_player}'s food)
	mj_editfiles_list("userdata.user.%{_player}'s uuid%", "data.support.inventory.%{_type}%.inventory", "modify", {_inv::*})
	mj_editfiles_stock("userdata.user.%{_player}'s uuid%", "data.support.inventory.%{_type}%.enderchest", "modify", {_player}'s enderchest's serialized contents)
	mj_logger(2, "Saving inventory to %{_player}% in the %{_type}%")
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_userdata_inventory_restore(player: player, type: text):
	clear {_player}'s inventory
	clear {_player}'s enderchest
	set {_player}'s xp to 0
	set {_inv::*} to mj_editfiles_list("userdata.user.%{_player}'s uuid%", "data.support.inventory.%{_type}%.inventory")
	set {_slot} to 0
	loop {_inv::*}:
		set slot {_slot} of {_player}'s inventory to loop-value
		add 1 to {_slot}
	set {_xp} to mj_editfiles_number("userdata.user.%{_player}'s uuid%", "data.support.inventory.%{_type}%.level")
	set {_player}'s xp to {_xp}
	set {_helmet} to mj_editfiles_stock("userdata.user.%{_player}'s uuid%", "data.support.inventory.%{_type}%.helmet")
	set {_player}'s helmet to {_helmet}
	set {_plate} to mj_editfiles_stock("userdata.user.%{_player}'s uuid%", "data.support.inventory.%{_type}%.chestplate")
	set {_player}'s chestplate to {_plate}
	set {_leg} to mj_editfiles_stock("userdata.user.%{_player}'s uuid%", "data.support.inventory.%{_type}%.leggings")
	set {_player}'s leggings to {_leg}
	set {_boots} to mj_editfiles_stock("userdata.user.%{_player}'s uuid%", "data.support.inventory.%{_type}%.boots")
	set {_player}'s boots to {_boots}
	set {_hand} to mj_editfiles_stock("userdata.user.%{_player}'s uuid%", "data.support.inventory.%{_type}%.offhand")
	set {_player}'s offhand to {_hand}
	set {_gamemode} to mj_editfiles_stock("userdata.user.%{_player}'s uuid%", "data.support.inventory.%{_type}%.gamemode")
	set {_gamemode} to {_gamemode} parsed as gamemode
	set {_player}'s gamemode to {_gamemode}
	set {_health} to mj_editfiles_stock("userdata.user.%{_player}'s uuid%", "data.support.inventory.%{_type}%.health")
	if {_health} is 0:
		set {_player}'s health to 20
	else:
		set {_player}'s health to {_health}
	set {_hunger} to mj_editfiles_stock("userdata.user.%{_player}'s uuid%", "data.support.inventory.%{_type}%.hunger")
	set {_player}'s food to {_hunger}
	set {_ec} to mj_editfiles_stock("userdata.user.%{_player}'s uuid%", "data.support.inventory.%{_type}%.enderchest")
	set serialized contents of {_player}'s enderchest to {_ec}
	mj_logger(2, "Restored inventory to %{_player}% from the %{_type}%")
	stop
# ---------------------------------------------------------------------------------------------------------------------
# APIxMJ - Inventory
# =====================================================================================================================
# APIxMJ - Stats
# ---------------------------------------------------------------------------------------------------------------------
on place:
	if event-entity is player:
		if player's tool isn't item frame or painting:
			set {_obj} to mj_userdata_stats_convert_name("%type of event-block%")
			mj_userdata_stats_save(player, "place.%{_obj}%")
	stop
# ---------------------------------------------------------------------------------------------------------------------
on break:
	if event-entity is player:
		if event-block is set:
			set {_obj} to mj_userdata_stats_convert_name("%type of event-block%")
			set {_count} to 1
			if "%event-block%" contains "double":
				set {_count} to 2
			mj_userdata_stats_save(player, "break.%{_obj}%")
	stop
# ---------------------------------------------------------------------------------------------------------------------
#on leftclick:
	#if event-entity is player:
	#	if player's tool isn't air:
	#		set {_obj} to mj_userdata_stats_convert_name("%type of player's tool%")
	#		mj_userdata_stats_save(player, "leftclick.%{_obj}%")
	#stop
# ---------------------------------------------------------------------------------------------------------------------
#on rightclick:
	#if event-entity is player:
	#	if player's tool isn't air:
	#		set {_obj} to mj_userdata_stats_convert_name("%type of player's tool%")
	#		mj_userdata_stats_save(player, "rightclick.%{_obj}%")
	#stop
# ---------------------------------------------------------------------------------------------------------------------
on craft:
	set {_obj} to mj_userdata_stats_convert_name("%event-item%")
	mj_userdata_stats_save(player, "craft.%{_obj}%")
	stop
# ---------------------------------------------------------------------------------------------------------------------
on death:
	if "%attacker's type%" is "player":
		set {_obj} to "%victim's type%"
		mj_userdata_stats_save(attacker, "kill.%{_obj}%")
	stop
# ---------------------------------------------------------------------------------------------------------------------
on death:
	if type of event-entity is player:
		mj_userdata_stats_save(player, "death")
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_userdata_stats_save(player: player, type: text, value: number=1):
	set {_count} to mj_editfiles_number("userdata.user.%{_player}'s uuid%", "data.support.stats.%{_type}%")
	add {_value} to {_count}
	mj_editfiles_number("userdata.user.%{_player}'s uuid%", "data.support.stats.%{_type}%", "modify", {_count})
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_userdata_stats_convert_name(item: text) :: text:
	replace "northward " or "downward " or "westward " or "eastward " or "southward " or "top " or "double " or "hanging " or "unbroken " or "damaged " or "chipped " with "" in {_item}
	replace "ascending " or "z-aligned " or "east " or "east-" or "west " or "south " or "upward " or "powered " or "floor " or "wall " or "top-half " or "short " with "" in {_item}
	replace "tall " or "north" or "south" or "open " or "two " or "three " or "four " or "five " or "six " or "seven " or "eight " or "single " or "ceiling " with "" in {_item}
	replace "flat " or "basedrum " or "bass " or "guitar " or "snare " or "hat " or "bell " or "flute " or "chime " or "xylophone " with "" in {_item}
	replace all " " with "_" in {_item}
	return {_item}
# ---------------------------------------------------------------------------------------------------------------------
# APIxMJ - Stats
# =====================================================================================================================