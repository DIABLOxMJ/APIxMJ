# =====================================================================================================================
# APIxMJ - Files
# ---------------------------------------------------------------------------------------------------------------------
function mj_files_spawner():
	set {_folder} to mj_editfiles("manager.data", "data.addon.vertebral_extension.spawner.folder")
	load yaml "plugins/APIxMJ/%{_folder}%/config.yml" as "mj.spawner.config"
	load yaml "plugins/APIxMJ/%{_folder}%/data.yml" as "mj.spawner.data"
	set {_list::*} to mj_editfiles_list("manager.config", "data.language.list")
	if {_list::*} is set:
		loop {_list::*}:
			load yaml "plugins/APIxMJ/%{_folder}%/language/%loop-value%.yml" as "mj.spawner.language.%loop-value%"
			load yaml "plugins/APIxMJ/%{_folder}%/help/%loop-value%.yml" as "mj.spawner.help.%loop-value%"
	wait 5 ticks
	mj_check_spawner_data()
	stop
# ---------------------------------------------------------------------------------------------------------------------
on load:
	set {_list::*} to mj_manager_skript_list()
	if {_list::*} contains "apixmj_manager.sk" and "apixmj.sk":
		send "[APIxMJ] Loading spawner..." to console
		mj_files_spawner()
		mj_editfiles("manager.data", "data.addon.vertebral_extension.spawner.version", "modify", "2022.11.09.0001")
	else:
		broadcast "[APIxMJ] Script loading cancel It requires (apixmj_manager.sk and apixmj.sk)"
		unload script file "apixmj_spawner.sk"
	stop
# ---------------------------------------------------------------------------------------------------------------------
on skript stop:
	rename file "plugins/Skript/scripts/apixmj_spawner.sk" to "-apixmj_spawner.sk"
	send "[APIxMJ] Unloading spawner.."
	stop
# ---------------------------------------------------------------------------------------------------------------------
function mj_check_spawner_data():
	set {_check::*} to yaml list "data" from "mj.spawner.data"
	if {_check::*} isn't set:
		add "zombie", "witch", "vindicator", "zombie_horse", "zombie_villager", "zombified_piglin", "wandering_trade", "villager", "zoglin", "cat" and "donkey" to {_mob::*}
		add "ghast", "bat", "bee", "magma_cube", "wolf", "vex", "wither_skeleton", "blaze", "endermite", "horse", "chicken", "guardian", "evoker", "creeper" and "llama" to {_mob::*}
		add "enderman", "cave_spider", "drowned", "hoglin", "elder_guardian", "huck", "mooshroom", "dolphin", "fox", "axolotl", "polar_bear", "parrot" and "panda" to {_mob::*}
		add "skeleton_horse", "trader_llama", "tropical_fish", "pufferfish", "mule", "cow", "rabbit", "turtle", "strider", "salmon", "pig", "phantom" and "ravager" to {_mob::*}
		add "skeleton", "silverfish", "piglin", "shulker", "slime", "squid", "sheep", "stray", "spider", "ocelot", "piglin_brute", "pillager", "iron_golem" and "wither" to {_mob::*}
		set yaml list "data" from "mj.spawner.data" to {_mob::*}
		save yaml "mj.spawner.data"
	stop
# ---------------------------------------------------------------------------------------------------------------------
# APIxMJ - Files
# =====================================================================================================================
# APIxMJ - Command
# ---------------------------------------------------------------------------------------------------------------------
command /spawner [<text>]:
	executable by: player
	trigger:
		if player has permission "*" or "mj.*" or "mj.spawner.*" or "mj.spawner.give":
			if arg-1 is set:
				set {_list::*} to mj_editfiles_list("spawner.data")
				if arg-1 is "spawner_pickaxe":
					set {_name} to mj_editfiles("spawner.config", "data.format.pickaxe_name")
					set {_type} to mj_editfiles("spawner.config", "data.format.break_limit")
					set {_count} to mj_editfiles_number("spawner.config", "data.custom_pickaxe.break_limit")
					set {_item} to mj_core_converter_item("spawner.config", "data.custom_pickaxe.item")
					set {_item} to {_item} named {_name}
					set line 2 of lore of {_item} to "%{_type}%%{_count}%"
					give {_item} to player
					mj_core_message(player, "spawner", "data.prefix", "spawner", "data.give_tool", arg-1)
				else if {_list::*} contains arg-1:
					set {_name} to mj_editfiles("spawner.config", "data.format.spawner_name")
					set {_type} to mj_editfiles("spawner.config", "data.format.spawner_type")
					set {_item} to mob spawner named {_name}
					set line 1 of lore of {_item} to "%{_type}%%arg-1%"
					give {_item} to player
					mj_core_message(player, "spawner", "data.prefix", "spawner", "data.give", arg-1)
				else:
					mj_core_message(player, "spawner", "data.prefix", "spawner", "data.no_give")
			else:
				mj_core_message(player, "spawner", "data.prefix", "core", "data.argument.name")
		else:
			mj_core_permission(player, "spawner", "data.prefix", "mj.spawner.give")
		stop
# ---------------------------------------------------------------------------------------------------------------------
on tab complete of "/spawner":
	if player has permission "*" or "mj.*" or "mj.spawner.*" or "mj.spawner.give":
		set {_list::*} to mj_editfiles_list("spawner.data")
		set tab completions for position 1 to {_list::*} and "spawner_pickaxe"
	stop
# ---------------------------------------------------------------------------------------------------------------------
# APIxMJ - Command
# =====================================================================================================================
# APIxMJ - Function
# ---------------------------------------------------------------------------------------------------------------------
on break:
	if event-block is mob spawner:
		if player has permission "*" or "mj.*" or "mj.spawner.*" or "mj.spawner":
			set {_check} to mj_editfiles_boolean("spawner.config", "data.silk_touch")
			if {_check} is true:
				if player's tool is enchanted with silk touch:
					set {_nbt} to nbt compound of event-block
					set {_newnbt} to "%{_nbt}%"
					set {_list::*} to mj_editfiles_list("spawner.data")
					loop {_list::*}:
						if {_newnbt} contains loop-value:
							set {_name} to mj_editfiles("spawner.config", "data.format.spawner_name")
							set {_type} to mj_editfiles("spawner.config", "data.format.spawner_type")
							set {_item} to mob spawner named {_name}
							set line 1 of lore of {_item} to "%{_type}%%loop-value%"
							drop {_item}
							exit loop
		else:
			mj_core_permission(player, "spawner", "data.prefix", "mj.spawner.give")
	stop
# ---------------------------------------------------------------------------------------------------------------------
on break:
	if event-block is mob spawner:
		if player has permission "*" or "mj.*" or "mj.spawner.*" or "mj.spawner":
			set {_check1} to mj_editfiles_boolean("spawner.config", "data.pickaxe")
			if {_check1} is true:
				set {_pickaxe} to mj_editfiles("spawner.config", "data.format.pickaxe")
				if name of player's tool is {_pickaxe}:
					set {_nbt} to nbt compound of event-block
					set {_newnbt} to "%{_nbt}%"
					set {_list::*} to mj_editfiles_list("spawner.data")
					loop {_list::*}:
						if {_newnbt} contains loop-value:
							set {_name} to mj_editfiles("spawner.config", "data.format.spawner_name")
							set {_type} to mj_editfiles("spawner.config", "data.format.spawner_type")
							set {_item} to mob spawner named {_name}
							set line 1 of lore of {_item} to "%{_type}%%loop-value%"
							drop {_item}
							set {_check2} to mj_editfiles_number("spawner.config", "data.break_limit")
							if {_check2} isn't -1:
								set {_lore} to line 2 of lore of player's tool
								set {_limit} to mj_editfiles("spawner.config", "data.format.break_limit")
								replace {_limit} with "" in {_lore}
								set {_count} to {_lore} parsed as number
								remove 1 from {_count}
								if {_count} is 0:
									set player's tool to air
								else:
									set line 2 of lore of player's tool to "%{_limit}%%{_count}%"
								exit loop
		else:
			mj_core_permission(player, "spawner", "data.prefix", "mj.spawner.give")
	stop
# ---------------------------------------------------------------------------------------------------------------------
on place of mob spawner:
	set {_name} to mj_editfiles("spawner.config", "data.format.spawner_name")
	if name of player's tool is {_name}:
		set {_lore} to line 1 of lore of player's tool
		wait 2 ticks
		set {_type} to mj_editfiles("spawner.config", "data.format.spawner_type")
		if {_lore} contains {_type}:
			replace all {_type} with "" in {_lore}
			add "{SpawnData:{entity:{id:""minecraft:%{_lore}%""}},SpawnPotentials:[{Entity:{id:""minecraft:%{_lore}%""}}]}" to nbt of event-block
	stop
# ---------------------------------------------------------------------------------------------------------------------
on place of mob spawner:
	set {_check} to mj_editfiles_boolean("spawner.config", "data.chunk.condition")
	if {_check} is true:
		cancel event
		set {_check1} to false
		set {_count} to 0
		wait 1 tick
		loop blocks within chunk at location of block:
			if loop-block is mob spawner:
				add 1 to {_count}
				set {_check2} to mj_editfiles_number("spawner.config", "data.chunk_limit")
				if {_count} >= {_check2}:
					set {_check1} to true
		if {_check1} is true:
			mj_core_message(player, "spawner", "data.prefix", "spawner", "data.chunk_limit", "%{_count}%")
		else:
			set block at event-location to mob spawner
			if player's gamemode isn't creative:
				remove 1 of mob spawner from player's tool
	stop
# ---------------------------------------------------------------------------------------------------------------------
# APIxMJ - Function
# =====================================================================================================================